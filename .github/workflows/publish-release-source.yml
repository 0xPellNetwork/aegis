name: Publish Release From Source Code

on:
  push:
    tags:
      - 'v*.*.*'

concurrency:
  group: publish-release
  cancel-in-progress: false

jobs:

  check-branch:
    runs-on: [ "self-hosted", "Linux", "X64", "explorer", "gcp" ]
    steps:
      - name: Get Tag Version
        run: |
          TAG_VERSION="${GITHUB_REF#refs/tags/}"
          echo "GITHUB_TAG_VERSION=$TAG_VERSION" >> ${GITHUB_ENV}
          echo "Tag version is: $TAG_VERSION"

  check-changelog:
    needs:
      - check-branch
    runs-on: [ "self-hosted", "Linux", "X64", "explorer", "gcp" ]
    steps:
      - name: Checkout code
        if: inputs.skip_checks != true
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get latest commit SHA of Main & Current Tag
        if: inputs.skip_checks != true
        id: get-main-sha
        run: |
          SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/git/ref/heads/main | jq -r '.object.sha')
          echo "MAIN_SHA=${SHA}" >> ${GITHUB_ENV}
          echo "CURRENT_BRANCH_SHA=${{ github.sha }}" >> ${GITHUB_ENV}

      - name: Check for CHANGELOG.md changes
        if: inputs.skip_checks != true
        run: |
          echo "Check the changelog has actually been updated from whats in main"
          CHANGELOG_DIFF=$(git diff ${MAIN_SHA}..${CURRENT_BRANCH_SHA} -- CHANGELOG.md)
          if [ -z "$CHANGELOG_DIFF" ]; then
            echo "ERROR: No changes detected in CHANGELOG.md. Please update the changelog."
          else
            echo "CHANGELOG.md has been updated."
          fi

      - name: Mark Job Complete Skipped
        if: inputs.skip_checks == true
        shell: bash
        run: echo "continue"

  publish-release:
    permissions:
      id-token: write
      contents: write
      attestations: write
    if: inputs.skip_release != true
    needs:
      - check-changelog
      - check-branch
    runs-on: [ "self-hosted", "Linux", "X64", "explorer", "gcp" ]
    timeout-minutes: 60
    environment: release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          tags: true

      - name: Change Log Release Notes.
        id: release_notes
        run: |
          cat CHANGELOG.md > ${{ github.workspace }}-CHANGELOG.txt
          cat ${{ github.workspace }}-CHANGELOG.txt

      - name: Set Version from Tag
        run: |
          echo "GITHUB_TAG_MAJOR_VERSION=${GITHUB_TAG_VERSION}" >> ${GITHUB_ENV}
          echo "Using tag version: ${GITHUB_TAG_VERSION}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}
          body_path: ${{ github.workspace }}-CHANGELOG.txt
          tag_name: ${{ env.GITHUB_TAG_MAJOR_VERSION }}

      # - name: Publish Release Files
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      #     GOPRIVATE: "github.com/0xPellNetwork"
      #     GORELEASER_CURRENT_TAG: ${{ env.GITHUB_TAG_MAJOR_VERSION }}
      #   run: |
      #     touch .release-env
      #     make release-dry-run

      # - name: Artifact Attestations
      #   id: attestation
      #   uses: actions/attest-build-provenance@v1
      #   with:
      #     subject-path: |
      #       dist/pellcored_**/*
      #       dist/pellclientd_**/*
      #       dist/checksums.txt

      # - name: Upload Attestation Bundle
      #   env: 
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   shell: bash 
      #   run: | 
      #     gh release upload ${{ env.GITHUB_TAG_MAJOR_VERSION }} ${{ steps.attestation.outputs.bundle-path }}

      - name: Clean Up Workspace
        if: always()
        shell: bash
        run: sudo rm -rf * || echo "failed to cleanup workspace please investigate"

  release-success:
    needs: publish-release
    runs-on: [ "self-hosted", "Linux", "X64", "explorer", "gcp" ]
    steps:
      - name: Notify Lark upon release
        uses: drayeasy/action-lark-notify@main
        env:
          LARK_WEBHOOK: ${{ secrets.LARK_WEBHOOK_URL_FOR_RELEASE }}
          LARK_MESSAGE_TITLE: "ðŸš€ Pell Chain PreRelease ${{ github.ref_name }}"
          LARK_MESSAGE_URL: "${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
          LARK_MESSAGE_TEMPLATE: "yellow"