// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/chains/chains.proto

package chains

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ReceiveStatus represent the status of a received transaction
type ReceiveStatus int32

const (
	// some observer sees inbound tx
	ReceiveStatus_CREATED ReceiveStatus = 0
	// success
	ReceiveStatus_SUCCESS ReceiveStatus = 1
	// failed
	ReceiveStatus_FAILED ReceiveStatus = 2
)

var ReceiveStatus_name = map[int32]string{
	0: "CREATED",
	1: "SUCCESS",
	2: "FAILED",
}

var ReceiveStatus_value = map[string]int32{
	"CREATED": 0,
	"SUCCESS": 1,
	"FAILED":  2,
}

func (x ReceiveStatus) String() string {
	return proto.EnumName(ReceiveStatus_name, int32(x))
}

func (ReceiveStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_37ad35e0488e8bbc, []int{0}
}

// NetWork represent chain type
type NetWork int32

const (
	// ethereum
	NetWork_ETH NetWork = 0
	// pell
	NetWork_PELL NetWork = 1
	// bitcoin
	NetWork_BTC NetWork = 2
	// polygon
	NetWork_POLYGON NetWork = 3
	// bsc
	NetWork_BSC NetWork = 4
	// goerli
	NetWork_GOERLI NetWork = 5
	// mumbai
	NetWork_MUMBAI NetWork = 6
	// ganache
	NetWork_GANACHE NetWork = 7
	// baobab
	NetWork_BAOBAB NetWork = 8
	// sepolia
	NetWork_SEPOLIA NetWork = 9
	// amoy
	NetWork_AMOY NetWork = 10
	// optimism
	NetWork_OPTIMISM NetWork = 11
	// base
	NetWork_BASE NetWork = 12
	// core
	NetWork_CORE NetWork = 13
	// mantle
	NetWork_MANTLE NetWork = 14
	// arbitrum
	NetWork_ARBITRUM NetWork = 15
	// bitlayer
	NetWork_BITLAYER NetWork = 16
)

var NetWork_name = map[int32]string{
	0:  "ETH",
	1:  "PELL",
	2:  "BTC",
	3:  "POLYGON",
	4:  "BSC",
	5:  "GOERLI",
	6:  "MUMBAI",
	7:  "GANACHE",
	8:  "BAOBAB",
	9:  "SEPOLIA",
	10: "AMOY",
	11: "OPTIMISM",
	12: "BASE",
	13: "CORE",
	14: "MANTLE",
	15: "ARBITRUM",
	16: "BITLAYER",
}

var NetWork_value = map[string]int32{
	"ETH":      0,
	"PELL":     1,
	"BTC":      2,
	"POLYGON":  3,
	"BSC":      4,
	"GOERLI":   5,
	"MUMBAI":   6,
	"GANACHE":  7,
	"BAOBAB":   8,
	"SEPOLIA":  9,
	"AMOY":     10,
	"OPTIMISM": 11,
	"BASE":     12,
	"CORE":     13,
	"MANTLE":   14,
	"ARBITRUM": 15,
	"BITLAYER": 16,
}

func (x NetWork) String() string {
	return proto.EnumName(NetWork_name, int32(x))
}

func (NetWork) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_37ad35e0488e8bbc, []int{1}
}

// network represent chain network type
type NetWorkType int32

const (
	// mainnet
	NetWorkType_MAINNET NetWorkType = 0
	// testnet
	NetWorkType_TESTNET NetWorkType = 1
	// privnet
	NetWorkType_PRIVNET NetWorkType = 2
	// devnet
	NetWorkType_DEVNET NetWorkType = 3
)

var NetWorkType_name = map[int32]string{
	0: "MAINNET",
	1: "TESTNET",
	2: "PRIVNET",
	3: "DEVNET",
}

var NetWorkType_value = map[string]int32{
	"MAINNET": 0,
	"TESTNET": 1,
	"PRIVNET": 2,
	"DEVNET":  3,
}

func (x NetWorkType) String() string {
	return proto.EnumName(NetWorkType_name, int32(x))
}

func (NetWorkType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_37ad35e0488e8bbc, []int{2}
}

// VMType represent the type of vm
type VMType int32

const (
	// no vm
	VMType_NO_VM VMType = 0
	// ethereum vm
	VMType_EVM VMType = 1
	// solana vm
	VMType_SVM VMType = 2
)

var VMType_name = map[int32]string{
	0: "NO_VM",
	1: "EVM",
	2: "SVM",
}

var VMType_value = map[string]int32{
	"NO_VM": 0,
	"EVM":   1,
	"SVM":   2,
}

func (x VMType) String() string {
	return proto.EnumName(VMType_name, int32(x))
}

func (VMType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_37ad35e0488e8bbc, []int{3}
}

// Chain represent a chain
type Chain struct {
	Id          int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Network     NetWork     `protobuf:"varint,2,opt,name=network,proto3,enum=pkg.chains.NetWork" json:"network,omitempty"`
	NetworkType NetWorkType `protobuf:"varint,3,opt,name=network_type,json=networkType,proto3,enum=pkg.chains.NetWorkType" json:"network_type,omitempty"`
	VmType      VMType      `protobuf:"varint,4,opt,name=vm_type,json=vmType,proto3,enum=pkg.chains.VMType" json:"vm_type,omitempty"`
}

func (m *Chain) Reset()         { *m = Chain{} }
func (m *Chain) String() string { return proto.CompactTextString(m) }
func (*Chain) ProtoMessage()    {}
func (*Chain) Descriptor() ([]byte, []int) {
	return fileDescriptor_37ad35e0488e8bbc, []int{0}
}
func (m *Chain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chain.Merge(m, src)
}
func (m *Chain) XXX_Size() int {
	return m.Size()
}
func (m *Chain) XXX_DiscardUnknown() {
	xxx_messageInfo_Chain.DiscardUnknown(m)
}

var xxx_messageInfo_Chain proto.InternalMessageInfo

func (m *Chain) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Chain) GetNetwork() NetWork {
	if m != nil {
		return m.Network
	}
	return NetWork_ETH
}

func (m *Chain) GetNetworkType() NetWorkType {
	if m != nil {
		return m.NetworkType
	}
	return NetWorkType_MAINNET
}

func (m *Chain) GetVmType() VMType {
	if m != nil {
		return m.VmType
	}
	return VMType_NO_VM
}

func init() {
	proto.RegisterEnum("pkg.chains.ReceiveStatus", ReceiveStatus_name, ReceiveStatus_value)
	proto.RegisterEnum("pkg.chains.NetWork", NetWork_name, NetWork_value)
	proto.RegisterEnum("pkg.chains.NetWorkType", NetWorkType_name, NetWorkType_value)
	proto.RegisterEnum("pkg.chains.VMType", VMType_name, VMType_value)
	proto.RegisterType((*Chain)(nil), "pkg.chains.Chain")
}

func init() { proto.RegisterFile("pkg/chains/chains.proto", fileDescriptor_37ad35e0488e8bbc) }

var fileDescriptor_37ad35e0488e8bbc = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x4f, 0x4f, 0xdb, 0x30,
	0x1c, 0x8d, 0xd3, 0x3f, 0x29, 0x6e, 0xe9, 0x7e, 0xf2, 0x26, 0x51, 0x71, 0x88, 0xd0, 0x4e, 0x0c,
	0x44, 0x2b, 0x6d, 0xb7, 0xed, 0xe4, 0xa4, 0xa6, 0x58, 0x8a, 0x93, 0xca, 0x71, 0x3b, 0x75, 0x17,
	0x04, 0x25, 0x2a, 0x55, 0x29, 0x89, 0x4a, 0xe8, 0xc4, 0xb7, 0xd8, 0x87, 0xd8, 0x61, 0xb7, 0x7d,
	0x8d, 0x1d, 0x91, 0x76, 0xd9, 0x71, 0x6a, 0xbf, 0xc8, 0x64, 0x27, 0x08, 0x0e, 0x3b, 0xf9, 0xfd,
	0x5e, 0xde, 0x7b, 0xb6, 0x5f, 0x8c, 0xf7, 0xb2, 0xc5, 0xac, 0x37, 0xbd, 0xbe, 0x98, 0xdf, 0xde,
	0x95, 0x4b, 0x37, 0x5b, 0xa5, 0x79, 0x4a, 0x70, 0xb6, 0x98, 0x75, 0x0b, 0x66, 0xff, 0xcd, 0x2c,
	0x9d, 0xa5, 0x86, 0xee, 0x69, 0x54, 0x28, 0xde, 0xfe, 0x44, 0xb8, 0xe6, 0x6b, 0x01, 0x69, 0x63,
	0x7b, 0x7e, 0xd5, 0x41, 0x07, 0xe8, 0xb0, 0x22, 0xed, 0xf9, 0x15, 0x39, 0xc1, 0xce, 0x6d, 0x92,
	0x7f, 0x4d, 0x57, 0x8b, 0x8e, 0x7d, 0x80, 0x0e, 0xdb, 0xef, 0x5f, 0x77, 0x9f, 0xd3, 0xba, 0x61,
	0x92, 0x7f, 0x4e, 0x57, 0x0b, 0xf9, 0xa4, 0x21, 0x1f, 0x71, 0xab, 0x84, 0xe7, 0xf9, 0x43, 0x96,
	0x74, 0x2a, 0xc6, 0xb3, 0xf7, 0x1f, 0x8f, 0x7a, 0xc8, 0x12, 0xd9, 0x2c, 0xc5, 0x7a, 0x20, 0xc7,
	0xd8, 0x59, 0x2f, 0x0b, 0x5b, 0xd5, 0xd8, 0xc8, 0x4b, 0xdb, 0x58, 0x18, 0x47, 0x7d, 0xbd, 0xd4,
	0xeb, 0xd1, 0x27, 0xbc, 0x2b, 0x93, 0x69, 0x32, 0x5f, 0x27, 0x71, 0x7e, 0x91, 0xdf, 0xdf, 0x91,
	0x26, 0x76, 0x7c, 0xc9, 0xa8, 0x62, 0x7d, 0xb0, 0xf4, 0x10, 0x8f, 0x7c, 0x9f, 0xc5, 0x31, 0x20,
	0x82, 0x71, 0xfd, 0x94, 0xf2, 0x80, 0xf5, 0xc1, 0xde, 0xaf, 0xfe, 0xf8, 0xee, 0xa2, 0xa3, 0xdf,
	0x08, 0x3b, 0xe5, 0x31, 0x88, 0x83, 0x2b, 0x4c, 0x9d, 0x81, 0x45, 0x1a, 0xb8, 0x3a, 0x64, 0x41,
	0x00, 0x48, 0x53, 0x9e, 0xf2, 0xc1, 0xd6, 0x31, 0xc3, 0x28, 0x98, 0x0c, 0xa2, 0x10, 0x2a, 0x86,
	0x8d, 0x7d, 0xa8, 0xea, 0xbc, 0x41, 0xc4, 0x64, 0xc0, 0xa1, 0xa6, 0xb1, 0x18, 0x09, 0x8f, 0x72,
	0xa8, 0x6b, 0xf5, 0x80, 0x86, 0xd4, 0x3f, 0x63, 0xe0, 0xe8, 0x0f, 0x1e, 0x8d, 0x3c, 0xea, 0x41,
	0xc3, 0x9c, 0x86, 0x0d, 0xa3, 0x80, 0x53, 0xd8, 0xd1, 0xdb, 0x50, 0x11, 0x4d, 0x00, 0x93, 0x16,
	0x6e, 0x44, 0x43, 0xc5, 0x05, 0x8f, 0x05, 0x34, 0x35, 0xef, 0xd1, 0x98, 0x41, 0x4b, 0x23, 0x3f,
	0x92, 0x0c, 0x76, 0x4d, 0x3a, 0x0d, 0x55, 0xc0, 0xa0, 0xad, 0xd5, 0x54, 0x7a, 0x5c, 0xc9, 0x91,
	0x80, 0x57, 0x7a, 0xf2, 0xb8, 0x0a, 0xe8, 0x84, 0x49, 0x80, 0xf2, 0x56, 0xa7, 0xb8, 0xf9, 0xa2,
	0x5b, 0xbd, 0xab, 0xa0, 0x3c, 0x0c, 0x99, 0x2a, 0x0a, 0x51, 0x2c, 0x56, 0x7a, 0x40, 0xe6, 0x5a,
	0x92, 0x8f, 0xf5, 0x60, 0xeb, 0x3d, 0xfa, 0xcc, 0xe0, 0x4a, 0x99, 0x73, 0x8c, 0xeb, 0x45, 0xd9,
	0x64, 0x07, 0xd7, 0xc2, 0xe8, 0x7c, 0x2c, 0xc0, 0x32, 0x35, 0x8d, 0x45, 0x51, 0x4e, 0x3c, 0x16,
	0x4f, 0x55, 0x7a, 0xfe, 0xaf, 0x8d, 0x8b, 0x1e, 0x37, 0x2e, 0xfa, 0xbb, 0x71, 0xd1, 0xb7, 0xad,
	0x6b, 0x3d, 0x6e, 0x5d, 0xeb, 0xcf, 0xd6, 0xb5, 0xbe, 0xbc, 0x9b, 0xcd, 0xf3, 0xeb, 0xfb, 0xcb,
	0xee, 0x34, 0x5d, 0xf6, 0xb2, 0xe4, 0xe6, 0xe6, 0xc4, 0xfc, 0x48, 0x03, 0xa7, 0xe9, 0x2a, 0xe9,
	0x3d, 0xbf, 0xd6, 0xcb, 0xba, 0x79, 0x85, 0x1f, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x6c,
	0x16, 0xa0, 0xc2, 0x02, 0x00, 0x00,
}

func (m *Chain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VmType != 0 {
		i = encodeVarintChains(dAtA, i, uint64(m.VmType))
		i--
		dAtA[i] = 0x20
	}
	if m.NetworkType != 0 {
		i = encodeVarintChains(dAtA, i, uint64(m.NetworkType))
		i--
		dAtA[i] = 0x18
	}
	if m.Network != 0 {
		i = encodeVarintChains(dAtA, i, uint64(m.Network))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintChains(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintChains(dAtA []byte, offset int, v uint64) int {
	offset -= sovChains(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Chain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovChains(uint64(m.Id))
	}
	if m.Network != 0 {
		n += 1 + sovChains(uint64(m.Network))
	}
	if m.NetworkType != 0 {
		n += 1 + sovChains(uint64(m.NetworkType))
	}
	if m.VmType != 0 {
		n += 1 + sovChains(uint64(m.VmType))
	}
	return n
}

func sovChains(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChains(x uint64) (n int) {
	return sovChains(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Chain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChains
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			m.Network = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Network |= NetWork(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkType", wireType)
			}
			m.NetworkType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkType |= NetWorkType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmType", wireType)
			}
			m.VmType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VmType |= VMType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChains(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChains
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChains(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChains
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChains
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChains
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChains
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChains
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChains
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChains        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChains          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChains = fmt.Errorf("proto: unexpected end of group")
)
