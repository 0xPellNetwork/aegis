// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	proofs "github.com/0xPellNetwork/aegis/pkg/proofs"

	types "github.com/cosmos/cosmos-sdk/types"
)

// XmsgLightclientKeeper is an autogenerated mock type for the XmsgLightclientKeeper type
type XmsgLightclientKeeper struct {
	mock.Mock
}

// VerifyProof provides a mock function with given fields: ctx, proof, chainID, blockHash, txIndex
func (_m *XmsgLightclientKeeper) VerifyProof(ctx types.Context, proof *proofs.Proof, chainID int64, blockHash string, txIndex int64) ([]byte, error) {
	ret := _m.Called(ctx, proof, chainID, blockHash, txIndex)

	if len(ret) == 0 {
		panic("no return value specified for VerifyProof")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, *proofs.Proof, int64, string, int64) ([]byte, error)); ok {
		return rf(ctx, proof, chainID, blockHash, txIndex)
	}
	if rf, ok := ret.Get(0).(func(types.Context, *proofs.Proof, int64, string, int64) []byte); ok {
		r0 = rf(ctx, proof, chainID, blockHash, txIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, *proofs.Proof, int64, string, int64) error); ok {
		r1 = rf(ctx, proof, chainID, blockHash, txIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewXmsgLightclientKeeper creates a new instance of XmsgLightclientKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewXmsgLightclientKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *XmsgLightclientKeeper {
	mock := &XmsgLightclientKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
