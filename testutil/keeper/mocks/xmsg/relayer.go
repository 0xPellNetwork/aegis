// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	chains "github.com/0xPellNetwork/aegis/pkg/chains"
	coin "github.com/0xPellNetwork/aegis/pkg/coin"

	context "context"

	mock "github.com/stretchr/testify/mock"

	relayertypes "github.com/0xPellNetwork/aegis/x/relayer/types"

	types "github.com/cosmos/cosmos-sdk/types"
)

// XmsgRelayerKeeper is an autogenerated mock type for the XmsgRelayerKeeper type
type XmsgRelayerKeeper struct {
	mock.Mock
}

// AddBallotToList provides a mock function with given fields: ctx, ballot
func (_m *XmsgRelayerKeeper) AddBallotToList(ctx types.Context, ballot relayertypes.Ballot) {
	_m.Called(ctx, ballot)
}

// AddVoteToBallot provides a mock function with given fields: ctx, ballot, address, observationType
func (_m *XmsgRelayerKeeper) AddVoteToBallot(ctx types.Context, ballot relayertypes.Ballot, address string, observationType relayertypes.VoteType) (relayertypes.Ballot, error) {
	ret := _m.Called(ctx, ballot, address, observationType)

	if len(ret) == 0 {
		panic("no return value specified for AddVoteToBallot")
	}

	var r0 relayertypes.Ballot
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, relayertypes.Ballot, string, relayertypes.VoteType) (relayertypes.Ballot, error)); ok {
		return rf(ctx, ballot, address, observationType)
	}
	if rf, ok := ret.Get(0).(func(types.Context, relayertypes.Ballot, string, relayertypes.VoteType) relayertypes.Ballot); ok {
		r0 = rf(ctx, ballot, address, observationType)
	} else {
		r0 = ret.Get(0).(relayertypes.Ballot)
	}

	if rf, ok := ret.Get(1).(func(types.Context, relayertypes.Ballot, string, relayertypes.VoteType) error); ok {
		r1 = rf(ctx, ballot, address, observationType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckIfFinalizingVote provides a mock function with given fields: ctx, ballot
func (_m *XmsgRelayerKeeper) CheckIfFinalizingVote(ctx types.Context, ballot relayertypes.Ballot) (relayertypes.Ballot, bool) {
	ret := _m.Called(ctx, ballot)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfFinalizingVote")
	}

	var r0 relayertypes.Ballot
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, relayertypes.Ballot) (relayertypes.Ballot, bool)); ok {
		return rf(ctx, ballot)
	}
	if rf, ok := ret.Get(0).(func(types.Context, relayertypes.Ballot) relayertypes.Ballot); ok {
		r0 = rf(ctx, ballot)
	} else {
		r0 = ret.Get(0).(relayertypes.Ballot)
	}

	if rf, ok := ret.Get(1).(func(types.Context, relayertypes.Ballot) bool); ok {
		r1 = rf(ctx, ballot)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// CheckIfTssPubkeyHasBeenGenerated provides a mock function with given fields: ctx, tssPubkey
func (_m *XmsgRelayerKeeper) CheckIfTssPubkeyHasBeenGenerated(ctx types.Context, tssPubkey string) (relayertypes.TSS, bool) {
	ret := _m.Called(ctx, tssPubkey)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfTssPubkeyHasBeenGenerated")
	}

	var r0 relayertypes.TSS
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, string) (relayertypes.TSS, bool)); ok {
		return rf(ctx, tssPubkey)
	}
	if rf, ok := ret.Get(0).(func(types.Context, string) relayertypes.TSS); ok {
		r0 = rf(ctx, tssPubkey)
	} else {
		r0 = ret.Get(0).(relayertypes.TSS)
	}

	if rf, ok := ret.Get(1).(func(types.Context, string) bool); ok {
		r1 = rf(ctx, tssPubkey)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// DeleteBallot provides a mock function with given fields: ctx, index
func (_m *XmsgRelayerKeeper) DeleteBallot(ctx types.Context, index string) {
	_m.Called(ctx, index)
}

// FindBallot provides a mock function with given fields: ctx, index, chain, observationType
func (_m *XmsgRelayerKeeper) FindBallot(ctx types.Context, index string, chain *chains.Chain, observationType relayertypes.ObservationType) (relayertypes.Ballot, bool, error) {
	ret := _m.Called(ctx, index, chain, observationType)

	if len(ret) == 0 {
		panic("no return value specified for FindBallot")
	}

	var r0 relayertypes.Ballot
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(types.Context, string, *chains.Chain, relayertypes.ObservationType) (relayertypes.Ballot, bool, error)); ok {
		return rf(ctx, index, chain, observationType)
	}
	if rf, ok := ret.Get(0).(func(types.Context, string, *chains.Chain, relayertypes.ObservationType) relayertypes.Ballot); ok {
		r0 = rf(ctx, index, chain, observationType)
	} else {
		r0 = ret.Get(0).(relayertypes.Ballot)
	}

	if rf, ok := ret.Get(1).(func(types.Context, string, *chains.Chain, relayertypes.ObservationType) bool); ok {
		r1 = rf(ctx, index, chain, observationType)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(types.Context, string, *chains.Chain, relayertypes.ObservationType) error); ok {
		r2 = rf(ctx, index, chain, observationType)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllChainNonces provides a mock function with given fields: ctx
func (_m *XmsgRelayerKeeper) GetAllChainNonces(ctx types.Context) []relayertypes.ChainNonces {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllChainNonces")
	}

	var r0 []relayertypes.ChainNonces
	if rf, ok := ret.Get(0).(func(types.Context) []relayertypes.ChainNonces); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]relayertypes.ChainNonces)
		}
	}

	return r0
}

// GetAllNodeAccount provides a mock function with given fields: ctx
func (_m *XmsgRelayerKeeper) GetAllNodeAccount(ctx types.Context) []relayertypes.NodeAccount {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllNodeAccount")
	}

	var r0 []relayertypes.NodeAccount
	if rf, ok := ret.Get(0).(func(types.Context) []relayertypes.NodeAccount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]relayertypes.NodeAccount)
		}
	}

	return r0
}

// GetAllNonceToXmsg provides a mock function with given fields: ctx
func (_m *XmsgRelayerKeeper) GetAllNonceToXmsg(ctx types.Context) []relayertypes.NonceToXmsg {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllNonceToXmsg")
	}

	var r0 []relayertypes.NonceToXmsg
	if rf, ok := ret.Get(0).(func(types.Context) []relayertypes.NonceToXmsg); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]relayertypes.NonceToXmsg)
		}
	}

	return r0
}

// GetAllPendingNonces provides a mock function with given fields: ctx
func (_m *XmsgRelayerKeeper) GetAllPendingNonces(ctx types.Context) ([]relayertypes.PendingNonces, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPendingNonces")
	}

	var r0 []relayertypes.PendingNonces
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context) ([]relayertypes.PendingNonces, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) []relayertypes.PendingNonces); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]relayertypes.PendingNonces)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTSS provides a mock function with given fields: ctx
func (_m *XmsgRelayerKeeper) GetAllTSS(ctx types.Context) []relayertypes.TSS {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTSS")
	}

	var r0 []relayertypes.TSS
	if rf, ok := ret.Get(0).(func(types.Context) []relayertypes.TSS); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]relayertypes.TSS)
		}
	}

	return r0
}

// GetAllTssFundMigrators provides a mock function with given fields: ctx
func (_m *XmsgRelayerKeeper) GetAllTssFundMigrators(ctx types.Context) []relayertypes.TssFundMigratorInfo {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTssFundMigrators")
	}

	var r0 []relayertypes.TssFundMigratorInfo
	if rf, ok := ret.Get(0).(func(types.Context) []relayertypes.TssFundMigratorInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]relayertypes.TssFundMigratorInfo)
		}
	}

	return r0
}

// GetBallot provides a mock function with given fields: ctx, index
func (_m *XmsgRelayerKeeper) GetBallot(ctx types.Context, index string) (relayertypes.Ballot, bool) {
	ret := _m.Called(ctx, index)

	if len(ret) == 0 {
		panic("no return value specified for GetBallot")
	}

	var r0 relayertypes.Ballot
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, string) (relayertypes.Ballot, bool)); ok {
		return rf(ctx, index)
	}
	if rf, ok := ret.Get(0).(func(types.Context, string) relayertypes.Ballot); ok {
		r0 = rf(ctx, index)
	} else {
		r0 = ret.Get(0).(relayertypes.Ballot)
	}

	if rf, ok := ret.Get(1).(func(types.Context, string) bool); ok {
		r1 = rf(ctx, index)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetChainNonces provides a mock function with given fields: ctx, index
func (_m *XmsgRelayerKeeper) GetChainNonces(ctx types.Context, index string) (relayertypes.ChainNonces, bool) {
	ret := _m.Called(ctx, index)

	if len(ret) == 0 {
		panic("no return value specified for GetChainNonces")
	}

	var r0 relayertypes.ChainNonces
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, string) (relayertypes.ChainNonces, bool)); ok {
		return rf(ctx, index)
	}
	if rf, ok := ret.Get(0).(func(types.Context, string) relayertypes.ChainNonces); ok {
		r0 = rf(ctx, index)
	} else {
		r0 = ret.Get(0).(relayertypes.ChainNonces)
	}

	if rf, ok := ret.Get(1).(func(types.Context, string) bool); ok {
		r1 = rf(ctx, index)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetChainParamsByChainID provides a mock function with given fields: ctx, chainID
func (_m *XmsgRelayerKeeper) GetChainParamsByChainID(ctx types.Context, chainID int64) (*relayertypes.ChainParams, bool) {
	ret := _m.Called(ctx, chainID)

	if len(ret) == 0 {
		panic("no return value specified for GetChainParamsByChainID")
	}

	var r0 *relayertypes.ChainParams
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, int64) (*relayertypes.ChainParams, bool)); ok {
		return rf(ctx, chainID)
	}
	if rf, ok := ret.Get(0).(func(types.Context, int64) *relayertypes.ChainParams); ok {
		r0 = rf(ctx, chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*relayertypes.ChainParams)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, int64) bool); ok {
		r1 = rf(ctx, chainID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetChainParamsList provides a mock function with given fields: ctx
func (_m *XmsgRelayerKeeper) GetChainParamsList(ctx types.Context) (relayertypes.ChainParamsList, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetChainParamsList")
	}

	var r0 relayertypes.ChainParamsList
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context) (relayertypes.ChainParamsList, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) relayertypes.ChainParamsList); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(relayertypes.ChainParamsList)
	}

	if rf, ok := ret.Get(1).(func(types.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetCrosschainFlags provides a mock function with given fields: ctx
func (_m *XmsgRelayerKeeper) GetCrosschainFlags(ctx types.Context) (relayertypes.CrosschainFlags, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCrosschainFlags")
	}

	var r0 relayertypes.CrosschainFlags
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context) (relayertypes.CrosschainFlags, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) relayertypes.CrosschainFlags); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(relayertypes.CrosschainFlags)
	}

	if rf, ok := ret.Get(1).(func(types.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetFundMigrator provides a mock function with given fields: ctx, chainID
func (_m *XmsgRelayerKeeper) GetFundMigrator(ctx types.Context, chainID int64) (relayertypes.TssFundMigratorInfo, bool) {
	ret := _m.Called(ctx, chainID)

	if len(ret) == 0 {
		panic("no return value specified for GetFundMigrator")
	}

	var r0 relayertypes.TssFundMigratorInfo
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, int64) (relayertypes.TssFundMigratorInfo, bool)); ok {
		return rf(ctx, chainID)
	}
	if rf, ok := ret.Get(0).(func(types.Context, int64) relayertypes.TssFundMigratorInfo); ok {
		r0 = rf(ctx, chainID)
	} else {
		r0 = ret.Get(0).(relayertypes.TssFundMigratorInfo)
	}

	if rf, ok := ret.Get(1).(func(types.Context, int64) bool); ok {
		r1 = rf(ctx, chainID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetKeygen provides a mock function with given fields: ctx
func (_m *XmsgRelayerKeeper) GetKeygen(ctx types.Context) (relayertypes.Keygen, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetKeygen")
	}

	var r0 relayertypes.Keygen
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context) (relayertypes.Keygen, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) relayertypes.Keygen); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(relayertypes.Keygen)
	}

	if rf, ok := ret.Get(1).(func(types.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetNodeAccount provides a mock function with given fields: ctx, address
func (_m *XmsgRelayerKeeper) GetNodeAccount(ctx types.Context, address string) (relayertypes.NodeAccount, bool) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeAccount")
	}

	var r0 relayertypes.NodeAccount
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, string) (relayertypes.NodeAccount, bool)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(types.Context, string) relayertypes.NodeAccount); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(relayertypes.NodeAccount)
	}

	if rf, ok := ret.Get(1).(func(types.Context, string) bool); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetNonceToXmsg provides a mock function with given fields: ctx, tss, chainID, nonce
func (_m *XmsgRelayerKeeper) GetNonceToXmsg(ctx types.Context, tss string, chainID int64, nonce int64) (relayertypes.NonceToXmsg, bool) {
	ret := _m.Called(ctx, tss, chainID, nonce)

	if len(ret) == 0 {
		panic("no return value specified for GetNonceToXmsg")
	}

	var r0 relayertypes.NonceToXmsg
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, string, int64, int64) (relayertypes.NonceToXmsg, bool)); ok {
		return rf(ctx, tss, chainID, nonce)
	}
	if rf, ok := ret.Get(0).(func(types.Context, string, int64, int64) relayertypes.NonceToXmsg); ok {
		r0 = rf(ctx, tss, chainID, nonce)
	} else {
		r0 = ret.Get(0).(relayertypes.NonceToXmsg)
	}

	if rf, ok := ret.Get(1).(func(types.Context, string, int64, int64) bool); ok {
		r1 = rf(ctx, tss, chainID, nonce)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetObserverSet provides a mock function with given fields: ctx
func (_m *XmsgRelayerKeeper) GetObserverSet(ctx context.Context) (relayertypes.RelayerSet, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetObserverSet")
	}

	var r0 relayertypes.RelayerSet
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context) (relayertypes.RelayerSet, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) relayertypes.RelayerSet); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(relayertypes.RelayerSet)
	}

	if rf, ok := ret.Get(1).(func(context.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetPendingNonces provides a mock function with given fields: ctx, tss, chainID
func (_m *XmsgRelayerKeeper) GetPendingNonces(ctx types.Context, tss string, chainID int64) (relayertypes.PendingNonces, bool) {
	ret := _m.Called(ctx, tss, chainID)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingNonces")
	}

	var r0 relayertypes.PendingNonces
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, string, int64) (relayertypes.PendingNonces, bool)); ok {
		return rf(ctx, tss, chainID)
	}
	if rf, ok := ret.Get(0).(func(types.Context, string, int64) relayertypes.PendingNonces); ok {
		r0 = rf(ctx, tss, chainID)
	} else {
		r0 = ret.Get(0).(relayertypes.PendingNonces)
	}

	if rf, ok := ret.Get(1).(func(types.Context, string, int64) bool); ok {
		r1 = rf(ctx, tss, chainID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetSupportedChainFromChainID provides a mock function with given fields: ctx, chainID
func (_m *XmsgRelayerKeeper) GetSupportedChainFromChainID(ctx types.Context, chainID int64) *chains.Chain {
	ret := _m.Called(ctx, chainID)

	if len(ret) == 0 {
		panic("no return value specified for GetSupportedChainFromChainID")
	}

	var r0 *chains.Chain
	if rf, ok := ret.Get(0).(func(types.Context, int64) *chains.Chain); ok {
		r0 = rf(ctx, chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chains.Chain)
		}
	}

	return r0
}

// GetSupportedChains provides a mock function with given fields: ctx
func (_m *XmsgRelayerKeeper) GetSupportedChains(ctx types.Context) []*chains.Chain {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSupportedChains")
	}

	var r0 []*chains.Chain
	if rf, ok := ret.Get(0).(func(types.Context) []*chains.Chain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*chains.Chain)
		}
	}

	return r0
}

// GetSupportedForeignChains provides a mock function with given fields: ctx
func (_m *XmsgRelayerKeeper) GetSupportedForeignChains(ctx types.Context) []*chains.Chain {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSupportedForeignChains")
	}

	var r0 []*chains.Chain
	if rf, ok := ret.Get(0).(func(types.Context) []*chains.Chain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*chains.Chain)
		}
	}

	return r0
}

// GetTSS provides a mock function with given fields: ctx
func (_m *XmsgRelayerKeeper) GetTSS(ctx types.Context) (relayertypes.TSS, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTSS")
	}

	var r0 relayertypes.TSS
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context) (relayertypes.TSS, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) relayertypes.TSS); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(relayertypes.TSS)
	}

	if rf, ok := ret.Get(1).(func(types.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetTssAddress provides a mock function with given fields: goCtx, req
func (_m *XmsgRelayerKeeper) GetTssAddress(goCtx context.Context, req *relayertypes.QueryGetTssAddressRequest) (*relayertypes.QueryGetTssAddressResponse, error) {
	ret := _m.Called(goCtx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetTssAddress")
	}

	var r0 *relayertypes.QueryGetTssAddressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *relayertypes.QueryGetTssAddressRequest) (*relayertypes.QueryGetTssAddressResponse, error)); ok {
		return rf(goCtx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *relayertypes.QueryGetTssAddressRequest) *relayertypes.QueryGetTssAddressResponse); ok {
		r0 = rf(goCtx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*relayertypes.QueryGetTssAddressResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *relayertypes.QueryGetTssAddressRequest) error); ok {
		r1 = rf(goCtx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsInboundEnabled provides a mock function with given fields: ctx
func (_m *XmsgRelayerKeeper) IsInboundEnabled(ctx types.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsInboundEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsNonTombstonedObserver provides a mock function with given fields: ctx, address
func (_m *XmsgRelayerKeeper) IsNonTombstonedObserver(ctx types.Context, address string) bool {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for IsNonTombstonedObserver")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.Context, string) bool); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RemoveAllExistingMigrators provides a mock function with given fields: ctx
func (_m *XmsgRelayerKeeper) RemoveAllExistingMigrators(ctx types.Context) {
	_m.Called(ctx)
}

// RemoveFromPendingNonces provides a mock function with given fields: ctx, tss, chainID, nonce
func (_m *XmsgRelayerKeeper) RemoveFromPendingNonces(ctx types.Context, tss string, chainID int64, nonce int64) {
	_m.Called(ctx, tss, chainID, nonce)
}

// SetChainNonces provides a mock function with given fields: ctx, chainNonces
func (_m *XmsgRelayerKeeper) SetChainNonces(ctx types.Context, chainNonces relayertypes.ChainNonces) {
	_m.Called(ctx, chainNonces)
}

// SetChainParamsList provides a mock function with given fields: ctx, chainParams
func (_m *XmsgRelayerKeeper) SetChainParamsList(ctx types.Context, chainParams relayertypes.ChainParamsList) {
	_m.Called(ctx, chainParams)
}

// SetCrosschainFlags provides a mock function with given fields: ctx, crosschainFlags
func (_m *XmsgRelayerKeeper) SetCrosschainFlags(ctx types.Context, crosschainFlags relayertypes.CrosschainFlags) {
	_m.Called(ctx, crosschainFlags)
}

// SetFundMigrator provides a mock function with given fields: ctx, fm
func (_m *XmsgRelayerKeeper) SetFundMigrator(ctx types.Context, fm relayertypes.TssFundMigratorInfo) {
	_m.Called(ctx, fm)
}

// SetKeygen provides a mock function with given fields: ctx, keygen
func (_m *XmsgRelayerKeeper) SetKeygen(ctx types.Context, keygen relayertypes.Keygen) {
	_m.Called(ctx, keygen)
}

// SetLastObserverCount provides a mock function with given fields: ctx, lbc
func (_m *XmsgRelayerKeeper) SetLastObserverCount(ctx types.Context, lbc *relayertypes.LastRelayerCount) {
	_m.Called(ctx, lbc)
}

// SetNodeAccount provides a mock function with given fields: ctx, nodeAccount
func (_m *XmsgRelayerKeeper) SetNodeAccount(ctx types.Context, nodeAccount relayertypes.NodeAccount) {
	_m.Called(ctx, nodeAccount)
}

// SetNonceToXmsg provides a mock function with given fields: ctx, nonceToXmsg
func (_m *XmsgRelayerKeeper) SetNonceToXmsg(ctx types.Context, nonceToXmsg relayertypes.NonceToXmsg) {
	_m.Called(ctx, nonceToXmsg)
}

// SetPendingNonces provides a mock function with given fields: ctx, pendingNonces
func (_m *XmsgRelayerKeeper) SetPendingNonces(ctx types.Context, pendingNonces relayertypes.PendingNonces) {
	_m.Called(ctx, pendingNonces)
}

// SetTSS provides a mock function with given fields: ctx, tss
func (_m *XmsgRelayerKeeper) SetTSS(ctx types.Context, tss relayertypes.TSS) {
	_m.Called(ctx, tss)
}

// SetTSSHistory provides a mock function with given fields: ctx, tss
func (_m *XmsgRelayerKeeper) SetTSSHistory(ctx types.Context, tss relayertypes.TSS) {
	_m.Called(ctx, tss)
}

// SetTssAndUpdateNonce provides a mock function with given fields: ctx, tss
func (_m *XmsgRelayerKeeper) SetTssAndUpdateNonce(ctx types.Context, tss relayertypes.TSS) {
	_m.Called(ctx, tss)
}

// VoteOnAddGasTokenBallot provides a mock function with given fields: ctx, chainId, voter, voteIndex
func (_m *XmsgRelayerKeeper) VoteOnAddGasTokenBallot(ctx types.Context, chainId int64, voter string, voteIndex uint64) (bool, bool, error) {
	ret := _m.Called(ctx, chainId, voter, voteIndex)

	if len(ret) == 0 {
		panic("no return value specified for VoteOnAddGasTokenBallot")
	}

	var r0 bool
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(types.Context, int64, string, uint64) (bool, bool, error)); ok {
		return rf(ctx, chainId, voter, voteIndex)
	}
	if rf, ok := ret.Get(0).(func(types.Context, int64, string, uint64) bool); ok {
		r0 = rf(ctx, chainId, voter, voteIndex)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(types.Context, int64, string, uint64) bool); ok {
		r1 = rf(ctx, chainId, voter, voteIndex)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(types.Context, int64, string, uint64) error); ok {
		r2 = rf(ctx, chainId, voter, voteIndex)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// VoteOnAddPellTokenBallot provides a mock function with given fields: ctx, chainId, voter, voteIndex
func (_m *XmsgRelayerKeeper) VoteOnAddPellTokenBallot(ctx types.Context, chainId int64, voter string, voteIndex uint64) (bool, bool, error) {
	ret := _m.Called(ctx, chainId, voter, voteIndex)

	if len(ret) == 0 {
		panic("no return value specified for VoteOnAddPellTokenBallot")
	}

	var r0 bool
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(types.Context, int64, string, uint64) (bool, bool, error)); ok {
		return rf(ctx, chainId, voter, voteIndex)
	}
	if rf, ok := ret.Get(0).(func(types.Context, int64, string, uint64) bool); ok {
		r0 = rf(ctx, chainId, voter, voteIndex)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(types.Context, int64, string, uint64) bool); ok {
		r1 = rf(ctx, chainId, voter, voteIndex)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(types.Context, int64, string, uint64) error); ok {
		r2 = rf(ctx, chainId, voter, voteIndex)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// VoteOnInboundBallot provides a mock function with given fields: ctx, senderChainID, receiverChainID, coinType, voter, ballotIndex, inTxHash
func (_m *XmsgRelayerKeeper) VoteOnInboundBallot(ctx types.Context, senderChainID int64, receiverChainID int64, coinType coin.CoinType, voter string, ballotIndex string, inTxHash string) (bool, bool, error) {
	ret := _m.Called(ctx, senderChainID, receiverChainID, coinType, voter, ballotIndex, inTxHash)

	if len(ret) == 0 {
		panic("no return value specified for VoteOnInboundBallot")
	}

	var r0 bool
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(types.Context, int64, int64, coin.CoinType, string, string, string) (bool, bool, error)); ok {
		return rf(ctx, senderChainID, receiverChainID, coinType, voter, ballotIndex, inTxHash)
	}
	if rf, ok := ret.Get(0).(func(types.Context, int64, int64, coin.CoinType, string, string, string) bool); ok {
		r0 = rf(ctx, senderChainID, receiverChainID, coinType, voter, ballotIndex, inTxHash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(types.Context, int64, int64, coin.CoinType, string, string, string) bool); ok {
		r1 = rf(ctx, senderChainID, receiverChainID, coinType, voter, ballotIndex, inTxHash)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(types.Context, int64, int64, coin.CoinType, string, string, string) error); ok {
		r2 = rf(ctx, senderChainID, receiverChainID, coinType, voter, ballotIndex, inTxHash)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// VoteOnInboundBlockBallot provides a mock function with given fields: ctx, chainId, voter, ballotIndex, blockHash
func (_m *XmsgRelayerKeeper) VoteOnInboundBlockBallot(ctx types.Context, chainId int64, voter string, ballotIndex string, blockHash string) (bool, bool, error) {
	ret := _m.Called(ctx, chainId, voter, ballotIndex, blockHash)

	if len(ret) == 0 {
		panic("no return value specified for VoteOnInboundBlockBallot")
	}

	var r0 bool
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(types.Context, int64, string, string, string) (bool, bool, error)); ok {
		return rf(ctx, chainId, voter, ballotIndex, blockHash)
	}
	if rf, ok := ret.Get(0).(func(types.Context, int64, string, string, string) bool); ok {
		r0 = rf(ctx, chainId, voter, ballotIndex, blockHash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(types.Context, int64, string, string, string) bool); ok {
		r1 = rf(ctx, chainId, voter, ballotIndex, blockHash)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(types.Context, int64, string, string, string) error); ok {
		r2 = rf(ctx, chainId, voter, ballotIndex, blockHash)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// VoteOnOutboundBallot provides a mock function with given fields: ctx, ballotIndex, outTxChainID, receiveStatus, voter
func (_m *XmsgRelayerKeeper) VoteOnOutboundBallot(ctx types.Context, ballotIndex string, outTxChainID int64, receiveStatus chains.ReceiveStatus, voter string) (bool, bool, relayertypes.Ballot, string, error) {
	ret := _m.Called(ctx, ballotIndex, outTxChainID, receiveStatus, voter)

	if len(ret) == 0 {
		panic("no return value specified for VoteOnOutboundBallot")
	}

	var r0 bool
	var r1 bool
	var r2 relayertypes.Ballot
	var r3 string
	var r4 error
	if rf, ok := ret.Get(0).(func(types.Context, string, int64, chains.ReceiveStatus, string) (bool, bool, relayertypes.Ballot, string, error)); ok {
		return rf(ctx, ballotIndex, outTxChainID, receiveStatus, voter)
	}
	if rf, ok := ret.Get(0).(func(types.Context, string, int64, chains.ReceiveStatus, string) bool); ok {
		r0 = rf(ctx, ballotIndex, outTxChainID, receiveStatus, voter)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(types.Context, string, int64, chains.ReceiveStatus, string) bool); ok {
		r1 = rf(ctx, ballotIndex, outTxChainID, receiveStatus, voter)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(types.Context, string, int64, chains.ReceiveStatus, string) relayertypes.Ballot); ok {
		r2 = rf(ctx, ballotIndex, outTxChainID, receiveStatus, voter)
	} else {
		r2 = ret.Get(2).(relayertypes.Ballot)
	}

	if rf, ok := ret.Get(3).(func(types.Context, string, int64, chains.ReceiveStatus, string) string); ok {
		r3 = rf(ctx, ballotIndex, outTxChainID, receiveStatus, voter)
	} else {
		r3 = ret.Get(3).(string)
	}

	if rf, ok := ret.Get(4).(func(types.Context, string, int64, chains.ReceiveStatus, string) error); ok {
		r4 = rf(ctx, ballotIndex, outTxChainID, receiveStatus, voter)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// NewXmsgRelayerKeeper creates a new instance of XmsgRelayerKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewXmsgRelayerKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *XmsgRelayerKeeper {
	mock := &XmsgRelayerKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
