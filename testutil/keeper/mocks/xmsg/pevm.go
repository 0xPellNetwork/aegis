// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	evmtypes "github.com/evmos/ethermint/x/evm/types"

	mock "github.com/stretchr/testify/mock"

	pevmtypes "github.com/pell-chain/pellcore/x/pevm/types"

	types "github.com/cosmos/cosmos-sdk/types"

	xmsgtypes "github.com/pell-chain/pellcore/x/xmsg/types"
)

// XmsgPevmKeeper is an autogenerated mock type for the XmsgPevmKeeper type
type XmsgPevmKeeper struct {
	mock.Mock
}

// CallAddSupportedChainOnRegistryRouter provides a mock function with given fields: ctx, params
func (_m *XmsgPevmKeeper) CallAddSupportedChainOnRegistryRouter(ctx types.Context, params *xmsgtypes.RegisterChainDVSToPell) (*evmtypes.MsgEthereumTxResponse, bool, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CallAddSupportedChainOnRegistryRouter")
	}

	var r0 *evmtypes.MsgEthereumTxResponse
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(types.Context, *xmsgtypes.RegisterChainDVSToPell) (*evmtypes.MsgEthereumTxResponse, bool, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(types.Context, *xmsgtypes.RegisterChainDVSToPell) *evmtypes.MsgEthereumTxResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmtypes.MsgEthereumTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, *xmsgtypes.RegisterChainDVSToPell) bool); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(types.Context, *xmsgtypes.RegisterChainDVSToPell) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CallBridgePellOnPellGateway provides a mock function with given fields: ctx, destinationChainId, receiver, amount
func (_m *XmsgPevmKeeper) CallBridgePellOnPellGateway(ctx context.Context, destinationChainId int64, receiver common.Address, amount *big.Int) (*evmtypes.MsgEthereumTxResponse, bool, error) {
	ret := _m.Called(ctx, destinationChainId, receiver, amount)

	if len(ret) == 0 {
		panic("no return value specified for CallBridgePellOnPellGateway")
	}

	var r0 *evmtypes.MsgEthereumTxResponse
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, common.Address, *big.Int) (*evmtypes.MsgEthereumTxResponse, bool, error)); ok {
		return rf(ctx, destinationChainId, receiver, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, common.Address, *big.Int) *evmtypes.MsgEthereumTxResponse); ok {
		r0 = rf(ctx, destinationChainId, receiver, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmtypes.MsgEthereumTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, common.Address, *big.Int) bool); ok {
		r1 = rf(ctx, destinationChainId, receiver, amount)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, common.Address, *big.Int) error); ok {
		r2 = rf(ctx, destinationChainId, receiver, amount)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CallProcessPellSent provides a mock function with given fields: ctx, action, xmsgIndex
func (_m *XmsgPevmKeeper) CallProcessPellSent(ctx types.Context, action *xmsgtypes.PellSent, xmsgIndex string) (*evmtypes.MsgEthereumTxResponse, bool, error) {
	ret := _m.Called(ctx, action, xmsgIndex)

	if len(ret) == 0 {
		panic("no return value specified for CallProcessPellSent")
	}

	var r0 *evmtypes.MsgEthereumTxResponse
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(types.Context, *xmsgtypes.PellSent, string) (*evmtypes.MsgEthereumTxResponse, bool, error)); ok {
		return rf(ctx, action, xmsgIndex)
	}
	if rf, ok := ret.Get(0).(func(types.Context, *xmsgtypes.PellSent, string) *evmtypes.MsgEthereumTxResponse); ok {
		r0 = rf(ctx, action, xmsgIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmtypes.MsgEthereumTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, *xmsgtypes.PellSent, string) bool); ok {
		r1 = rf(ctx, action, xmsgIndex)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(types.Context, *xmsgtypes.PellSent, string) error); ok {
		r2 = rf(ctx, action, xmsgIndex)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CallSwapOnPellGasSwap provides a mock function with given fields: ctx, destinationChainId, amountIn, receiver
func (_m *XmsgPevmKeeper) CallSwapOnPellGasSwap(ctx context.Context, destinationChainId int64, amountIn *big.Int, receiver common.Address) (*evmtypes.MsgEthereumTxResponse, bool, error) {
	ret := _m.Called(ctx, destinationChainId, amountIn, receiver)

	if len(ret) == 0 {
		panic("no return value specified for CallSwapOnPellGasSwap")
	}

	var r0 *evmtypes.MsgEthereumTxResponse
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *big.Int, common.Address) (*evmtypes.MsgEthereumTxResponse, bool, error)); ok {
		return rf(ctx, destinationChainId, amountIn, receiver)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, *big.Int, common.Address) *evmtypes.MsgEthereumTxResponse); ok {
		r0 = rf(ctx, destinationChainId, amountIn, receiver)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmtypes.MsgEthereumTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, *big.Int, common.Address) bool); ok {
		r1 = rf(ctx, destinationChainId, amountIn, receiver)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, *big.Int, common.Address) error); ok {
		r2 = rf(ctx, destinationChainId, amountIn, receiver)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CallSyncDelegatedStateOnPellDelegationManager provides a mock function with given fields: ctx, from, senderChainID, staker, strategy
func (_m *XmsgPevmKeeper) CallSyncDelegatedStateOnPellDelegationManager(ctx context.Context, from []byte, senderChainID int64, staker common.Address, strategy common.Address) (*evmtypes.MsgEthereumTxResponse, bool, error) {
	ret := _m.Called(ctx, from, senderChainID, staker, strategy)

	if len(ret) == 0 {
		panic("no return value specified for CallSyncDelegatedStateOnPellDelegationManager")
	}

	var r0 *evmtypes.MsgEthereumTxResponse
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, int64, common.Address, common.Address) (*evmtypes.MsgEthereumTxResponse, bool, error)); ok {
		return rf(ctx, from, senderChainID, staker, strategy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, int64, common.Address, common.Address) *evmtypes.MsgEthereumTxResponse); ok {
		r0 = rf(ctx, from, senderChainID, staker, strategy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmtypes.MsgEthereumTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, int64, common.Address, common.Address) bool); ok {
		r1 = rf(ctx, from, senderChainID, staker, strategy)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, []byte, int64, common.Address, common.Address) error); ok {
		r2 = rf(ctx, from, senderChainID, staker, strategy)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CallSyncDepositStateOnPellStrategyManager provides a mock function with given fields: ctx, from, senderChainID, staker, strategy, shares
func (_m *XmsgPevmKeeper) CallSyncDepositStateOnPellStrategyManager(ctx context.Context, from []byte, senderChainID int64, staker common.Address, strategy common.Address, shares *big.Int) (*evmtypes.MsgEthereumTxResponse, bool, error) {
	ret := _m.Called(ctx, from, senderChainID, staker, strategy, shares)

	if len(ret) == 0 {
		panic("no return value specified for CallSyncDepositStateOnPellStrategyManager")
	}

	var r0 *evmtypes.MsgEthereumTxResponse
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, int64, common.Address, common.Address, *big.Int) (*evmtypes.MsgEthereumTxResponse, bool, error)); ok {
		return rf(ctx, from, senderChainID, staker, strategy, shares)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, int64, common.Address, common.Address, *big.Int) *evmtypes.MsgEthereumTxResponse); ok {
		r0 = rf(ctx, from, senderChainID, staker, strategy, shares)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmtypes.MsgEthereumTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, int64, common.Address, common.Address, *big.Int) bool); ok {
		r1 = rf(ctx, from, senderChainID, staker, strategy, shares)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, []byte, int64, common.Address, common.Address, *big.Int) error); ok {
		r2 = rf(ctx, from, senderChainID, staker, strategy, shares)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CallSyncUndelegateStateOnPellDelegationManager provides a mock function with given fields: ctx, senderChainID, staker
func (_m *XmsgPevmKeeper) CallSyncUndelegateStateOnPellDelegationManager(ctx context.Context, senderChainID int64, staker common.Address) (*evmtypes.MsgEthereumTxResponse, bool, error) {
	ret := _m.Called(ctx, senderChainID, staker)

	if len(ret) == 0 {
		panic("no return value specified for CallSyncUndelegateStateOnPellDelegationManager")
	}

	var r0 *evmtypes.MsgEthereumTxResponse
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, common.Address) (*evmtypes.MsgEthereumTxResponse, bool, error)); ok {
		return rf(ctx, senderChainID, staker)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, common.Address) *evmtypes.MsgEthereumTxResponse); ok {
		r0 = rf(ctx, senderChainID, staker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmtypes.MsgEthereumTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, common.Address) bool); ok {
		r1 = rf(ctx, senderChainID, staker)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, common.Address) error); ok {
		r2 = rf(ctx, senderChainID, staker)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CallSyncWithdrawalStateOnPellDelegationManager provides a mock function with given fields: ctx, senderChainID, staker, withdrawalParam
func (_m *XmsgPevmKeeper) CallSyncWithdrawalStateOnPellDelegationManager(ctx context.Context, senderChainID int64, staker common.Address, withdrawalParam *xmsgtypes.WithdrawalQueued) (*evmtypes.MsgEthereumTxResponse, bool, error) {
	ret := _m.Called(ctx, senderChainID, staker, withdrawalParam)

	if len(ret) == 0 {
		panic("no return value specified for CallSyncWithdrawalStateOnPellDelegationManager")
	}

	var r0 *evmtypes.MsgEthereumTxResponse
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, common.Address, *xmsgtypes.WithdrawalQueued) (*evmtypes.MsgEthereumTxResponse, bool, error)); ok {
		return rf(ctx, senderChainID, staker, withdrawalParam)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, common.Address, *xmsgtypes.WithdrawalQueued) *evmtypes.MsgEthereumTxResponse); ok {
		r0 = rf(ctx, senderChainID, staker, withdrawalParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmtypes.MsgEthereumTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, common.Address, *xmsgtypes.WithdrawalQueued) bool); ok {
		r1 = rf(ctx, senderChainID, staker, withdrawalParam)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, common.Address, *xmsgtypes.WithdrawalQueued) error); ok {
		r2 = rf(ctx, senderChainID, staker, withdrawalParam)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetGasSwapPEVMContractAddress provides a mock function with given fields: ctx
func (_m *XmsgPevmKeeper) GetGasSwapPEVMContractAddress(ctx types.Context) (common.Address, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGasSwapPEVMContractAddress")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context) (common.Address, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) common.Address); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPellConnectorContractAddress provides a mock function with given fields: ctx
func (_m *XmsgPevmKeeper) GetPellConnectorContractAddress(ctx types.Context) (common.Address, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPellConnectorContractAddress")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context) (common.Address, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) common.Address); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPellDelegationManagerProxyContractAddress provides a mock function with given fields: ctx
func (_m *XmsgPevmKeeper) GetPellDelegationManagerProxyContractAddress(ctx types.Context) (common.Address, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPellDelegationManagerProxyContractAddress")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context) (common.Address, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) common.Address); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPellGatewayEVMContractAddress provides a mock function with given fields: ctx
func (_m *XmsgPevmKeeper) GetPellGatewayEVMContractAddress(ctx types.Context) (common.Address, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPellGatewayEVMContractAddress")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context) (common.Address, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) common.Address); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPellStrategyManagerProxyContractAddress provides a mock function with given fields: ctx
func (_m *XmsgPevmKeeper) GetPellStrategyManagerProxyContractAddress(ctx types.Context) (common.Address, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPellStrategyManagerProxyContractAddress")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context) (common.Address, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) common.Address); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemContract provides a mock function with given fields: ctx
func (_m *XmsgPevmKeeper) GetSystemContract(ctx types.Context) (pevmtypes.SystemContract, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemContract")
	}

	var r0 pevmtypes.SystemContract
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context) (pevmtypes.SystemContract, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) pevmtypes.SystemContract); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(pevmtypes.SystemContract)
	}

	if rf, ok := ret.Get(1).(func(types.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// PELLRevertAndCallContract provides a mock function with given fields: ctx, sender, to, inboundSenderChainID, destinationChainID, indexBytes
func (_m *XmsgPevmKeeper) PELLRevertAndCallContract(ctx types.Context, sender common.Address, to common.Address, inboundSenderChainID int64, destinationChainID int64, indexBytes [32]byte) (*evmtypes.MsgEthereumTxResponse, error) {
	ret := _m.Called(ctx, sender, to, inboundSenderChainID, destinationChainID, indexBytes)

	if len(ret) == 0 {
		panic("no return value specified for PELLRevertAndCallContract")
	}

	var r0 *evmtypes.MsgEthereumTxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, common.Address, common.Address, int64, int64, [32]byte) (*evmtypes.MsgEthereumTxResponse, error)); ok {
		return rf(ctx, sender, to, inboundSenderChainID, destinationChainID, indexBytes)
	}
	if rf, ok := ret.Get(0).(func(types.Context, common.Address, common.Address, int64, int64, [32]byte) *evmtypes.MsgEthereumTxResponse); ok {
		r0 = rf(ctx, sender, to, inboundSenderChainID, destinationChainID, indexBytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmtypes.MsgEthereumTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, common.Address, common.Address, int64, int64, [32]byte) error); ok {
		r1 = rf(ctx, sender, to, inboundSenderChainID, destinationChainID, indexBytes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewXmsgPevmKeeper creates a new instance of XmsgPevmKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewXmsgPevmKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *XmsgPevmKeeper {
	mock := &XmsgPevmKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
