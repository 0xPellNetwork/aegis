// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	context "context"

	math "cosmossdk.io/math"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// XSecurityStakingHooks is an autogenerated mock type for the XSecurityStakingHooks type
type XSecurityStakingHooks struct {
	mock.Mock
}

// AfterDelegationModified provides a mock function with given fields: ctx, delAddr, valAddr
func (_m *XSecurityStakingHooks) AfterDelegationModified(ctx context.Context, delAddr types.AccAddress, valAddr types.ValAddress) error {
	ret := _m.Called(ctx, delAddr, valAddr)

	if len(ret) == 0 {
		panic("no return value specified for AfterDelegationModified")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress, types.ValAddress) error); ok {
		r0 = rf(ctx, delAddr, valAddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AfterValidatorBeginUnbonding provides a mock function with given fields: ctx, consAddr, valAddr
func (_m *XSecurityStakingHooks) AfterValidatorBeginUnbonding(ctx context.Context, consAddr types.ConsAddress, valAddr types.ValAddress) error {
	ret := _m.Called(ctx, consAddr, valAddr)

	if len(ret) == 0 {
		panic("no return value specified for AfterValidatorBeginUnbonding")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConsAddress, types.ValAddress) error); ok {
		r0 = rf(ctx, consAddr, valAddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AfterValidatorRemoved provides a mock function with given fields: ctx, consAddr, valAddr
func (_m *XSecurityStakingHooks) AfterValidatorRemoved(ctx context.Context, consAddr types.ConsAddress, valAddr types.ValAddress) error {
	ret := _m.Called(ctx, consAddr, valAddr)

	if len(ret) == 0 {
		panic("no return value specified for AfterValidatorRemoved")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConsAddress, types.ValAddress) error); ok {
		r0 = rf(ctx, consAddr, valAddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeforeValidatorSlashed provides a mock function with given fields: ctx, valAddr, fraction
func (_m *XSecurityStakingHooks) BeforeValidatorSlashed(ctx context.Context, valAddr types.ValAddress, fraction math.LegacyDec) error {
	ret := _m.Called(ctx, valAddr, fraction)

	if len(ret) == 0 {
		panic("no return value specified for BeforeValidatorSlashed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ValAddress, math.LegacyDec) error); ok {
		r0 = rf(ctx, valAddr, fraction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewXSecurityStakingHooks creates a new instance of XSecurityStakingHooks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewXSecurityStakingHooks(t interface {
	mock.TestingT
	Cleanup(func())
}) *XSecurityStakingHooks {
	mock := &XSecurityStakingHooks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
