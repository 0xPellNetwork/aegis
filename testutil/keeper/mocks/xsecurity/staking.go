// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/cosmos/cosmos-db"
	cosmos_sdktypes "github.com/cosmos/cosmos-sdk/types"

	math "cosmossdk.io/math"

	mock "github.com/stretchr/testify/mock"

	stakingtypes "github.com/cosmos/cosmos-sdk/x/staking/types"

	types "github.com/cometbft/cometbft/abci/types"
)

// XSecurityStakingKeeper is an autogenerated mock type for the XSecurityStakingKeeper type
type XSecurityStakingKeeper struct {
	mock.Mock
}

// BlockValidatorUpdates provides a mock function with given fields: ctx
func (_m *XSecurityStakingKeeper) BlockValidatorUpdates(ctx context.Context) ([]types.ValidatorUpdate, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BlockValidatorUpdates")
	}

	var r0 []types.ValidatorUpdate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]types.ValidatorUpdate, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []types.ValidatorUpdate); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ValidatorUpdate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBondedValidatorsByPower provides a mock function with given fields: ctx
func (_m *XSecurityStakingKeeper) GetBondedValidatorsByPower(ctx context.Context) ([]stakingtypes.Validator, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBondedValidatorsByPower")
	}

	var r0 []stakingtypes.Validator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]stakingtypes.Validator, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []stakingtypes.Validator); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]stakingtypes.Validator)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDelegation provides a mock function with given fields: ctx, delAddr, valAddr
func (_m *XSecurityStakingKeeper) GetDelegation(ctx context.Context, delAddr cosmos_sdktypes.AccAddress, valAddr cosmos_sdktypes.ValAddress) (stakingtypes.Delegation, error) {
	ret := _m.Called(ctx, delAddr, valAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetDelegation")
	}

	var r0 stakingtypes.Delegation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, cosmos_sdktypes.ValAddress) (stakingtypes.Delegation, error)); ok {
		return rf(ctx, delAddr, valAddr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, cosmos_sdktypes.ValAddress) stakingtypes.Delegation); ok {
		r0 = rf(ctx, delAddr, valAddr)
	} else {
		r0 = ret.Get(0).(stakingtypes.Delegation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.AccAddress, cosmos_sdktypes.ValAddress) error); ok {
		r1 = rf(ctx, delAddr, valAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParams provides a mock function with given fields: ctx
func (_m *XSecurityStakingKeeper) GetParams(ctx context.Context) (stakingtypes.Params, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetParams")
	}

	var r0 stakingtypes.Params
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (stakingtypes.Params, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) stakingtypes.Params); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(stakingtypes.Params)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValidator provides a mock function with given fields: ctx, addr
func (_m *XSecurityStakingKeeper) GetValidator(ctx context.Context, addr cosmos_sdktypes.ValAddress) (stakingtypes.Validator, error) {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetValidator")
	}

	var r0 stakingtypes.Validator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ValAddress) (stakingtypes.Validator, error)); ok {
		return rf(ctx, addr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ValAddress) stakingtypes.Validator); ok {
		r0 = rf(ctx, addr)
	} else {
		r0 = ret.Get(0).(stakingtypes.Validator)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.ValAddress) error); ok {
		r1 = rf(ctx, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LastValidatorsIterator provides a mock function with given fields: ctx
func (_m *XSecurityStakingKeeper) LastValidatorsIterator(ctx context.Context) (db.Iterator, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LastValidatorsIterator")
	}

	var r0 db.Iterator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (db.Iterator, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) db.Iterator); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Iterator)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PowerReduction provides a mock function with given fields: ctx
func (_m *XSecurityStakingKeeper) PowerReduction(ctx context.Context) math.Int {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PowerReduction")
	}

	var r0 math.Int
	if rf, ok := ret.Get(0).(func(context.Context) math.Int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(math.Int)
	}

	return r0
}

// SetValidator provides a mock function with given fields: ctx, validator
func (_m *XSecurityStakingKeeper) SetValidator(ctx context.Context, validator stakingtypes.Validator) error {
	ret := _m.Called(ctx, validator)

	if len(ret) == 0 {
		panic("no return value specified for SetValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, stakingtypes.Validator) error); ok {
		r0 = rf(ctx, validator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidatorsPowerStoreIterator provides a mock function with given fields: ctx
func (_m *XSecurityStakingKeeper) ValidatorsPowerStoreIterator(ctx context.Context) (db.Iterator, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorsPowerStoreIterator")
	}

	var r0 db.Iterator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (db.Iterator, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) db.Iterator); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Iterator)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewXSecurityStakingKeeper creates a new instance of XSecurityStakingKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewXSecurityStakingKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *XSecurityStakingKeeper {
	mock := &XSecurityStakingKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
