// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// RestakingPevmKeeper is an autogenerated mock type for the RestakingPevmKeeper type
type RestakingPevmKeeper struct {
	mock.Mock
}

// CallUpdateDestinationAddressOnGasSwapPEVM provides a mock function with given fields: ctx, chainId, destinationAddress
func (_m *RestakingPevmKeeper) CallUpdateDestinationAddressOnGasSwapPEVM(ctx context.Context, chainId int64, destinationAddress string) error {
	ret := _m.Called(ctx, chainId, destinationAddress)

	if len(ret) == 0 {
		panic("no return value specified for CallUpdateDestinationAddressOnGasSwapPEVM")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, chainId, destinationAddress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CallUpdateDestinationAddressOnPellGateway provides a mock function with given fields: ctx, chainId, destinationAddress
func (_m *RestakingPevmKeeper) CallUpdateDestinationAddressOnPellGateway(ctx context.Context, chainId int64, destinationAddress string) error {
	ret := _m.Called(ctx, chainId, destinationAddress)

	if len(ret) == 0 {
		panic("no return value specified for CallUpdateDestinationAddressOnPellGateway")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, chainId, destinationAddress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CallUpdateSourceAddressOnPellGateway provides a mock function with given fields: ctx, chainId, sourceAddress
func (_m *RestakingPevmKeeper) CallUpdateSourceAddressOnPellGateway(ctx context.Context, chainId int64, sourceAddress string) error {
	ret := _m.Called(ctx, chainId, sourceAddress)

	if len(ret) == 0 {
		panic("no return value specified for CallUpdateSourceAddressOnPellGateway")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, chainId, sourceAddress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPellDelegationManagerProxyContractAddress provides a mock function with given fields: ctx
func (_m *RestakingPevmKeeper) GetPellDelegationManagerProxyContractAddress(ctx types.Context) (common.Address, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPellDelegationManagerProxyContractAddress")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context) (common.Address, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) common.Address); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRestakingPevmKeeper creates a new instance of RestakingPevmKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRestakingPevmKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *RestakingPevmKeeper {
	mock := &RestakingPevmKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
