// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	chains "github.com/pell-chain/pellcore/pkg/chains"
	mock "github.com/stretchr/testify/mock"

	relayertypes "github.com/pell-chain/pellcore/x/relayer/types"

	types "github.com/cosmos/cosmos-sdk/types"
)

// RestakingRelayerKeeper is an autogenerated mock type for the RestakingRelayerKeeper type
type RestakingRelayerKeeper struct {
	mock.Mock
}

// GetChainParamsByChainID provides a mock function with given fields: ctx, chainID
func (_m *RestakingRelayerKeeper) GetChainParamsByChainID(ctx types.Context, chainID int64) (*relayertypes.ChainParams, bool) {
	ret := _m.Called(ctx, chainID)

	if len(ret) == 0 {
		panic("no return value specified for GetChainParamsByChainID")
	}

	var r0 *relayertypes.ChainParams
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, int64) (*relayertypes.ChainParams, bool)); ok {
		return rf(ctx, chainID)
	}
	if rf, ok := ret.Get(0).(func(types.Context, int64) *relayertypes.ChainParams); ok {
		r0 = rf(ctx, chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*relayertypes.ChainParams)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, int64) bool); ok {
		r1 = rf(ctx, chainID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetSupportedChainFromChainID provides a mock function with given fields: ctx, chainID
func (_m *RestakingRelayerKeeper) GetSupportedChainFromChainID(ctx types.Context, chainID int64) *chains.Chain {
	ret := _m.Called(ctx, chainID)

	if len(ret) == 0 {
		panic("no return value specified for GetSupportedChainFromChainID")
	}

	var r0 *chains.Chain
	if rf, ok := ret.Get(0).(func(types.Context, int64) *chains.Chain); ok {
		r0 = rf(ctx, chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chains.Chain)
		}
	}

	return r0
}

// GetSupportedChains provides a mock function with given fields: ctx
func (_m *RestakingRelayerKeeper) GetSupportedChains(ctx types.Context) []*chains.Chain {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSupportedChains")
	}

	var r0 []*chains.Chain
	if rf, ok := ret.Get(0).(func(types.Context) []*chains.Chain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*chains.Chain)
		}
	}

	return r0
}

// GetTSS provides a mock function with given fields: ctx
func (_m *RestakingRelayerKeeper) GetTSS(ctx types.Context) (relayertypes.TSS, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTSS")
	}

	var r0 relayertypes.TSS
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context) (relayertypes.TSS, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) relayertypes.TSS); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(relayertypes.TSS)
	}

	if rf, ok := ret.Get(1).(func(types.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// IsInboundEnabled provides a mock function with given fields: ctx
func (_m *RestakingRelayerKeeper) IsInboundEnabled(ctx types.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsInboundEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetPevmKeeper provides a mock function with given fields: pevmKeeper
func (_m *RestakingRelayerKeeper) SetPevmKeeper(pevmKeeper relayertypes.PevmKeeper) {
	_m.Called(pevmKeeper)
}

// NewRestakingRelayerKeeper creates a new instance of RestakingRelayerKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRestakingRelayerKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *RestakingRelayerKeeper {
	mock := &RestakingRelayerKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
