// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lightclient/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	proofs "github.com/pell-chain/pellcore/pkg/proofs"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// query all block header request
type QueryAllBlockHeaderRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlockHeaderRequest) Reset()         { *m = QueryAllBlockHeaderRequest{} }
func (m *QueryAllBlockHeaderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlockHeaderRequest) ProtoMessage()    {}
func (*QueryAllBlockHeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{0}
}
func (m *QueryAllBlockHeaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlockHeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlockHeaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlockHeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlockHeaderRequest.Merge(m, src)
}
func (m *QueryAllBlockHeaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlockHeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlockHeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlockHeaderRequest proto.InternalMessageInfo

func (m *QueryAllBlockHeaderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// response of query all block header
type QueryBlockHeaderAllResponse struct {
	BlockHeaders []proofs.BlockHeader `protobuf:"bytes,1,rep,name=block_headers,json=blockHeaders,proto3" json:"block_headers"`
	Pagination   *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBlockHeaderAllResponse) Reset()         { *m = QueryBlockHeaderAllResponse{} }
func (m *QueryBlockHeaderAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlockHeaderAllResponse) ProtoMessage()    {}
func (*QueryBlockHeaderAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{1}
}
func (m *QueryBlockHeaderAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockHeaderAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockHeaderAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockHeaderAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockHeaderAllResponse.Merge(m, src)
}
func (m *QueryBlockHeaderAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockHeaderAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockHeaderAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockHeaderAllResponse proto.InternalMessageInfo

func (m *QueryBlockHeaderAllResponse) GetBlockHeaders() []proofs.BlockHeader {
	if m != nil {
		return m.BlockHeaders
	}
	return nil
}

func (m *QueryBlockHeaderAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// query block header request
type QueryGetBlockHeaderRequest struct {
	BlockHash []byte `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *QueryGetBlockHeaderRequest) Reset()         { *m = QueryGetBlockHeaderRequest{} }
func (m *QueryGetBlockHeaderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlockHeaderRequest) ProtoMessage()    {}
func (*QueryGetBlockHeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{2}
}
func (m *QueryGetBlockHeaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlockHeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlockHeaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlockHeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlockHeaderRequest.Merge(m, src)
}
func (m *QueryGetBlockHeaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlockHeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlockHeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlockHeaderRequest proto.InternalMessageInfo

func (m *QueryGetBlockHeaderRequest) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

// response of query block header
type QueryBlockHeaderResponse struct {
	BlockHeader *proofs.BlockHeader `protobuf:"bytes,1,opt,name=block_header,json=blockHeader,proto3" json:"block_header,omitempty"`
}

func (m *QueryBlockHeaderResponse) Reset()         { *m = QueryBlockHeaderResponse{} }
func (m *QueryBlockHeaderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlockHeaderResponse) ProtoMessage()    {}
func (*QueryBlockHeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{3}
}
func (m *QueryBlockHeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockHeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockHeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockHeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockHeaderResponse.Merge(m, src)
}
func (m *QueryBlockHeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockHeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockHeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockHeaderResponse proto.InternalMessageInfo

func (m *QueryBlockHeaderResponse) GetBlockHeader() *proofs.BlockHeader {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

// query all chain state request
type QueryAllChainStateRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChainStateRequest) Reset()         { *m = QueryAllChainStateRequest{} }
func (m *QueryAllChainStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllChainStateRequest) ProtoMessage()    {}
func (*QueryAllChainStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{4}
}
func (m *QueryAllChainStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChainStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChainStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChainStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChainStateRequest.Merge(m, src)
}
func (m *QueryAllChainStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChainStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChainStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChainStateRequest proto.InternalMessageInfo

func (m *QueryAllChainStateRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// response of query all chain state
type QueryChainStateAllResponse struct {
	ChainState []ChainState        `protobuf:"bytes,1,rep,name=chain_state,json=chainState,proto3" json:"chain_state"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryChainStateAllResponse) Reset()         { *m = QueryChainStateAllResponse{} }
func (m *QueryChainStateAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainStateAllResponse) ProtoMessage()    {}
func (*QueryChainStateAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{5}
}
func (m *QueryChainStateAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainStateAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainStateAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainStateAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainStateAllResponse.Merge(m, src)
}
func (m *QueryChainStateAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainStateAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainStateAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainStateAllResponse proto.InternalMessageInfo

func (m *QueryChainStateAllResponse) GetChainState() []ChainState {
	if m != nil {
		return m.ChainState
	}
	return nil
}

func (m *QueryChainStateAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// request of query chain state
type QueryGetChainStateRequest struct {
	ChainId int64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryGetChainStateRequest) Reset()         { *m = QueryGetChainStateRequest{} }
func (m *QueryGetChainStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainStateRequest) ProtoMessage()    {}
func (*QueryGetChainStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{6}
}
func (m *QueryGetChainStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainStateRequest.Merge(m, src)
}
func (m *QueryGetChainStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainStateRequest proto.InternalMessageInfo

func (m *QueryGetChainStateRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// response of query chain state
type QueryChainStateResponse struct {
	ChainState *ChainState `protobuf:"bytes,1,opt,name=chain_state,json=chainState,proto3" json:"chain_state,omitempty"`
}

func (m *QueryChainStateResponse) Reset()         { *m = QueryChainStateResponse{} }
func (m *QueryChainStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainStateResponse) ProtoMessage()    {}
func (*QueryChainStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{7}
}
func (m *QueryChainStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainStateResponse.Merge(m, src)
}
func (m *QueryChainStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainStateResponse proto.InternalMessageInfo

func (m *QueryChainStateResponse) GetChainState() *ChainState {
	if m != nil {
		return m.ChainState
	}
	return nil
}

// request of query is valid prove
type QueryProveRequest struct {
	ChainId   int64         `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TxHash    string        `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Proof     *proofs.Proof `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
	BlockHash string        `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	TxIndex   int64         `protobuf:"varint,5,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
}

func (m *QueryProveRequest) Reset()         { *m = QueryProveRequest{} }
func (m *QueryProveRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProveRequest) ProtoMessage()    {}
func (*QueryProveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{8}
}
func (m *QueryProveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProveRequest.Merge(m, src)
}
func (m *QueryProveRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProveRequest proto.InternalMessageInfo

func (m *QueryProveRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryProveRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *QueryProveRequest) GetProof() *proofs.Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *QueryProveRequest) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *QueryProveRequest) GetTxIndex() int64 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

// response of is valid prove
type QueryProveResponse struct {
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (m *QueryProveResponse) Reset()         { *m = QueryProveResponse{} }
func (m *QueryProveResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProveResponse) ProtoMessage()    {}
func (*QueryProveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{9}
}
func (m *QueryProveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProveResponse.Merge(m, src)
}
func (m *QueryProveResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProveResponse proto.InternalMessageInfo

func (m *QueryProveResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

// request of query verification flags
type QueryVerificationFlagsRequest struct {
}

func (m *QueryVerificationFlagsRequest) Reset()         { *m = QueryVerificationFlagsRequest{} }
func (m *QueryVerificationFlagsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerificationFlagsRequest) ProtoMessage()    {}
func (*QueryVerificationFlagsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{10}
}
func (m *QueryVerificationFlagsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationFlagsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationFlagsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationFlagsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationFlagsRequest.Merge(m, src)
}
func (m *QueryVerificationFlagsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationFlagsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationFlagsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationFlagsRequest proto.InternalMessageInfo

// response of query verification flags
type QueryVerificationFlagsResponse struct {
	VerificationFlags VerificationFlags `protobuf:"bytes,1,opt,name=verification_flags,json=verificationFlags,proto3" json:"verification_flags"`
}

func (m *QueryVerificationFlagsResponse) Reset()         { *m = QueryVerificationFlagsResponse{} }
func (m *QueryVerificationFlagsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerificationFlagsResponse) ProtoMessage()    {}
func (*QueryVerificationFlagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{11}
}
func (m *QueryVerificationFlagsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationFlagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationFlagsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationFlagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationFlagsResponse.Merge(m, src)
}
func (m *QueryVerificationFlagsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationFlagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationFlagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationFlagsResponse proto.InternalMessageInfo

func (m *QueryVerificationFlagsResponse) GetVerificationFlags() VerificationFlags {
	if m != nil {
		return m.VerificationFlags
	}
	return VerificationFlags{}
}

func init() {
	proto.RegisterType((*QueryAllBlockHeaderRequest)(nil), "lightclient.QueryAllBlockHeaderRequest")
	proto.RegisterType((*QueryBlockHeaderAllResponse)(nil), "lightclient.QueryBlockHeaderAllResponse")
	proto.RegisterType((*QueryGetBlockHeaderRequest)(nil), "lightclient.QueryGetBlockHeaderRequest")
	proto.RegisterType((*QueryBlockHeaderResponse)(nil), "lightclient.QueryBlockHeaderResponse")
	proto.RegisterType((*QueryAllChainStateRequest)(nil), "lightclient.QueryAllChainStateRequest")
	proto.RegisterType((*QueryChainStateAllResponse)(nil), "lightclient.QueryChainStateAllResponse")
	proto.RegisterType((*QueryGetChainStateRequest)(nil), "lightclient.QueryGetChainStateRequest")
	proto.RegisterType((*QueryChainStateResponse)(nil), "lightclient.QueryChainStateResponse")
	proto.RegisterType((*QueryProveRequest)(nil), "lightclient.QueryProveRequest")
	proto.RegisterType((*QueryProveResponse)(nil), "lightclient.QueryProveResponse")
	proto.RegisterType((*QueryVerificationFlagsRequest)(nil), "lightclient.QueryVerificationFlagsRequest")
	proto.RegisterType((*QueryVerificationFlagsResponse)(nil), "lightclient.QueryVerificationFlagsResponse")
}

func init() { proto.RegisterFile("lightclient/query.proto", fileDescriptor_03e46747c4ffba77) }

var fileDescriptor_03e46747c4ffba77 = []byte{
	// 833 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x4d, 0x4f, 0xdb, 0x48,
	0x18, 0xc7, 0x63, 0x20, 0xbc, 0x4c, 0x60, 0xa5, 0x8c, 0x90, 0x12, 0xbc, 0x1b, 0x07, 0x79, 0x09,
	0x41, 0x61, 0xb1, 0x97, 0xec, 0x0a, 0xad, 0x58, 0x69, 0x25, 0xb2, 0x12, 0x2c, 0xd2, 0x1e, 0xa8,
	0x91, 0x38, 0xf4, 0x12, 0x39, 0xce, 0xe0, 0x58, 0x18, 0x8f, 0x89, 0x27, 0x51, 0x10, 0xe2, 0xd2,
	0x7b, 0xa5, 0xaa, 0x3d, 0xf5, 0xd6, 0x4b, 0x2f, 0xfd, 0x24, 0x1c, 0x91, 0x7a, 0xe9, 0xa9, 0xaa,
	0xa0, 0x5f, 0xa0, 0xdf, 0xa0, 0x9a, 0xf1, 0x90, 0x8c, 0x63, 0x9b, 0xe6, 0xc0, 0x29, 0xb6, 0x9f,
	0x99, 0xe7, 0xf9, 0xfd, 0x9f, 0x37, 0x05, 0x14, 0x5c, 0xc7, 0xee, 0x10, 0xcb, 0x75, 0x90, 0x47,
	0xf4, 0x8b, 0x1e, 0xea, 0x5e, 0x6a, 0x7e, 0x17, 0x13, 0x0c, 0x73, 0x82, 0x41, 0xae, 0x59, 0x38,
	0x38, 0xc7, 0x81, 0xde, 0x32, 0x03, 0x14, 0x9e, 0xd2, 0xfb, 0xdb, 0x2d, 0x44, 0xcc, 0x6d, 0xdd,
	0x37, 0x6d, 0xc7, 0x33, 0x89, 0x83, 0xbd, 0xf0, 0xa2, 0xbc, 0x6c, 0x63, 0x1b, 0xb3, 0x47, 0x9d,
	0x3e, 0xf1, 0xaf, 0xbf, 0xd8, 0x18, 0xdb, 0x2e, 0xd2, 0x4d, 0xdf, 0xd1, 0x4d, 0xcf, 0xc3, 0x84,
	0x5d, 0x09, 0xb8, 0xb5, 0x24, 0x52, 0x58, 0x1d, 0xd3, 0xf1, 0x9a, 0x01, 0x31, 0x09, 0xe2, 0xe6,
	0x35, 0xd1, 0xdc, 0x47, 0x5d, 0xe7, 0xd4, 0xb1, 0xd8, 0xfd, 0xe6, 0xa9, 0x6b, 0xda, 0x0f, 0x4e,
	0x0a, 0xfe, 0x99, 0xad, 0xfb, 0x5d, 0x8c, 0x4f, 0x03, 0xfe, 0x13, 0x1a, 0xd4, 0x36, 0x90, 0x9f,
	0x51, 0xe6, 0x3d, 0xd7, 0x6d, 0xb8, 0xd8, 0x3a, 0xfb, 0x0f, 0x99, 0x6d, 0xd4, 0x35, 0xd0, 0x45,
	0x0f, 0x05, 0x04, 0xee, 0x03, 0x30, 0xd2, 0x50, 0x94, 0x56, 0xa5, 0x8d, 0x5c, 0x7d, 0x5d, 0x0b,
	0x05, 0x6b, 0x54, 0xb0, 0x16, 0xa6, 0x85, 0x0b, 0xd6, 0x8e, 0x4c, 0x1b, 0xf1, 0xbb, 0x86, 0x70,
	0x53, 0xfd, 0x20, 0x81, 0x9f, 0x59, 0x18, 0x21, 0xc6, 0x9e, 0xeb, 0x1a, 0x28, 0xf0, 0xb1, 0x17,
	0x20, 0xd8, 0x00, 0x4b, 0x2d, 0x6a, 0x69, 0x76, 0x98, 0x29, 0x28, 0x4a, 0xab, 0xd3, 0x1b, 0xb9,
	0x7a, 0x41, 0xf3, 0xcf, 0x6c, 0x8d, 0xf3, 0x0a, 0x57, 0x1b, 0x33, 0x37, 0x9f, 0xcb, 0x19, 0x63,
	0xb1, 0x35, 0xfa, 0x14, 0xc0, 0x83, 0x08, 0xeb, 0x14, 0x63, 0xad, 0xfe, 0x90, 0x35, 0x04, 0x88,
	0xc0, 0xfe, 0xcd, 0x53, 0x72, 0x80, 0x48, 0x42, 0x4a, 0x4a, 0x00, 0x70, 0x54, 0x33, 0xe8, 0xb0,
	0x94, 0x2c, 0x1a, 0x0b, 0x21, 0x88, 0x19, 0x74, 0xd4, 0x13, 0x50, 0x1c, 0x17, 0x3a, 0x54, 0xb9,
	0x0b, 0x16, 0x45, 0x95, 0x3c, 0x9f, 0x69, 0x22, 0x8d, 0x9c, 0x20, 0x4f, 0xb5, 0xc0, 0xca, 0x43,
	0x9d, 0xfe, 0xa5, 0x3d, 0x70, 0x4c, 0x5b, 0xe0, 0xa9, 0xcb, 0xf4, 0x5e, 0xe2, 0xd2, 0x47, 0x21,
	0xc4, 0x2a, 0xfd, 0x03, 0x72, 0x42, 0xff, 0x0d, 0x6b, 0x24, 0x34, 0xa0, 0x36, 0xba, 0xc8, 0x6b,
	0x04, 0xac, 0xe1, 0x97, 0xa7, 0xab, 0xd0, 0x0e, 0x4f, 0xc6, 0x01, 0x22, 0xf1, 0x64, 0xac, 0x80,
	0xf9, 0x90, 0xd2, 0x69, 0xb3, 0x54, 0x4c, 0x1b, 0x73, 0xec, 0xfd, 0xb0, 0xad, 0x1e, 0x83, 0xc2,
	0x98, 0xbc, 0xa1, 0xb6, 0xbf, 0xc6, 0xb5, 0x49, 0x8f, 0x68, 0x13, 0x55, 0xd1, 0xde, 0xce, 0x33,
	0xaf, 0x47, 0x5d, 0xdc, 0x9f, 0x80, 0x02, 0x16, 0xc0, 0x1c, 0x19, 0x84, 0xed, 0x43, 0x73, 0xb0,
	0x60, 0xcc, 0x92, 0x01, 0xed, 0x1d, 0x58, 0x05, 0x59, 0xd6, 0x06, 0xc5, 0x69, 0x16, 0x3d, 0x2f,
	0x36, 0xc6, 0x11, 0xfd, 0x31, 0x42, 0xfb, 0x58, 0x0f, 0xce, 0x30, 0x27, 0xa3, 0x1e, 0xa4, 0xb1,
	0xc9, 0xa0, 0xe9, 0x78, 0x6d, 0x34, 0x28, 0x66, 0xc3, 0xd8, 0x64, 0x70, 0x48, 0x5f, 0xd5, 0x1a,
	0x80, 0x22, 0x2b, 0x17, 0xbf, 0x0c, 0xb2, 0x7d, 0xd3, 0xe5, 0xa4, 0xf3, 0x46, 0xf8, 0xa2, 0x96,
	0x41, 0x89, 0x9d, 0x3d, 0x11, 0x96, 0xca, 0x3e, 0xdd, 0x29, 0x5c, 0xa3, 0xda, 0x03, 0x4a, 0xda,
	0x01, 0xee, 0xf8, 0x18, 0xc0, 0xf8, 0x4a, 0xe2, 0xc9, 0x55, 0x22, 0xc9, 0x8d, 0xf9, 0xe0, 0xfd,
	0x93, 0xef, 0x8f, 0x1b, 0xea, 0xdf, 0x66, 0x41, 0x96, 0xc5, 0x85, 0xaf, 0x25, 0xf0, 0x53, 0x74,
	0xa3, 0xc0, 0x6a, 0xc4, 0x6b, 0xfa, 0x6a, 0x93, 0x37, 0xe2, 0x07, 0x93, 0x97, 0x93, 0xba, 0xf5,
	0xe2, 0xe3, 0xd7, 0x37, 0x53, 0x55, 0x58, 0xd1, 0x7d, 0xe4, 0xba, 0x5b, 0xac, 0x8c, 0xba, 0xb8,
	0x75, 0x23, 0xab, 0x0b, 0xbe, 0x95, 0x40, 0x4e, 0xf0, 0x94, 0x44, 0x94, 0xb8, 0x59, 0xe4, 0xca,
	0xa3, 0x44, 0x43, 0x9c, 0x5d, 0x86, 0xf3, 0x27, 0xac, 0x4f, 0x84, 0xa3, 0x5f, 0x8d, 0x3a, 0xe5,
	0x1a, 0xbe, 0x94, 0xc0, 0x52, 0x64, 0xb6, 0xe1, 0x7a, 0x62, 0xbe, 0x62, 0x53, 0x25, 0x27, 0xa8,
	0x48, 0x5c, 0x12, 0xea, 0x26, 0xc3, 0xab, 0xc0, 0x5f, 0xd3, 0xf0, 0x84, 0x31, 0xa3, 0x05, 0x04,
	0x23, 0x37, 0x49, 0x30, 0x49, 0x23, 0x2e, 0xaf, 0x3d, 0x06, 0x33, 0x24, 0xd9, 0x61, 0x24, 0xbf,
	0x43, 0x6d, 0x02, 0x12, 0xfd, 0xea, 0x61, 0x5a, 0xaf, 0x21, 0x06, 0x59, 0x36, 0x1e, 0x50, 0x89,
	0x87, 0x11, 0x67, 0x5c, 0x2e, 0xa7, 0xda, 0x39, 0x41, 0x85, 0x11, 0x94, 0x61, 0x29, 0x8d, 0xc0,
	0x67, 0x71, 0xde, 0x49, 0x20, 0x1f, 0xeb, 0x7f, 0x58, 0x8b, 0x7b, 0x4f, 0x9b, 0x44, 0x79, 0x73,
	0xa2, 0xb3, 0x9c, 0xaa, 0xce, 0xa8, 0x7e, 0x83, 0xb5, 0x34, 0xaa, 0xf8, 0xc8, 0x36, 0xfe, 0xbf,
	0xb9, 0x53, 0xa4, 0xdb, 0x3b, 0x45, 0xfa, 0x72, 0xa7, 0x48, 0xaf, 0xee, 0x95, 0xcc, 0xed, 0xbd,
	0x92, 0xf9, 0x74, 0xaf, 0x64, 0x9e, 0xd7, 0x6d, 0x87, 0x74, 0x7a, 0x2d, 0xcd, 0xc2, 0xe7, 0xa2,
	0x3f, 0xfa, 0x68, 0xe1, 0x2e, 0xd2, 0x07, 0x11, 0xd7, 0xe4, 0xd2, 0x47, 0x41, 0x6b, 0x96, 0xfd,
	0xf7, 0xf8, 0xe3, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xf9, 0x40, 0x9c, 0x61, 0x09, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// query all block header
	BlockHeaderAll(ctx context.Context, in *QueryAllBlockHeaderRequest, opts ...grpc.CallOption) (*QueryBlockHeaderAllResponse, error)
	// query block heder by given block hash
	BlockHeader(ctx context.Context, in *QueryGetBlockHeaderRequest, opts ...grpc.CallOption) (*QueryBlockHeaderResponse, error)
	// query all chain state
	ChainStateAll(ctx context.Context, in *QueryAllChainStateRequest, opts ...grpc.CallOption) (*QueryChainStateAllResponse, error)
	// query chain state by given chain id
	ChainState(ctx context.Context, in *QueryGetChainStateRequest, opts ...grpc.CallOption) (*QueryChainStateResponse, error)
	// query valid prove
	Prove(ctx context.Context, in *QueryProveRequest, opts ...grpc.CallOption) (*QueryProveResponse, error)
	// query verification flags
	VerificationFlags(ctx context.Context, in *QueryVerificationFlagsRequest, opts ...grpc.CallOption) (*QueryVerificationFlagsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) BlockHeaderAll(ctx context.Context, in *QueryAllBlockHeaderRequest, opts ...grpc.CallOption) (*QueryBlockHeaderAllResponse, error) {
	out := new(QueryBlockHeaderAllResponse)
	err := c.cc.Invoke(ctx, "/lightclient.Query/BlockHeaderAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlockHeader(ctx context.Context, in *QueryGetBlockHeaderRequest, opts ...grpc.CallOption) (*QueryBlockHeaderResponse, error) {
	out := new(QueryBlockHeaderResponse)
	err := c.cc.Invoke(ctx, "/lightclient.Query/BlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainStateAll(ctx context.Context, in *QueryAllChainStateRequest, opts ...grpc.CallOption) (*QueryChainStateAllResponse, error) {
	out := new(QueryChainStateAllResponse)
	err := c.cc.Invoke(ctx, "/lightclient.Query/ChainStateAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainState(ctx context.Context, in *QueryGetChainStateRequest, opts ...grpc.CallOption) (*QueryChainStateResponse, error) {
	out := new(QueryChainStateResponse)
	err := c.cc.Invoke(ctx, "/lightclient.Query/ChainState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Prove(ctx context.Context, in *QueryProveRequest, opts ...grpc.CallOption) (*QueryProveResponse, error) {
	out := new(QueryProveResponse)
	err := c.cc.Invoke(ctx, "/lightclient.Query/Prove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerificationFlags(ctx context.Context, in *QueryVerificationFlagsRequest, opts ...grpc.CallOption) (*QueryVerificationFlagsResponse, error) {
	out := new(QueryVerificationFlagsResponse)
	err := c.cc.Invoke(ctx, "/lightclient.Query/VerificationFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// query all block header
	BlockHeaderAll(context.Context, *QueryAllBlockHeaderRequest) (*QueryBlockHeaderAllResponse, error)
	// query block heder by given block hash
	BlockHeader(context.Context, *QueryGetBlockHeaderRequest) (*QueryBlockHeaderResponse, error)
	// query all chain state
	ChainStateAll(context.Context, *QueryAllChainStateRequest) (*QueryChainStateAllResponse, error)
	// query chain state by given chain id
	ChainState(context.Context, *QueryGetChainStateRequest) (*QueryChainStateResponse, error)
	// query valid prove
	Prove(context.Context, *QueryProveRequest) (*QueryProveResponse, error)
	// query verification flags
	VerificationFlags(context.Context, *QueryVerificationFlagsRequest) (*QueryVerificationFlagsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) BlockHeaderAll(ctx context.Context, req *QueryAllBlockHeaderRequest) (*QueryBlockHeaderAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockHeaderAll not implemented")
}
func (*UnimplementedQueryServer) BlockHeader(ctx context.Context, req *QueryGetBlockHeaderRequest) (*QueryBlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockHeader not implemented")
}
func (*UnimplementedQueryServer) ChainStateAll(ctx context.Context, req *QueryAllChainStateRequest) (*QueryChainStateAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainStateAll not implemented")
}
func (*UnimplementedQueryServer) ChainState(ctx context.Context, req *QueryGetChainStateRequest) (*QueryChainStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainState not implemented")
}
func (*UnimplementedQueryServer) Prove(ctx context.Context, req *QueryProveRequest) (*QueryProveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prove not implemented")
}
func (*UnimplementedQueryServer) VerificationFlags(ctx context.Context, req *QueryVerificationFlagsRequest) (*QueryVerificationFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificationFlags not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_BlockHeaderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBlockHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlockHeaderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightclient.Query/BlockHeaderAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlockHeaderAll(ctx, req.(*QueryAllBlockHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBlockHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightclient.Query/BlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlockHeader(ctx, req.(*QueryGetBlockHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainStateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllChainStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainStateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightclient.Query/ChainStateAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainStateAll(ctx, req.(*QueryAllChainStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChainStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightclient.Query/ChainState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainState(ctx, req.(*QueryGetChainStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Prove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Prove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightclient.Query/Prove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Prove(ctx, req.(*QueryProveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerificationFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerificationFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerificationFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightclient.Query/VerificationFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerificationFlags(ctx, req.(*QueryVerificationFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lightclient.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BlockHeaderAll",
			Handler:    _Query_BlockHeaderAll_Handler,
		},
		{
			MethodName: "BlockHeader",
			Handler:    _Query_BlockHeader_Handler,
		},
		{
			MethodName: "ChainStateAll",
			Handler:    _Query_ChainStateAll_Handler,
		},
		{
			MethodName: "ChainState",
			Handler:    _Query_ChainState_Handler,
		},
		{
			MethodName: "Prove",
			Handler:    _Query_Prove_Handler,
		},
		{
			MethodName: "VerificationFlags",
			Handler:    _Query_VerificationFlags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lightclient/query.proto",
}

func (m *QueryAllBlockHeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlockHeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlockHeaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockHeaderAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockHeaderAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockHeaderAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockHeaders) > 0 {
		for iNdEx := len(m.BlockHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlockHeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlockHeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlockHeaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockHeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockHeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockHeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeader != nil {
		{
			size, err := m.BlockHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllChainStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChainStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChainStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainStateAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainStateAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainStateAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainState) > 0 {
		for iNdEx := len(m.ChainState) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainState[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainState != nil {
		{
			size, err := m.ChainState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TxIndex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryProveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerificationFlagsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationFlagsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationFlagsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryVerificationFlagsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationFlagsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationFlagsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VerificationFlags.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAllBlockHeaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlockHeaderAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockHeaders) > 0 {
		for _, e := range m.BlockHeaders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBlockHeaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlockHeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeader != nil {
		l = m.BlockHeader.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllChainStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChainStateAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainState) > 0 {
		for _, e := range m.ChainState {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChainStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryChainStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainState != nil {
		l = m.ChainState.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TxIndex != 0 {
		n += 1 + sovQuery(uint64(m.TxIndex))
	}
	return n
}

func (m *QueryProveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	return n
}

func (m *QueryVerificationFlagsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryVerificationFlagsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VerificationFlags.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAllBlockHeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlockHeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlockHeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockHeaderAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockHeaderAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockHeaderAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHeaders = append(m.BlockHeaders, proofs.BlockHeader{})
			if err := m.BlockHeaders[len(m.BlockHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlockHeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlockHeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlockHeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockHeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockHeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockHeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockHeader == nil {
				m.BlockHeader = &proofs.BlockHeader{}
			}
			if err := m.BlockHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChainStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChainStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChainStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainStateAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainStateAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainStateAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainState = append(m.ChainState, ChainState{})
			if err := m.ChainState[len(m.ChainState)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainState == nil {
				m.ChainState = &ChainState{}
			}
			if err := m.ChainState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &proofs.Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIndex", wireType)
			}
			m.TxIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationFlagsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerificationFlagsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerificationFlagsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationFlagsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerificationFlagsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerificationFlagsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationFlags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VerificationFlags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
