// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xmsg/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	chains "github.com/pell-chain/pellcore/pkg/chains"
	coin "github.com/pell-chain/pellcore/pkg/coin"
	proofs "github.com/pell-chain/pellcore/pkg/proofs"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TODO: remove it.
// MsgInboundTxMaintenance is the message for admin maintenance
type MsgInboundTxMaintenance struct {
	Signer          string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	ChainId         int64  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	FromBlockHeight uint64 `protobuf:"varint,3,opt,name=from_block_height,json=fromBlockHeight,proto3" json:"from_block_height,omitempty"`
	ToBlockHeight   uint64 `protobuf:"varint,4,opt,name=to_block_height,json=toBlockHeight,proto3" json:"to_block_height,omitempty"`
}

func (m *MsgInboundTxMaintenance) Reset()         { *m = MsgInboundTxMaintenance{} }
func (m *MsgInboundTxMaintenance) String() string { return proto.CompactTextString(m) }
func (*MsgInboundTxMaintenance) ProtoMessage()    {}
func (*MsgInboundTxMaintenance) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{0}
}
func (m *MsgInboundTxMaintenance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInboundTxMaintenance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInboundTxMaintenance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInboundTxMaintenance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInboundTxMaintenance.Merge(m, src)
}
func (m *MsgInboundTxMaintenance) XXX_Size() int {
	return m.Size()
}
func (m *MsgInboundTxMaintenance) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInboundTxMaintenance.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInboundTxMaintenance proto.InternalMessageInfo

func (m *MsgInboundTxMaintenance) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgInboundTxMaintenance) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgInboundTxMaintenance) GetFromBlockHeight() uint64 {
	if m != nil {
		return m.FromBlockHeight
	}
	return 0
}

func (m *MsgInboundTxMaintenance) GetToBlockHeight() uint64 {
	if m != nil {
		return m.ToBlockHeight
	}
	return 0
}

// TODO: remove it.
// MsgInboundTxMaintenanceResponse is the response for MsgInboundTxMaintenance
type MsgInboundTxMaintenanceResponse struct {
}

func (m *MsgInboundTxMaintenanceResponse) Reset()         { *m = MsgInboundTxMaintenanceResponse{} }
func (m *MsgInboundTxMaintenanceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInboundTxMaintenanceResponse) ProtoMessage()    {}
func (*MsgInboundTxMaintenanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{1}
}
func (m *MsgInboundTxMaintenanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInboundTxMaintenanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInboundTxMaintenanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInboundTxMaintenanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInboundTxMaintenanceResponse.Merge(m, src)
}
func (m *MsgInboundTxMaintenanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInboundTxMaintenanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInboundTxMaintenanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInboundTxMaintenanceResponse proto.InternalMessageInfo

// migrate tss fund. admin only
type MsgMigrateTssFunds struct {
	Signer  string                 `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	ChainId int64                  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Amount  cosmossdk_io_math.Uint `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Uint" json:"amount"`
}

func (m *MsgMigrateTssFunds) Reset()         { *m = MsgMigrateTssFunds{} }
func (m *MsgMigrateTssFunds) String() string { return proto.CompactTextString(m) }
func (*MsgMigrateTssFunds) ProtoMessage()    {}
func (*MsgMigrateTssFunds) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{2}
}
func (m *MsgMigrateTssFunds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMigrateTssFunds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMigrateTssFunds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMigrateTssFunds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMigrateTssFunds.Merge(m, src)
}
func (m *MsgMigrateTssFunds) XXX_Size() int {
	return m.Size()
}
func (m *MsgMigrateTssFunds) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMigrateTssFunds.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMigrateTssFunds proto.InternalMessageInfo

func (m *MsgMigrateTssFunds) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgMigrateTssFunds) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// MsgMigrateTssFundsResponse response for migrating tss funds
type MsgMigrateTssFundsResponse struct {
}

func (m *MsgMigrateTssFundsResponse) Reset()         { *m = MsgMigrateTssFundsResponse{} }
func (m *MsgMigrateTssFundsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMigrateTssFundsResponse) ProtoMessage()    {}
func (*MsgMigrateTssFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{3}
}
func (m *MsgMigrateTssFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMigrateTssFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMigrateTssFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMigrateTssFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMigrateTssFundsResponse.Merge(m, src)
}
func (m *MsgMigrateTssFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMigrateTssFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMigrateTssFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMigrateTssFundsResponse proto.InternalMessageInfo

// MsgUpdateTssAddress update the tss address
type MsgUpdateTssAddress struct {
	Signer    string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	TssPubkey string `protobuf:"bytes,2,opt,name=tss_pubkey,json=tssPubkey,proto3" json:"tss_pubkey,omitempty"`
}

func (m *MsgUpdateTssAddress) Reset()         { *m = MsgUpdateTssAddress{} }
func (m *MsgUpdateTssAddress) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTssAddress) ProtoMessage()    {}
func (*MsgUpdateTssAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{4}
}
func (m *MsgUpdateTssAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTssAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTssAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTssAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTssAddress.Merge(m, src)
}
func (m *MsgUpdateTssAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTssAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTssAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTssAddress proto.InternalMessageInfo

func (m *MsgUpdateTssAddress) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateTssAddress) GetTssPubkey() string {
	if m != nil {
		return m.TssPubkey
	}
	return ""
}

// MsgUpdateTssAddressResponse response for updating the tss address
type MsgUpdateTssAddressResponse struct {
}

func (m *MsgUpdateTssAddressResponse) Reset()         { *m = MsgUpdateTssAddressResponse{} }
func (m *MsgUpdateTssAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTssAddressResponse) ProtoMessage()    {}
func (*MsgUpdateTssAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{5}
}
func (m *MsgUpdateTssAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTssAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTssAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTssAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTssAddressResponse.Merge(m, src)
}
func (m *MsgUpdateTssAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTssAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTssAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTssAddressResponse proto.InternalMessageInfo

// MsgAddToInTxTracker add to inbound tx tracker
type MsgAddToInTxTracker struct {
	Signer    string        `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	ChainId   int64         `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TxHash    string        `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	CoinType  coin.CoinType `protobuf:"varint,4,opt,name=coin_type,json=coinType,proto3,enum=pkg.coin.CoinType" json:"coin_type,omitempty"`
	Proof     *proofs.Proof `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
	BlockHash string        `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	TxIndex   int64         `protobuf:"varint,7,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
}

func (m *MsgAddToInTxTracker) Reset()         { *m = MsgAddToInTxTracker{} }
func (m *MsgAddToInTxTracker) String() string { return proto.CompactTextString(m) }
func (*MsgAddToInTxTracker) ProtoMessage()    {}
func (*MsgAddToInTxTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{6}
}
func (m *MsgAddToInTxTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddToInTxTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddToInTxTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddToInTxTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddToInTxTracker.Merge(m, src)
}
func (m *MsgAddToInTxTracker) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddToInTxTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddToInTxTracker.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddToInTxTracker proto.InternalMessageInfo

func (m *MsgAddToInTxTracker) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgAddToInTxTracker) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgAddToInTxTracker) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *MsgAddToInTxTracker) GetCoinType() coin.CoinType {
	if m != nil {
		return m.CoinType
	}
	return coin.CoinType_PELL
}

func (m *MsgAddToInTxTracker) GetProof() *proofs.Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *MsgAddToInTxTracker) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *MsgAddToInTxTracker) GetTxIndex() int64 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

// MsgAddToInTxTrackerResponse response for adding to inbound tx tracker
type MsgAddToInTxTrackerResponse struct {
}

func (m *MsgAddToInTxTrackerResponse) Reset()         { *m = MsgAddToInTxTrackerResponse{} }
func (m *MsgAddToInTxTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddToInTxTrackerResponse) ProtoMessage()    {}
func (*MsgAddToInTxTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{7}
}
func (m *MsgAddToInTxTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddToInTxTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddToInTxTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddToInTxTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddToInTxTrackerResponse.Merge(m, src)
}
func (m *MsgAddToInTxTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddToInTxTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddToInTxTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddToInTxTrackerResponse proto.InternalMessageInfo

// MsgAddToOutTxTracker add to outbound tx tracker
type MsgAddToOutTxTracker struct {
	ChainId   int64         `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce     uint64        `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	TxHash    string        `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Proof     *proofs.Proof `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	BlockHash string        `protobuf:"bytes,5,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	TxIndex   int64         `protobuf:"varint,6,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	Signer    string        `protobuf:"bytes,7,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgAddToOutTxTracker) Reset()         { *m = MsgAddToOutTxTracker{} }
func (m *MsgAddToOutTxTracker) String() string { return proto.CompactTextString(m) }
func (*MsgAddToOutTxTracker) ProtoMessage()    {}
func (*MsgAddToOutTxTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{8}
}
func (m *MsgAddToOutTxTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddToOutTxTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddToOutTxTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddToOutTxTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddToOutTxTracker.Merge(m, src)
}
func (m *MsgAddToOutTxTracker) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddToOutTxTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddToOutTxTracker.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddToOutTxTracker proto.InternalMessageInfo

func (m *MsgAddToOutTxTracker) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgAddToOutTxTracker) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgAddToOutTxTracker) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *MsgAddToOutTxTracker) GetProof() *proofs.Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *MsgAddToOutTxTracker) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *MsgAddToOutTxTracker) GetTxIndex() int64 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

func (m *MsgAddToOutTxTracker) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgAddToOutTxTrackerResponse response for adding to outbound tx tracker
type MsgAddToOutTxTrackerResponse struct {
	IsRemoved bool `protobuf:"varint,1,opt,name=is_removed,json=isRemoved,proto3" json:"is_removed,omitempty"`
}

func (m *MsgAddToOutTxTrackerResponse) Reset()         { *m = MsgAddToOutTxTrackerResponse{} }
func (m *MsgAddToOutTxTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddToOutTxTrackerResponse) ProtoMessage()    {}
func (*MsgAddToOutTxTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{9}
}
func (m *MsgAddToOutTxTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddToOutTxTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddToOutTxTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddToOutTxTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddToOutTxTrackerResponse.Merge(m, src)
}
func (m *MsgAddToOutTxTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddToOutTxTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddToOutTxTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddToOutTxTrackerResponse proto.InternalMessageInfo

func (m *MsgAddToOutTxTrackerResponse) GetIsRemoved() bool {
	if m != nil {
		return m.IsRemoved
	}
	return false
}

// MsgRemoveFromOutTxTracker remove from outbound tx tracker
type MsgRemoveFromOutTxTracker struct {
	Signer  string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	ChainId int64  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce   uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgRemoveFromOutTxTracker) Reset()         { *m = MsgRemoveFromOutTxTracker{} }
func (m *MsgRemoveFromOutTxTracker) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveFromOutTxTracker) ProtoMessage()    {}
func (*MsgRemoveFromOutTxTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{10}
}
func (m *MsgRemoveFromOutTxTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveFromOutTxTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveFromOutTxTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveFromOutTxTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveFromOutTxTracker.Merge(m, src)
}
func (m *MsgRemoveFromOutTxTracker) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveFromOutTxTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveFromOutTxTracker.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveFromOutTxTracker proto.InternalMessageInfo

func (m *MsgRemoveFromOutTxTracker) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRemoveFromOutTxTracker) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgRemoveFromOutTxTracker) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// MsgRemoveFromOutTxTrackerResponse response for removing from outbound tx
// tracker
type MsgRemoveFromOutTxTrackerResponse struct {
}

func (m *MsgRemoveFromOutTxTrackerResponse) Reset()         { *m = MsgRemoveFromOutTxTrackerResponse{} }
func (m *MsgRemoveFromOutTxTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveFromOutTxTrackerResponse) ProtoMessage()    {}
func (*MsgRemoveFromOutTxTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{11}
}
func (m *MsgRemoveFromOutTxTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveFromOutTxTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveFromOutTxTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveFromOutTxTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveFromOutTxTrackerResponse.Merge(m, src)
}
func (m *MsgRemoveFromOutTxTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveFromOutTxTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveFromOutTxTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveFromOutTxTrackerResponse proto.InternalMessageInfo

// MsgVoteGasPrice vote on gas price
type MsgVoteGasPrice struct {
	ChainId     int64  `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Price       uint64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	BlockNumber uint64 `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Supply      string `protobuf:"bytes,4,opt,name=supply,proto3" json:"supply,omitempty"`
	Signer      string `protobuf:"bytes,5,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgVoteGasPrice) Reset()         { *m = MsgVoteGasPrice{} }
func (m *MsgVoteGasPrice) String() string { return proto.CompactTextString(m) }
func (*MsgVoteGasPrice) ProtoMessage()    {}
func (*MsgVoteGasPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{12}
}
func (m *MsgVoteGasPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteGasPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteGasPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteGasPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteGasPrice.Merge(m, src)
}
func (m *MsgVoteGasPrice) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteGasPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteGasPrice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteGasPrice proto.InternalMessageInfo

func (m *MsgVoteGasPrice) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgVoteGasPrice) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *MsgVoteGasPrice) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *MsgVoteGasPrice) GetSupply() string {
	if m != nil {
		return m.Supply
	}
	return ""
}

func (m *MsgVoteGasPrice) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgVoteGasPriceResponse response for voting on gas price
type MsgVoteGasPriceResponse struct {
}

func (m *MsgVoteGasPriceResponse) Reset()         { *m = MsgVoteGasPriceResponse{} }
func (m *MsgVoteGasPriceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteGasPriceResponse) ProtoMessage()    {}
func (*MsgVoteGasPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{13}
}
func (m *MsgVoteGasPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteGasPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteGasPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteGasPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteGasPriceResponse.Merge(m, src)
}
func (m *MsgVoteGasPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteGasPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteGasPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteGasPriceResponse proto.InternalMessageInfo

// MsgVoteOnObservedOutboundTx vote on observed outbound tx
type MsgVoteOnObservedOutboundTx struct {
	Signer                         string                `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	XmsgHash                       string                `protobuf:"bytes,2,opt,name=xmsg_hash,json=xmsgHash,proto3" json:"xmsg_hash,omitempty"`
	Status                         chains.ReceiveStatus  `protobuf:"varint,3,opt,name=status,proto3,enum=pkg.chains.ReceiveStatus" json:"status,omitempty"`
	OutTxChain                     int64                 `protobuf:"varint,4,opt,name=out_tx_chain,json=outTxChain,proto3" json:"out_tx_chain,omitempty"`
	OutTxTssNonce                  uint64                `protobuf:"varint,5,opt,name=out_tx_tss_nonce,json=outTxTssNonce,proto3" json:"out_tx_tss_nonce,omitempty"`
	ObservedOutTxHash              string                `protobuf:"bytes,6,opt,name=observed_out_tx_hash,json=observedOutTxHash,proto3" json:"observed_out_tx_hash,omitempty"`
	ObservedOutTxBlockHeight       uint64                `protobuf:"varint,7,opt,name=observed_out_tx_block_height,json=observedOutTxBlockHeight,proto3" json:"observed_out_tx_block_height,omitempty"`
	ObservedOutTxGasUsed           uint64                `protobuf:"varint,8,opt,name=observed_out_tx_gas_used,json=observedOutTxGasUsed,proto3" json:"observed_out_tx_gas_used,omitempty"`
	ObservedOutTxEffectiveGasPrice cosmossdk_io_math.Int `protobuf:"bytes,9,opt,name=observed_out_tx_effective_gas_price,json=observedOutTxEffectiveGasPrice,proto3,customtype=cosmossdk.io/math.Int" json:"observed_out_tx_effective_gas_price"`
	ObservedOutTxEffectiveGasLimit uint64                `protobuf:"varint,10,opt,name=observed_out_tx_effective_gas_limit,json=observedOutTxEffectiveGasLimit,proto3" json:"observed_out_tx_effective_gas_limit,omitempty"`
	ObservedOutTxFailedReasonMsg   string                `protobuf:"bytes,11,opt,name=observed_out_tx_failed_reason_msg,json=observedOutTxFailedReasonMsg,proto3" json:"observed_out_tx_failed_reason_msg,omitempty"`
}

func (m *MsgVoteOnObservedOutboundTx) Reset()         { *m = MsgVoteOnObservedOutboundTx{} }
func (m *MsgVoteOnObservedOutboundTx) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOnObservedOutboundTx) ProtoMessage()    {}
func (*MsgVoteOnObservedOutboundTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{14}
}
func (m *MsgVoteOnObservedOutboundTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOnObservedOutboundTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOnObservedOutboundTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOnObservedOutboundTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOnObservedOutboundTx.Merge(m, src)
}
func (m *MsgVoteOnObservedOutboundTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOnObservedOutboundTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOnObservedOutboundTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOnObservedOutboundTx proto.InternalMessageInfo

func (m *MsgVoteOnObservedOutboundTx) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgVoteOnObservedOutboundTx) GetXmsgHash() string {
	if m != nil {
		return m.XmsgHash
	}
	return ""
}

func (m *MsgVoteOnObservedOutboundTx) GetStatus() chains.ReceiveStatus {
	if m != nil {
		return m.Status
	}
	return chains.ReceiveStatus_CREATED
}

func (m *MsgVoteOnObservedOutboundTx) GetOutTxChain() int64 {
	if m != nil {
		return m.OutTxChain
	}
	return 0
}

func (m *MsgVoteOnObservedOutboundTx) GetOutTxTssNonce() uint64 {
	if m != nil {
		return m.OutTxTssNonce
	}
	return 0
}

func (m *MsgVoteOnObservedOutboundTx) GetObservedOutTxHash() string {
	if m != nil {
		return m.ObservedOutTxHash
	}
	return ""
}

func (m *MsgVoteOnObservedOutboundTx) GetObservedOutTxBlockHeight() uint64 {
	if m != nil {
		return m.ObservedOutTxBlockHeight
	}
	return 0
}

func (m *MsgVoteOnObservedOutboundTx) GetObservedOutTxGasUsed() uint64 {
	if m != nil {
		return m.ObservedOutTxGasUsed
	}
	return 0
}

func (m *MsgVoteOnObservedOutboundTx) GetObservedOutTxEffectiveGasLimit() uint64 {
	if m != nil {
		return m.ObservedOutTxEffectiveGasLimit
	}
	return 0
}

func (m *MsgVoteOnObservedOutboundTx) GetObservedOutTxFailedReasonMsg() string {
	if m != nil {
		return m.ObservedOutTxFailedReasonMsg
	}
	return ""
}

// MsgVoteOnObservedOutboundTxResponse response for voting on observed outbound
type MsgVoteOnObservedOutboundTxResponse struct {
}

func (m *MsgVoteOnObservedOutboundTxResponse) Reset()         { *m = MsgVoteOnObservedOutboundTxResponse{} }
func (m *MsgVoteOnObservedOutboundTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOnObservedOutboundTxResponse) ProtoMessage()    {}
func (*MsgVoteOnObservedOutboundTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{15}
}
func (m *MsgVoteOnObservedOutboundTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOnObservedOutboundTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOnObservedOutboundTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOnObservedOutboundTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOnObservedOutboundTxResponse.Merge(m, src)
}
func (m *MsgVoteOnObservedOutboundTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOnObservedOutboundTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOnObservedOutboundTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOnObservedOutboundTxResponse proto.InternalMessageInfo

// MsgVoteOnObservedInboundTx vote on observed inbound tx
type MsgVoteOnObservedInboundTx struct {
	Sender        string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	SenderChainId int64  `protobuf:"varint,2,opt,name=sender_chain_id,json=senderChainId,proto3" json:"sender_chain_id,omitempty"`
	Receiver      string `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverChain int64  `protobuf:"varint,4,opt,name=receiver_chain,json=receiverChain,proto3" json:"receiver_chain,omitempty"`
	InTxHash      string `protobuf:"bytes,5,opt,name=in_tx_hash,json=inTxHash,proto3" json:"in_tx_hash,omitempty"`
	InBlockHeight uint64 `protobuf:"varint,6,opt,name=in_block_height,json=inBlockHeight,proto3" json:"in_block_height,omitempty"`
	GasLimit      uint64 `protobuf:"varint,7,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	TxOrigin      string `protobuf:"bytes,8,opt,name=tx_origin,json=txOrigin,proto3" json:"tx_origin,omitempty"`
	// event index of the sent asset in the observed tx
	EventIndex uint64            `protobuf:"varint,9,opt,name=event_index,json=eventIndex,proto3" json:"event_index,omitempty"`
	PellTx     *InboundPellEvent `protobuf:"bytes,10,opt,name=pell_tx,json=pellTx,proto3" json:"pell_tx,omitempty"`
	Signer     string            `protobuf:"bytes,11,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgVoteOnObservedInboundTx) Reset()         { *m = MsgVoteOnObservedInboundTx{} }
func (m *MsgVoteOnObservedInboundTx) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOnObservedInboundTx) ProtoMessage()    {}
func (*MsgVoteOnObservedInboundTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{16}
}
func (m *MsgVoteOnObservedInboundTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOnObservedInboundTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOnObservedInboundTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOnObservedInboundTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOnObservedInboundTx.Merge(m, src)
}
func (m *MsgVoteOnObservedInboundTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOnObservedInboundTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOnObservedInboundTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOnObservedInboundTx proto.InternalMessageInfo

func (m *MsgVoteOnObservedInboundTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetSenderChainId() int64 {
	if m != nil {
		return m.SenderChainId
	}
	return 0
}

func (m *MsgVoteOnObservedInboundTx) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetReceiverChain() int64 {
	if m != nil {
		return m.ReceiverChain
	}
	return 0
}

func (m *MsgVoteOnObservedInboundTx) GetInTxHash() string {
	if m != nil {
		return m.InTxHash
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetInBlockHeight() uint64 {
	if m != nil {
		return m.InBlockHeight
	}
	return 0
}

func (m *MsgVoteOnObservedInboundTx) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *MsgVoteOnObservedInboundTx) GetTxOrigin() string {
	if m != nil {
		return m.TxOrigin
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetEventIndex() uint64 {
	if m != nil {
		return m.EventIndex
	}
	return 0
}

func (m *MsgVoteOnObservedInboundTx) GetPellTx() *InboundPellEvent {
	if m != nil {
		return m.PellTx
	}
	return nil
}

func (m *MsgVoteOnObservedInboundTx) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgVoteOnObservedInboundTxResponse response for voting on observed inbound tx
type MsgVoteOnObservedInboundTxResponse struct {
}

func (m *MsgVoteOnObservedInboundTxResponse) Reset()         { *m = MsgVoteOnObservedInboundTxResponse{} }
func (m *MsgVoteOnObservedInboundTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOnObservedInboundTxResponse) ProtoMessage()    {}
func (*MsgVoteOnObservedInboundTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{17}
}
func (m *MsgVoteOnObservedInboundTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOnObservedInboundTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOnObservedInboundTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOnObservedInboundTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOnObservedInboundTxResponse.Merge(m, src)
}
func (m *MsgVoteOnObservedInboundTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOnObservedInboundTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOnObservedInboundTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOnObservedInboundTxResponse proto.InternalMessageInfo

// MsgAbortStuckXmsg abort a stuck xmsg
type MsgAbortStuckXmsg struct {
	Signer    string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	XmsgIndex string `protobuf:"bytes,2,opt,name=xmsg_index,json=xmsgIndex,proto3" json:"xmsg_index,omitempty"`
}

func (m *MsgAbortStuckXmsg) Reset()         { *m = MsgAbortStuckXmsg{} }
func (m *MsgAbortStuckXmsg) String() string { return proto.CompactTextString(m) }
func (*MsgAbortStuckXmsg) ProtoMessage()    {}
func (*MsgAbortStuckXmsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{18}
}
func (m *MsgAbortStuckXmsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAbortStuckXmsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAbortStuckXmsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAbortStuckXmsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAbortStuckXmsg.Merge(m, src)
}
func (m *MsgAbortStuckXmsg) XXX_Size() int {
	return m.Size()
}
func (m *MsgAbortStuckXmsg) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAbortStuckXmsg.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAbortStuckXmsg proto.InternalMessageInfo

func (m *MsgAbortStuckXmsg) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgAbortStuckXmsg) GetXmsgIndex() string {
	if m != nil {
		return m.XmsgIndex
	}
	return ""
}

// MsgAbortStuckXmsgResponse response for aborting a stuck xmsg
type MsgAbortStuckXmsgResponse struct {
}

func (m *MsgAbortStuckXmsgResponse) Reset()         { *m = MsgAbortStuckXmsgResponse{} }
func (m *MsgAbortStuckXmsgResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAbortStuckXmsgResponse) ProtoMessage()    {}
func (*MsgAbortStuckXmsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{19}
}
func (m *MsgAbortStuckXmsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAbortStuckXmsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAbortStuckXmsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAbortStuckXmsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAbortStuckXmsgResponse.Merge(m, src)
}
func (m *MsgAbortStuckXmsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAbortStuckXmsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAbortStuckXmsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAbortStuckXmsgResponse proto.InternalMessageInfo

// MsgRefundAbortedXmsg refund an aborted xmsg
type MsgRefundAbortedXmsg struct {
	Signer        string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	XmsgIndex     string `protobuf:"bytes,2,opt,name=xmsg_index,json=xmsgIndex,proto3" json:"xmsg_index,omitempty"`
	RefundAddress string `protobuf:"bytes,3,opt,name=refund_address,json=refundAddress,proto3" json:"refund_address,omitempty"`
}

func (m *MsgRefundAbortedXmsg) Reset()         { *m = MsgRefundAbortedXmsg{} }
func (m *MsgRefundAbortedXmsg) String() string { return proto.CompactTextString(m) }
func (*MsgRefundAbortedXmsg) ProtoMessage()    {}
func (*MsgRefundAbortedXmsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{20}
}
func (m *MsgRefundAbortedXmsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRefundAbortedXmsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRefundAbortedXmsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRefundAbortedXmsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRefundAbortedXmsg.Merge(m, src)
}
func (m *MsgRefundAbortedXmsg) XXX_Size() int {
	return m.Size()
}
func (m *MsgRefundAbortedXmsg) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRefundAbortedXmsg.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRefundAbortedXmsg proto.InternalMessageInfo

func (m *MsgRefundAbortedXmsg) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRefundAbortedXmsg) GetXmsgIndex() string {
	if m != nil {
		return m.XmsgIndex
	}
	return ""
}

func (m *MsgRefundAbortedXmsg) GetRefundAddress() string {
	if m != nil {
		return m.RefundAddress
	}
	return ""
}

// MsgRefundAbortedXmsgResponse response for refunding an aborted xmsg
type MsgRefundAbortedXmsgResponse struct {
}

func (m *MsgRefundAbortedXmsgResponse) Reset()         { *m = MsgRefundAbortedXmsgResponse{} }
func (m *MsgRefundAbortedXmsgResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRefundAbortedXmsgResponse) ProtoMessage()    {}
func (*MsgRefundAbortedXmsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{21}
}
func (m *MsgRefundAbortedXmsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRefundAbortedXmsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRefundAbortedXmsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRefundAbortedXmsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRefundAbortedXmsgResponse.Merge(m, src)
}
func (m *MsgRefundAbortedXmsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRefundAbortedXmsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRefundAbortedXmsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRefundAbortedXmsgResponse proto.InternalMessageInfo

// MsgUpdateRateLimiterFlags update the rate limiter flags
type MsgUpdateRateLimiterFlags struct {
	Signer           string           `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	RateLimiterFlags RateLimiterFlags `protobuf:"bytes,2,opt,name=rate_limiter_flags,json=rateLimiterFlags,proto3" json:"rate_limiter_flags"`
}

func (m *MsgUpdateRateLimiterFlags) Reset()         { *m = MsgUpdateRateLimiterFlags{} }
func (m *MsgUpdateRateLimiterFlags) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRateLimiterFlags) ProtoMessage()    {}
func (*MsgUpdateRateLimiterFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{22}
}
func (m *MsgUpdateRateLimiterFlags) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRateLimiterFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRateLimiterFlags.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRateLimiterFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRateLimiterFlags.Merge(m, src)
}
func (m *MsgUpdateRateLimiterFlags) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRateLimiterFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRateLimiterFlags.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRateLimiterFlags proto.InternalMessageInfo

func (m *MsgUpdateRateLimiterFlags) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateRateLimiterFlags) GetRateLimiterFlags() RateLimiterFlags {
	if m != nil {
		return m.RateLimiterFlags
	}
	return RateLimiterFlags{}
}

// MsgUpdateRateLimiterFlagsResponse response for updating the rate limiter
// flags
type MsgUpdateRateLimiterFlagsResponse struct {
}

func (m *MsgUpdateRateLimiterFlagsResponse) Reset()         { *m = MsgUpdateRateLimiterFlagsResponse{} }
func (m *MsgUpdateRateLimiterFlagsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRateLimiterFlagsResponse) ProtoMessage()    {}
func (*MsgUpdateRateLimiterFlagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{23}
}
func (m *MsgUpdateRateLimiterFlagsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRateLimiterFlagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRateLimiterFlagsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRateLimiterFlagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRateLimiterFlagsResponse.Merge(m, src)
}
func (m *MsgUpdateRateLimiterFlagsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRateLimiterFlagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRateLimiterFlagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRateLimiterFlagsResponse proto.InternalMessageInfo

// MsgVoteInboundBlock vote on observer inbound block proof
type MsgVoteInboundBlock struct {
	Signer     string      `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	BlockProof *BlockProof `protobuf:"bytes,2,opt,name=block_proof,json=blockProof,proto3" json:"block_proof,omitempty"`
}

func (m *MsgVoteInboundBlock) Reset()         { *m = MsgVoteInboundBlock{} }
func (m *MsgVoteInboundBlock) String() string { return proto.CompactTextString(m) }
func (*MsgVoteInboundBlock) ProtoMessage()    {}
func (*MsgVoteInboundBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{24}
}
func (m *MsgVoteInboundBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteInboundBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteInboundBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteInboundBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteInboundBlock.Merge(m, src)
}
func (m *MsgVoteInboundBlock) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteInboundBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteInboundBlock.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteInboundBlock proto.InternalMessageInfo

func (m *MsgVoteInboundBlock) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgVoteInboundBlock) GetBlockProof() *BlockProof {
	if m != nil {
		return m.BlockProof
	}
	return nil
}

// vote on observer inboound block proof reponse
type MsgVoteOnObservedInboundBlockResponse struct {
}

func (m *MsgVoteOnObservedInboundBlockResponse) Reset()         { *m = MsgVoteOnObservedInboundBlockResponse{} }
func (m *MsgVoteOnObservedInboundBlockResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOnObservedInboundBlockResponse) ProtoMessage()    {}
func (*MsgVoteOnObservedInboundBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{25}
}
func (m *MsgVoteOnObservedInboundBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOnObservedInboundBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOnObservedInboundBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOnObservedInboundBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOnObservedInboundBlockResponse.Merge(m, src)
}
func (m *MsgVoteOnObservedInboundBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOnObservedInboundBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOnObservedInboundBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOnObservedInboundBlockResponse proto.InternalMessageInfo

// Add the address of xmsg that can be built
type MsgAddAllowedXmsgSender struct {
	Signer   string   `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Builders []string `protobuf:"bytes,2,rep,name=builders,proto3" json:"builders,omitempty"`
}

func (m *MsgAddAllowedXmsgSender) Reset()         { *m = MsgAddAllowedXmsgSender{} }
func (m *MsgAddAllowedXmsgSender) String() string { return proto.CompactTextString(m) }
func (*MsgAddAllowedXmsgSender) ProtoMessage()    {}
func (*MsgAddAllowedXmsgSender) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{26}
}
func (m *MsgAddAllowedXmsgSender) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAllowedXmsgSender) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAllowedXmsgSender.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAllowedXmsgSender) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAllowedXmsgSender.Merge(m, src)
}
func (m *MsgAddAllowedXmsgSender) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAllowedXmsgSender) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAllowedXmsgSender.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAllowedXmsgSender proto.InternalMessageInfo

func (m *MsgAddAllowedXmsgSender) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgAddAllowedXmsgSender) GetBuilders() []string {
	if m != nil {
		return m.Builders
	}
	return nil
}

// Add allowed xmsg sender response
type MsgAddAllowedXmsgSenderResponse struct {
}

func (m *MsgAddAllowedXmsgSenderResponse) Reset()         { *m = MsgAddAllowedXmsgSenderResponse{} }
func (m *MsgAddAllowedXmsgSenderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddAllowedXmsgSenderResponse) ProtoMessage()    {}
func (*MsgAddAllowedXmsgSenderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{27}
}
func (m *MsgAddAllowedXmsgSenderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAllowedXmsgSenderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAllowedXmsgSenderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAllowedXmsgSenderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAllowedXmsgSenderResponse.Merge(m, src)
}
func (m *MsgAddAllowedXmsgSenderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAllowedXmsgSenderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAllowedXmsgSenderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAllowedXmsgSenderResponse proto.InternalMessageInfo

// Remove allowed xmsg sender
type MsgRemoveAllowedXmsgSender struct {
	Signer   string   `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Builders []string `protobuf:"bytes,2,rep,name=builders,proto3" json:"builders,omitempty"`
}

func (m *MsgRemoveAllowedXmsgSender) Reset()         { *m = MsgRemoveAllowedXmsgSender{} }
func (m *MsgRemoveAllowedXmsgSender) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveAllowedXmsgSender) ProtoMessage()    {}
func (*MsgRemoveAllowedXmsgSender) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{28}
}
func (m *MsgRemoveAllowedXmsgSender) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveAllowedXmsgSender) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveAllowedXmsgSender.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveAllowedXmsgSender) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveAllowedXmsgSender.Merge(m, src)
}
func (m *MsgRemoveAllowedXmsgSender) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveAllowedXmsgSender) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveAllowedXmsgSender.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveAllowedXmsgSender proto.InternalMessageInfo

func (m *MsgRemoveAllowedXmsgSender) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRemoveAllowedXmsgSender) GetBuilders() []string {
	if m != nil {
		return m.Builders
	}
	return nil
}

// Remove allowed xmsg sender response
type MsgRemoveAllowedXmsgSenderResponse struct {
}

func (m *MsgRemoveAllowedXmsgSenderResponse) Reset()         { *m = MsgRemoveAllowedXmsgSenderResponse{} }
func (m *MsgRemoveAllowedXmsgSenderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveAllowedXmsgSenderResponse) ProtoMessage()    {}
func (*MsgRemoveAllowedXmsgSenderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{29}
}
func (m *MsgRemoveAllowedXmsgSenderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveAllowedXmsgSenderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveAllowedXmsgSenderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveAllowedXmsgSenderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveAllowedXmsgSenderResponse.Merge(m, src)
}
func (m *MsgRemoveAllowedXmsgSenderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveAllowedXmsgSenderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveAllowedXmsgSenderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveAllowedXmsgSenderResponse proto.InternalMessageInfo

// vote on observer recharge pell token
type MsgVoteOnPellRecharge struct {
	ChainId   int64  `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	VoteIndex uint64 `protobuf:"varint,2,opt,name=vote_index,json=voteIndex,proto3" json:"vote_index,omitempty"`
	Signer    string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgVoteOnPellRecharge) Reset()         { *m = MsgVoteOnPellRecharge{} }
func (m *MsgVoteOnPellRecharge) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOnPellRecharge) ProtoMessage()    {}
func (*MsgVoteOnPellRecharge) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{30}
}
func (m *MsgVoteOnPellRecharge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOnPellRecharge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOnPellRecharge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOnPellRecharge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOnPellRecharge.Merge(m, src)
}
func (m *MsgVoteOnPellRecharge) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOnPellRecharge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOnPellRecharge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOnPellRecharge proto.InternalMessageInfo

func (m *MsgVoteOnPellRecharge) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgVoteOnPellRecharge) GetVoteIndex() uint64 {
	if m != nil {
		return m.VoteIndex
	}
	return 0
}

func (m *MsgVoteOnPellRecharge) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// vote on observer recharge pell token response
type MsgVoteOnPellRechargeResponse struct {
}

func (m *MsgVoteOnPellRechargeResponse) Reset()         { *m = MsgVoteOnPellRechargeResponse{} }
func (m *MsgVoteOnPellRechargeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOnPellRechargeResponse) ProtoMessage()    {}
func (*MsgVoteOnPellRechargeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{31}
}
func (m *MsgVoteOnPellRechargeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOnPellRechargeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOnPellRechargeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOnPellRechargeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOnPellRechargeResponse.Merge(m, src)
}
func (m *MsgVoteOnPellRechargeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOnPellRechargeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOnPellRechargeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOnPellRechargeResponse proto.InternalMessageInfo

// vote on observer recharge gas token
type MsgVoteOnGasRecharge struct {
	ChainId   int64  `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	VoteIndex uint64 `protobuf:"varint,2,opt,name=vote_index,json=voteIndex,proto3" json:"vote_index,omitempty"`
	Signer    string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgVoteOnGasRecharge) Reset()         { *m = MsgVoteOnGasRecharge{} }
func (m *MsgVoteOnGasRecharge) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOnGasRecharge) ProtoMessage()    {}
func (*MsgVoteOnGasRecharge) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{32}
}
func (m *MsgVoteOnGasRecharge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOnGasRecharge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOnGasRecharge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOnGasRecharge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOnGasRecharge.Merge(m, src)
}
func (m *MsgVoteOnGasRecharge) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOnGasRecharge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOnGasRecharge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOnGasRecharge proto.InternalMessageInfo

func (m *MsgVoteOnGasRecharge) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgVoteOnGasRecharge) GetVoteIndex() uint64 {
	if m != nil {
		return m.VoteIndex
	}
	return 0
}

func (m *MsgVoteOnGasRecharge) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// vote on observer recharge gas token response
type MsgVoteOnGasRechargeResponse struct {
}

func (m *MsgVoteOnGasRechargeResponse) Reset()         { *m = MsgVoteOnGasRechargeResponse{} }
func (m *MsgVoteOnGasRechargeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOnGasRechargeResponse) ProtoMessage()    {}
func (*MsgVoteOnGasRechargeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{33}
}
func (m *MsgVoteOnGasRechargeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOnGasRechargeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOnGasRechargeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOnGasRechargeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOnGasRechargeResponse.Merge(m, src)
}
func (m *MsgVoteOnGasRechargeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOnGasRechargeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOnGasRechargeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOnGasRechargeResponse proto.InternalMessageInfo

// MsgUpsertCrosschainFeeParam represents the message to upsert crosschain fee
// param
type MsgUpsertCrosschainFeeParams struct {
	Signer              string                `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	CrosschainFeeParams []*CrosschainFeeParam `protobuf:"bytes,2,rep,name=crosschain_fee_params,json=crosschainFeeParams,proto3" json:"crosschain_fee_params,omitempty"`
}

func (m *MsgUpsertCrosschainFeeParams) Reset()         { *m = MsgUpsertCrosschainFeeParams{} }
func (m *MsgUpsertCrosschainFeeParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpsertCrosschainFeeParams) ProtoMessage()    {}
func (*MsgUpsertCrosschainFeeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{34}
}
func (m *MsgUpsertCrosschainFeeParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpsertCrosschainFeeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpsertCrosschainFeeParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpsertCrosschainFeeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpsertCrosschainFeeParams.Merge(m, src)
}
func (m *MsgUpsertCrosschainFeeParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpsertCrosschainFeeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpsertCrosschainFeeParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpsertCrosschainFeeParams proto.InternalMessageInfo

func (m *MsgUpsertCrosschainFeeParams) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpsertCrosschainFeeParams) GetCrosschainFeeParams() []*CrosschainFeeParam {
	if m != nil {
		return m.CrosschainFeeParams
	}
	return nil
}

// MsgUpsertCrosschainFeeParamResponse represents the response to upsert
// crosschain fee param
type MsgUpsertCrosschainFeeParamsResponse struct {
}

func (m *MsgUpsertCrosschainFeeParamsResponse) Reset()         { *m = MsgUpsertCrosschainFeeParamsResponse{} }
func (m *MsgUpsertCrosschainFeeParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpsertCrosschainFeeParamsResponse) ProtoMessage()    {}
func (*MsgUpsertCrosschainFeeParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ea69829c73b3ce, []int{35}
}
func (m *MsgUpsertCrosschainFeeParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpsertCrosschainFeeParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpsertCrosschainFeeParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpsertCrosschainFeeParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpsertCrosschainFeeParamsResponse.Merge(m, src)
}
func (m *MsgUpsertCrosschainFeeParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpsertCrosschainFeeParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpsertCrosschainFeeParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpsertCrosschainFeeParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgInboundTxMaintenance)(nil), "xmsg.MsgInboundTxMaintenance")
	proto.RegisterType((*MsgInboundTxMaintenanceResponse)(nil), "xmsg.MsgInboundTxMaintenanceResponse")
	proto.RegisterType((*MsgMigrateTssFunds)(nil), "xmsg.MsgMigrateTssFunds")
	proto.RegisterType((*MsgMigrateTssFundsResponse)(nil), "xmsg.MsgMigrateTssFundsResponse")
	proto.RegisterType((*MsgUpdateTssAddress)(nil), "xmsg.MsgUpdateTssAddress")
	proto.RegisterType((*MsgUpdateTssAddressResponse)(nil), "xmsg.MsgUpdateTssAddressResponse")
	proto.RegisterType((*MsgAddToInTxTracker)(nil), "xmsg.MsgAddToInTxTracker")
	proto.RegisterType((*MsgAddToInTxTrackerResponse)(nil), "xmsg.MsgAddToInTxTrackerResponse")
	proto.RegisterType((*MsgAddToOutTxTracker)(nil), "xmsg.MsgAddToOutTxTracker")
	proto.RegisterType((*MsgAddToOutTxTrackerResponse)(nil), "xmsg.MsgAddToOutTxTrackerResponse")
	proto.RegisterType((*MsgRemoveFromOutTxTracker)(nil), "xmsg.MsgRemoveFromOutTxTracker")
	proto.RegisterType((*MsgRemoveFromOutTxTrackerResponse)(nil), "xmsg.MsgRemoveFromOutTxTrackerResponse")
	proto.RegisterType((*MsgVoteGasPrice)(nil), "xmsg.MsgVoteGasPrice")
	proto.RegisterType((*MsgVoteGasPriceResponse)(nil), "xmsg.MsgVoteGasPriceResponse")
	proto.RegisterType((*MsgVoteOnObservedOutboundTx)(nil), "xmsg.MsgVoteOnObservedOutboundTx")
	proto.RegisterType((*MsgVoteOnObservedOutboundTxResponse)(nil), "xmsg.MsgVoteOnObservedOutboundTxResponse")
	proto.RegisterType((*MsgVoteOnObservedInboundTx)(nil), "xmsg.MsgVoteOnObservedInboundTx")
	proto.RegisterType((*MsgVoteOnObservedInboundTxResponse)(nil), "xmsg.MsgVoteOnObservedInboundTxResponse")
	proto.RegisterType((*MsgAbortStuckXmsg)(nil), "xmsg.MsgAbortStuckXmsg")
	proto.RegisterType((*MsgAbortStuckXmsgResponse)(nil), "xmsg.MsgAbortStuckXmsgResponse")
	proto.RegisterType((*MsgRefundAbortedXmsg)(nil), "xmsg.MsgRefundAbortedXmsg")
	proto.RegisterType((*MsgRefundAbortedXmsgResponse)(nil), "xmsg.MsgRefundAbortedXmsgResponse")
	proto.RegisterType((*MsgUpdateRateLimiterFlags)(nil), "xmsg.MsgUpdateRateLimiterFlags")
	proto.RegisterType((*MsgUpdateRateLimiterFlagsResponse)(nil), "xmsg.MsgUpdateRateLimiterFlagsResponse")
	proto.RegisterType((*MsgVoteInboundBlock)(nil), "xmsg.MsgVoteInboundBlock")
	proto.RegisterType((*MsgVoteOnObservedInboundBlockResponse)(nil), "xmsg.MsgVoteOnObservedInboundBlockResponse")
	proto.RegisterType((*MsgAddAllowedXmsgSender)(nil), "xmsg.MsgAddAllowedXmsgSender")
	proto.RegisterType((*MsgAddAllowedXmsgSenderResponse)(nil), "xmsg.MsgAddAllowedXmsgSenderResponse")
	proto.RegisterType((*MsgRemoveAllowedXmsgSender)(nil), "xmsg.MsgRemoveAllowedXmsgSender")
	proto.RegisterType((*MsgRemoveAllowedXmsgSenderResponse)(nil), "xmsg.MsgRemoveAllowedXmsgSenderResponse")
	proto.RegisterType((*MsgVoteOnPellRecharge)(nil), "xmsg.MsgVoteOnPellRecharge")
	proto.RegisterType((*MsgVoteOnPellRechargeResponse)(nil), "xmsg.MsgVoteOnPellRechargeResponse")
	proto.RegisterType((*MsgVoteOnGasRecharge)(nil), "xmsg.MsgVoteOnGasRecharge")
	proto.RegisterType((*MsgVoteOnGasRechargeResponse)(nil), "xmsg.MsgVoteOnGasRechargeResponse")
	proto.RegisterType((*MsgUpsertCrosschainFeeParams)(nil), "xmsg.MsgUpsertCrosschainFeeParams")
	proto.RegisterType((*MsgUpsertCrosschainFeeParamsResponse)(nil), "xmsg.MsgUpsertCrosschainFeeParamsResponse")
}

func init() { proto.RegisterFile("xmsg/tx.proto", fileDescriptor_f9ea69829c73b3ce) }

var fileDescriptor_f9ea69829c73b3ce = []byte{
	// 1813 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x18, 0x4d, 0x6f, 0xdb, 0xc8,
	0x35, 0x5a, 0xdb, 0xb2, 0xf4, 0x1c, 0xc7, 0x31, 0xe3, 0x0f, 0x99, 0xb6, 0x25, 0xdb, 0xd9, 0x24,
	0x6e, 0x16, 0xb5, 0x10, 0x17, 0xd8, 0x43, 0x81, 0x16, 0x48, 0xd2, 0x38, 0xeb, 0x6d, 0xb4, 0x36,
	0x68, 0x79, 0xdb, 0x2e, 0x5a, 0x10, 0x94, 0x38, 0xa6, 0x58, 0x49, 0x1c, 0x96, 0x33, 0x54, 0xe5,
	0x63, 0xf7, 0xd4, 0x43, 0x0f, 0xed, 0xa5, 0x97, 0xde, 0x7a, 0x2f, 0xd0, 0x9f, 0xb1, 0xc7, 0x3d,
	0x16, 0x3d, 0x04, 0x45, 0x72, 0x68, 0x7f, 0x46, 0x31, 0x6f, 0x46, 0x63, 0x92, 0x22, 0x65, 0x34,
	0x45, 0x7b, 0x91, 0x38, 0xef, 0xbd, 0x79, 0xdf, 0x5f, 0x24, 0x2c, 0x8f, 0x87, 0xcc, 0x6b, 0xf2,
	0xf1, 0x51, 0x18, 0x51, 0x4e, 0x8d, 0x79, 0x71, 0x34, 0x37, 0xbb, 0x94, 0x0d, 0x29, 0x6b, 0x0a,
	0xd4, 0xe8, 0x99, 0xf8, 0x93, 0x68, 0x73, 0xcd, 0xa3, 0x1e, 0xc5, 0xc7, 0xa6, 0x78, 0x52, 0xd0,
	0xcd, 0xb0, 0xef, 0x35, 0xbb, 0x3d, 0xc7, 0x0f, 0x98, 0xfa, 0x53, 0x88, 0x07, 0x88, 0xa0, 0x7e,
	0x80, 0x3f, 0x49, 0xea, 0x30, 0xa2, 0xf4, 0x8a, 0xa9, 0x3f, 0x85, 0xd8, 0x40, 0x55, 0x90, 0x81,
	0xed, 0x07, 0x2e, 0x51, 0x3a, 0x99, 0x0d, 0x09, 0x8f, 0x28, 0x63, 0x12, 0x79, 0x45, 0x88, 0x1d,
	0x3a, 0x91, 0x33, 0x54, 0x04, 0xeb, 0x48, 0x10, 0x92, 0xc1, 0xc0, 0x26, 0x23, 0x12, 0x70, 0x05,
	0xde, 0x45, 0x70, 0xe4, 0x70, 0x62, 0x0f, 0xfc, 0xa1, 0xcf, 0x49, 0x64, 0x5f, 0x0d, 0x1c, 0x4f,
	0x89, 0x3b, 0xf8, 0x4b, 0x09, 0x36, 0x5b, 0xcc, 0x3b, 0x0d, 0x3a, 0x34, 0x0e, 0xdc, 0xf6, 0xb8,
	0xe5, 0xf8, 0x01, 0x27, 0x81, 0x13, 0x74, 0x89, 0xb1, 0x01, 0x65, 0xe6, 0x7b, 0x01, 0x89, 0x6a,
	0xa5, 0xbd, 0xd2, 0x61, 0xd5, 0x52, 0x27, 0x63, 0x0b, 0x2a, 0x4a, 0x3f, 0xb7, 0xf6, 0xd1, 0x5e,
	0xe9, 0x70, 0xce, 0x5a, 0xc4, 0xf3, 0xa9, 0x6b, 0x3c, 0x85, 0xd5, 0xab, 0x88, 0x0e, 0xed, 0xce,
	0x80, 0x76, 0xfb, 0x76, 0x8f, 0xf8, 0x5e, 0x8f, 0xd7, 0xe6, 0xf6, 0x4a, 0x87, 0xf3, 0xd6, 0x8a,
	0x40, 0xbc, 0x10, 0xf0, 0xcf, 0x10, 0x6c, 0x3c, 0x86, 0x15, 0x4e, 0xd3, 0x94, 0xf3, 0x48, 0xb9,
	0xcc, 0x69, 0x82, 0xee, 0xfb, 0x4b, 0x5f, 0xff, 0xf3, 0xaf, 0x4f, 0x95, 0xec, 0x83, 0x7d, 0x68,
	0x14, 0xa8, 0x6b, 0x11, 0x16, 0xd2, 0x80, 0x91, 0x83, 0xdf, 0x95, 0xc0, 0x68, 0x31, 0xaf, 0xe5,
	0x7b, 0xc2, 0xea, 0x36, 0x63, 0x27, 0x71, 0xe0, 0xb2, 0x0f, 0xb1, 0xe6, 0x53, 0x28, 0x3b, 0x43,
	0x1a, 0x07, 0xd2, 0x84, 0xea, 0x8b, 0xfa, 0x37, 0x6f, 0x1b, 0x77, 0xfe, 0xfe, 0xb6, 0xb1, 0x21,
	0x33, 0x83, 0xb9, 0xfd, 0x23, 0x9f, 0x36, 0x87, 0x0e, 0xef, 0x1d, 0x5d, 0xfa, 0x01, 0xb7, 0x14,
	0x75, 0x5a, 0xe3, 0x1d, 0x30, 0xa7, 0xb5, 0xd1, 0xca, 0xfe, 0x0c, 0x1e, 0xb4, 0x98, 0x77, 0x19,
	0xba, 0x12, 0xf9, 0xdc, 0x75, 0x23, 0xc2, 0x8a, 0x95, 0xdd, 0x05, 0xe0, 0x8c, 0xd9, 0x61, 0xdc,
	0xe9, 0x93, 0x6b, 0x54, 0xb7, 0x6a, 0x55, 0x39, 0x63, 0xe7, 0x08, 0x48, 0x0b, 0xde, 0x85, 0xed,
	0x1c, 0xd6, 0x5a, 0xf2, 0xd7, 0x1f, 0xa1, 0xe8, 0xe7, 0xae, 0xdb, 0xa6, 0xa7, 0x41, 0x7b, 0xdc,
	0x8e, 0x9c, 0x6e, 0x9f, 0x44, 0x1f, 0xe2, 0xa7, 0x4d, 0x58, 0xe4, 0x63, 0xbb, 0xe7, 0xb0, 0x9e,
	0x74, 0x94, 0x55, 0xe6, 0xe3, 0xcf, 0x1c, 0xd6, 0x33, 0x9a, 0x50, 0x15, 0x39, 0x6f, 0xf3, 0xeb,
	0x90, 0x60, 0x70, 0xef, 0x1d, 0x1b, 0x47, 0x61, 0xdf, 0x3b, 0xc2, 0x4a, 0x78, 0x49, 0xfd, 0xa0,
	0x7d, 0x1d, 0x12, 0xab, 0xd2, 0x55, 0x4f, 0xc6, 0x13, 0x58, 0xc0, 0x6a, 0xa8, 0x2d, 0xec, 0x95,
	0x0e, 0x97, 0x8e, 0x57, 0x91, 0x58, 0xd5, 0xc7, 0xb9, 0xf8, 0xb3, 0x24, 0x5e, 0x38, 0x42, 0x65,
	0x8e, 0x90, 0x5a, 0x96, 0x8e, 0x40, 0x08, 0x0a, 0xde, 0x82, 0x0a, 0x1f, 0xcb, 0xfa, 0xa9, 0x2d,
	0x4a, 0x65, 0xf9, 0xf8, 0x54, 0x1c, 0xf3, 0x7c, 0x94, 0xf5, 0x81, 0xf6, 0xd1, 0xbf, 0x4a, 0xb0,
	0x36, 0xc1, 0x9f, 0xc5, 0xfc, 0xc6, 0x49, 0x49, 0x67, 0x94, 0xd2, 0xce, 0x58, 0x83, 0x85, 0x80,
	0x06, 0x5d, 0x82, 0x4e, 0x9a, 0xb7, 0xe4, 0xa1, 0xd8, 0x45, 0xda, 0xe2, 0xf9, 0xff, 0xc8, 0xe2,
	0x85, 0x59, 0x16, 0x97, 0x53, 0x16, 0x27, 0x22, 0xba, 0x98, 0x8c, 0x68, 0xda, 0x13, 0x3f, 0x80,
	0x9d, 0x3c, 0x4b, 0x27, 0xae, 0x10, 0xe2, 0x7d, 0x66, 0x47, 0x64, 0x48, 0x47, 0x44, 0xda, 0x5c,
	0xb1, 0xaa, 0x3e, 0xb3, 0x24, 0xe0, 0xe0, 0x57, 0xb0, 0xd5, 0x62, 0x9e, 0x3c, 0x9d, 0x44, 0x74,
	0x98, 0xf2, 0xd6, 0x07, 0xa4, 0x94, 0xf6, 0xe2, 0x5c, 0xc2, 0x8b, 0x69, 0x8d, 0x1f, 0xc2, 0x7e,
	0xa1, 0x48, 0x1d, 0xc1, 0x3f, 0x97, 0x60, 0xa5, 0xc5, 0xbc, 0x2f, 0x29, 0x27, 0xaf, 0x1d, 0x76,
	0x1e, 0xf9, 0x5d, 0x72, 0x4b, 0xf0, 0x42, 0x41, 0x33, 0x09, 0x1e, 0x1e, 0x8c, 0x7d, 0xb8, 0x2b,
	0x5d, 0x1f, 0xc4, 0xc3, 0x0e, 0x89, 0x94, 0x4e, 0x4b, 0x08, 0xfb, 0x02, 0x41, 0x68, 0x62, 0x1c,
	0x86, 0x83, 0x6b, 0x8c, 0xa3, 0x30, 0x11, 0x4f, 0x09, 0xd3, 0x17, 0x8a, 0x7d, 0xbf, 0x85, 0x3d,
	0x38, 0xa9, 0xa3, 0xd6, 0xff, 0xb7, 0x0b, 0x98, 0xa1, 0x02, 0x77, 0x16, 0x9c, 0x75, 0x18, 0x89,
	0x46, 0xc4, 0x3d, 0x8b, 0xb9, 0xea, 0x7f, 0x85, 0xae, 0xdd, 0x86, 0xaa, 0x68, 0xfc, 0x32, 0x59,
	0x64, 0x9f, 0xa8, 0x08, 0x00, 0xe6, 0xca, 0x33, 0x28, 0x33, 0xee, 0xf0, 0x98, 0xa1, 0x25, 0xf7,
	0x8e, 0xb7, 0x64, 0x4d, 0xca, 0xa1, 0x65, 0x91, 0x2e, 0xf1, 0x47, 0xe4, 0x02, 0x09, 0x2c, 0x45,
	0x68, 0xec, 0xc1, 0x5d, 0x1a, 0x73, 0x9b, 0x8f, 0x6d, 0x24, 0x43, 0x2b, 0xe7, 0x2c, 0xa0, 0xc2,
	0xe7, 0x2f, 0x05, 0xc4, 0x78, 0x02, 0xf7, 0x15, 0x85, 0xe8, 0x50, 0x32, 0x78, 0x0b, 0xb2, 0x9f,
	0x23, 0x55, 0x9b, 0xb1, 0x2f, 0xb0, 0x14, 0x9a, 0xb0, 0x46, 0x95, 0x21, 0xb6, 0xba, 0x91, 0x28,
	0xe2, 0x55, 0x7a, 0x63, 0x64, 0x5b, 0x96, 0xc8, 0x0f, 0x61, 0x27, 0x7b, 0x21, 0x35, 0x35, 0x16,
	0x51, 0x4a, 0x2d, 0x75, 0x31, 0x39, 0x68, 0x3e, 0x85, 0x5a, 0xf6, 0xbe, 0xe7, 0x30, 0x3b, 0x66,
	0xc4, 0xad, 0x55, 0xf0, 0xee, 0x5a, 0xea, 0xee, 0x6b, 0x87, 0x5d, 0x32, 0xe2, 0x1a, 0xbf, 0x84,
	0x87, 0xd9, 0x7b, 0xe4, 0xea, 0x8a, 0x74, 0xb9, 0x3f, 0x22, 0xc8, 0x41, 0xa6, 0x4a, 0x15, 0x67,
	0xc3, 0xae, 0x9a, 0x0d, 0xeb, 0xd3, 0xb3, 0xe1, 0x34, 0xe0, 0x56, 0x3d, 0x25, 0xe1, 0xd5, 0x84,
	0x8d, 0xce, 0xc9, 0x1f, 0xdf, 0x26, 0x0b, 0x87, 0x77, 0x0d, 0x50, 0xdd, 0x62, 0x66, 0x6f, 0x04,
	0x95, 0xf1, 0x1a, 0xf6, 0xb3, 0xcc, 0xae, 0x1c, 0x7f, 0x40, 0x5c, 0x3b, 0x22, 0x0e, 0xa3, 0x81,
	0x3d, 0x64, 0x5e, 0x6d, 0x09, 0xdd, 0xbd, 0x93, 0x62, 0x75, 0x82, 0x54, 0x16, 0x12, 0xb5, 0x98,
	0x97, 0xce, 0xd2, 0x47, 0xf0, 0x70, 0x46, 0x26, 0xea, 0x8c, 0xfd, 0xe3, 0x1c, 0x0e, 0xbc, 0x34,
	0x9d, 0x1e, 0xd8, 0x98, 0xb0, 0x24, 0x70, 0x13, 0x09, 0x8b, 0x27, 0xb1, 0x0d, 0xc8, 0x27, 0x3b,
	0xd3, 0x12, 0x96, 0x25, 0xf8, 0xa5, 0xaa, 0x50, 0x13, 0x2a, 0x91, 0xcc, 0xd0, 0x48, 0x75, 0x52,
	0x7d, 0x36, 0x1e, 0xc1, 0xbd, 0xc9, 0x73, 0x2a, 0x4d, 0x97, 0x27, 0x50, 0x99, 0xa9, 0x3b, 0x00,
	0x62, 0x26, 0x8d, 0x93, 0x9d, 0xb4, 0xe2, 0x07, 0x2a, 0xdb, 0x1e, 0xc3, 0x8a, 0x1f, 0xa4, 0x13,
	0xac, 0x2c, 0xd3, 0xd8, 0x0f, 0x92, 0x59, 0xb5, 0x0d, 0xd5, 0x9b, 0xb8, 0xc8, 0x14, 0xac, 0x78,
	0x93, 0x08, 0x6c, 0x43, 0x95, 0x8f, 0x6d, 0x1a, 0xf9, 0x9e, 0x1f, 0x60, 0x8e, 0x55, 0xad, 0x0a,
	0x1f, 0x9f, 0xe1, 0xd9, 0x68, 0xc0, 0x12, 0x6e, 0x68, 0xaa, 0x5b, 0x57, 0xf1, 0x2e, 0x20, 0x48,
	0x36, 0xec, 0x26, 0x2c, 0xe2, 0x1e, 0xc7, 0xc7, 0x18, 0xf0, 0xa5, 0xe3, 0x8d, 0x23, 0x51, 0xbb,
	0x47, 0xca, 0x8b, 0xe7, 0x64, 0x30, 0x78, 0x25, 0xa8, 0xad, 0xb2, 0x20, 0x4b, 0x75, 0x81, 0xa5,
	0xe2, 0x2e, 0xf3, 0x31, 0x1c, 0x14, 0xc7, 0x45, 0x87, 0xef, 0x27, 0xb0, 0x2a, 0xe6, 0x40, 0x87,
	0x46, 0xfc, 0x82, 0xc7, 0xdd, 0xfe, 0x4f, 0x87, 0xcc, 0x9b, 0xb5, 0x8e, 0x60, 0x97, 0x91, 0x86,
	0xa8, 0x75, 0x44, 0x40, 0x72, 0x46, 0xed, 0x36, 0x4e, 0x88, 0x34, 0x63, 0x2d, 0xf5, 0x37, 0x72,
	0xd0, 0x5a, 0xe4, 0x2a, 0x0e, 0x5c, 0xa4, 0x21, 0xee, 0x7f, 0x21, 0x59, 0x66, 0x82, 0xe0, 0x65,
	0x3b, 0x72, 0xed, 0x51, 0xb9, 0xb2, 0x2c, 0xa1, 0x6a, 0x17, 0x4a, 0x2b, 0x58, 0xc7, 0x09, 0x38,
	0xa5, 0x42, 0x72, 0xaf, 0xdc, 0xd2, 0x0b, 0x95, 0xe5, 0x70, 0xf2, 0x46, 0xee, 0xd3, 0x27, 0x62,
	0x9d, 0x2e, 0x54, 0xf4, 0x73, 0x30, 0xa6, 0x97, 0x6f, 0x54, 0x58, 0x87, 0x35, 0xcb, 0xeb, 0xc5,
	0xbc, 0xe8, 0x25, 0xd6, 0xfd, 0x28, 0x03, 0xcf, 0x1b, 0x7f, 0xf9, 0xda, 0x68, 0x9d, 0x87, 0xb8,
	0xe3, 0x89, 0x98, 0xab, 0x48, 0x63, 0x06, 0x17, 0x2a, 0xfb, 0x0c, 0xe4, 0x50, 0xb3, 0xe5, 0x4a,
	0x22, 0xb5, 0xbc, 0x2f, 0xb5, 0xc4, 0x9b, 0x72, 0x23, 0x91, 0x8b, 0x08, 0x3e, 0xa7, 0x75, 0x7a,
	0x02, 0x8f, 0x8a, 0x52, 0x0c, 0xaf, 0x6b, 0xbd, 0xbe, 0xc2, 0x89, 0xf7, 0xdc, 0x75, 0x9f, 0x0f,
	0x06, 0xf4, 0xd7, 0xd2, 0xd1, 0x17, 0xb2, 0x11, 0x14, 0xe9, 0x66, 0x42, 0xa5, 0x13, 0xfb, 0x03,
	0x97, 0x44, 0xc2, 0x7d, 0x73, 0xa2, 0xa2, 0x26, 0xe7, 0xbc, 0x57, 0x84, 0x3c, 0xde, 0x5a, 0xfc,
	0x2f, 0xb0, 0x45, 0xc9, 0xd5, 0xe1, 0x7f, 0xa0, 0x81, 0xac, 0xb4, 0x02, 0xf6, 0x5a, 0x89, 0x11,
	0xac, 0x6b, 0x67, 0x89, 0x92, 0xb6, 0x48, 0xb7, 0xe7, 0x44, 0xde, 0xcc, 0xfd, 0x64, 0x17, 0x60,
	0x44, 0x39, 0x49, 0xa4, 0xfd, 0xbc, 0x55, 0x1d, 0x61, 0x78, 0xd3, 0x9b, 0xde, 0x5c, 0x71, 0x1f,
	0x68, 0xc0, 0x6e, 0xae, 0x5c, 0xad, 0x58, 0x8c, 0xb5, 0x28, 0x09, 0x5e, 0x3b, 0xec, 0xff, 0xa5,
	0x97, 0xac, 0xbf, 0x29, 0xb1, 0x5a, 0xad, 0x3f, 0x94, 0x90, 0xe0, 0x32, 0x64, 0x24, 0xe2, 0x2f,
	0xf5, 0x8b, 0xf0, 0x09, 0x21, 0xe7, 0xe2, 0x35, 0xb8, 0xb8, 0x04, 0xdf, 0xc0, 0x7a, 0xde, 0x7b,
	0xb3, 0x0c, 0xe2, 0xd2, 0x71, 0x4d, 0xe6, 0xf7, 0x34, 0x47, 0xeb, 0x41, 0x77, 0x5a, 0x4a, 0x5a,
	0xe7, 0xc7, 0xf0, 0xf1, 0x2c, 0x95, 0x26, 0xba, 0x1f, 0xff, 0xe9, 0x2e, 0xcc, 0xb5, 0x98, 0x67,
	0x5c, 0xc0, 0xea, 0xf4, 0xcb, 0x84, 0x29, 0x15, 0xc8, 0x5b, 0xbf, 0xcd, 0x83, 0x62, 0x9c, 0x5e,
	0xcd, 0xcf, 0xe1, 0xfe, 0xd4, 0x5b, 0xdc, 0x56, 0xfa, 0x5e, 0x02, 0x65, 0xee, 0x17, 0xa2, 0x34,
	0xc7, 0x0e, 0x6c, 0x14, 0xac, 0xf2, 0x0d, 0x7d, 0x39, 0x9f, 0xc0, 0x7c, 0x72, 0x0b, 0x81, 0x96,
	0xf1, 0x23, 0xb8, 0x9b, 0xda, 0xca, 0xd7, 0xf5, 0xc5, 0x24, 0xd8, 0xdc, 0xcd, 0x05, 0x6b, 0x2e,
	0x3d, 0xa8, 0x15, 0xee, 0xc6, 0xfb, 0xa9, 0xab, 0x79, 0x24, 0xe6, 0x77, 0x6e, 0x25, 0xd1, 0x92,
	0x5c, 0x30, 0x8b, 0x1b, 0x5b, 0xc2, 0xdf, 0xd9, 0x66, 0x6b, 0x7e, 0x52, 0x20, 0x23, 0xaf, 0x31,
	0x1a, 0x04, 0x36, 0x8b, 0x36, 0xa7, 0xbd, 0xd9, 0x7c, 0xda, 0x63, 0xf3, 0xf0, 0x36, 0x0a, 0x2d,
	0xe6, 0x4b, 0x30, 0x72, 0x1a, 0xcf, 0x76, 0xe6, 0x7e, 0x12, 0x69, 0x3e, 0x9c, 0x81, 0xd4, 0x7c,
	0x2f, 0x60, 0x75, 0xba, 0x6f, 0x98, 0x99, 0x9b, 0x09, 0x5c, 0x22, 0xbf, 0x0b, 0x0b, 0x5f, 0xe4,
	0xf7, 0xd4, 0x07, 0x92, 0x1b, 0x7f, 0x67, 0x51, 0x89, 0xfc, 0x2e, 0xfa, 0xf6, 0x61, 0xb4, 0x60,
	0x25, 0xfb, 0x79, 0xa8, 0xa6, 0x6f, 0x65, 0x30, 0xe6, 0x5e, 0x11, 0x46, 0xb3, 0xfb, 0x1c, 0xee,
	0x65, 0x16, 0xa6, 0xcd, 0x9b, 0x1a, 0x4b, 0x21, 0xcc, 0x46, 0x01, 0x22, 0x59, 0x7a, 0x05, 0x1b,
	0x46, 0x23, 0x63, 0x57, 0x96, 0x20, 0x51, 0x7a, 0xb3, 0xb7, 0x02, 0xe3, 0xe7, 0xb0, 0x96, 0x3b,
	0x7a, 0x77, 0x93, 0x9d, 0x61, 0x0a, 0x6d, 0x3e, 0x9a, 0x89, 0x4e, 0xa6, 0x70, 0xd1, 0x64, 0xdd,
	0xcb, 0x34, 0x87, 0x69, 0x19, 0x87, 0xb7, 0x51, 0x24, 0x8d, 0xc8, 0xfd, 0x6a, 0x79, 0x63, 0x44,
	0x1e, 0x3a, 0x61, 0xc4, 0xac, 0x8f, 0x88, 0x46, 0x1f, 0xb6, 0x8a, 0x07, 0xcd, 0x41, 0xc2, 0xd1,
	0x05, 0x34, 0xe6, 0xd3, 0xdb, 0x69, 0x26, 0xc2, 0x5e, 0xbc, 0xfa, 0xe6, 0x5d, 0xbd, 0xf4, 0xed,
	0xbb, 0x7a, 0xe9, 0x1f, 0xef, 0xea, 0xa5, 0xdf, 0xbf, 0xaf, 0xdf, 0xf9, 0xf6, 0x7d, 0xfd, 0xce,
	0xdf, 0xde, 0xd7, 0xef, 0x7c, 0xf5, 0x89, 0xe7, 0xf3, 0x5e, 0xdc, 0x39, 0xea, 0xd2, 0x21, 0x7e,
	0xda, 0xfd, 0x2e, 0x72, 0xc0, 0xc7, 0x2e, 0x8d, 0x48, 0x73, 0xdc, 0x94, 0x5f, 0xae, 0xaf, 0x43,
	0xc2, 0x3a, 0x65, 0xfc, 0xa4, 0xfb, 0xbd, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x80, 0x46,
	0x45, 0xce, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// add to outbound tx tracker
	AddToOutTxTracker(ctx context.Context, in *MsgAddToOutTxTracker, opts ...grpc.CallOption) (*MsgAddToOutTxTrackerResponse, error)
	// add to inbound tx tracker
	AddToInTxTracker(ctx context.Context, in *MsgAddToInTxTracker, opts ...grpc.CallOption) (*MsgAddToInTxTrackerResponse, error)
	// remove from outbound tx tracker
	RemoveFromOutTxTracker(ctx context.Context, in *MsgRemoveFromOutTxTracker, opts ...grpc.CallOption) (*MsgRemoveFromOutTxTrackerResponse, error)
	// vote on gas price
	VoteGasPrice(ctx context.Context, in *MsgVoteGasPrice, opts ...grpc.CallOption) (*MsgVoteGasPriceResponse, error)
	// vote on observed outbound tx
	VoteOnObservedOutboundTx(ctx context.Context, in *MsgVoteOnObservedOutboundTx, opts ...grpc.CallOption) (*MsgVoteOnObservedOutboundTxResponse, error)
	// vote on observed inbound block
	VoteOnObservedInboundBlock(ctx context.Context, in *MsgVoteInboundBlock, opts ...grpc.CallOption) (*MsgVoteOnObservedInboundBlockResponse, error)
	// vote on observed inbound tx
	VoteOnObservedInboundTx(ctx context.Context, in *MsgVoteOnObservedInboundTx, opts ...grpc.CallOption) (*MsgVoteOnObservedInboundTxResponse, error)
	// vote on observer recharge pell token
	VoteOnPellRecharge(ctx context.Context, in *MsgVoteOnPellRecharge, opts ...grpc.CallOption) (*MsgVoteOnPellRechargeResponse, error)
	// vote on observer recharge gas token
	VoteOnGasRecharge(ctx context.Context, in *MsgVoteOnGasRecharge, opts ...grpc.CallOption) (*MsgVoteOnGasRechargeResponse, error)
	// update tss address
	UpdateTssAddress(ctx context.Context, in *MsgUpdateTssAddress, opts ...grpc.CallOption) (*MsgUpdateTssAddressResponse, error)
	// migrate tss funds
	MigrateTssFunds(ctx context.Context, in *MsgMigrateTssFunds, opts ...grpc.CallOption) (*MsgMigrateTssFundsResponse, error)
	// abort stuck xmsg
	AbortStuckXmsg(ctx context.Context, in *MsgAbortStuckXmsg, opts ...grpc.CallOption) (*MsgAbortStuckXmsgResponse, error)
	// update rate limiter flags
	UpdateRateLimiterFlags(ctx context.Context, in *MsgUpdateRateLimiterFlags, opts ...grpc.CallOption) (*MsgUpdateRateLimiterFlagsResponse, error)
	// add allowed xmsg sender
	AddAllowedXmsgSender(ctx context.Context, in *MsgAddAllowedXmsgSender, opts ...grpc.CallOption) (*MsgAddAllowedXmsgSenderResponse, error)
	// remove allowed xmsg sender
	RemoveAllowedXmsgSender(ctx context.Context, in *MsgRemoveAllowedXmsgSender, opts ...grpc.CallOption) (*MsgRemoveAllowedXmsgSenderResponse, error)
	// TODO: admin maintenance
	InboundTxMaintenance(ctx context.Context, in *MsgInboundTxMaintenance, opts ...grpc.CallOption) (*MsgInboundTxMaintenanceResponse, error)
	// UpsertCrosschainFeeParams upserts crosschain fee params
	UpsertCrosschainFeeParams(ctx context.Context, in *MsgUpsertCrosschainFeeParams, opts ...grpc.CallOption) (*MsgUpsertCrosschainFeeParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddToOutTxTracker(ctx context.Context, in *MsgAddToOutTxTracker, opts ...grpc.CallOption) (*MsgAddToOutTxTrackerResponse, error) {
	out := new(MsgAddToOutTxTrackerResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Msg/AddToOutTxTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddToInTxTracker(ctx context.Context, in *MsgAddToInTxTracker, opts ...grpc.CallOption) (*MsgAddToInTxTrackerResponse, error) {
	out := new(MsgAddToInTxTrackerResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Msg/AddToInTxTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveFromOutTxTracker(ctx context.Context, in *MsgRemoveFromOutTxTracker, opts ...grpc.CallOption) (*MsgRemoveFromOutTxTrackerResponse, error) {
	out := new(MsgRemoveFromOutTxTrackerResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Msg/RemoveFromOutTxTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteGasPrice(ctx context.Context, in *MsgVoteGasPrice, opts ...grpc.CallOption) (*MsgVoteGasPriceResponse, error) {
	out := new(MsgVoteGasPriceResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Msg/VoteGasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteOnObservedOutboundTx(ctx context.Context, in *MsgVoteOnObservedOutboundTx, opts ...grpc.CallOption) (*MsgVoteOnObservedOutboundTxResponse, error) {
	out := new(MsgVoteOnObservedOutboundTxResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Msg/VoteOnObservedOutboundTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteOnObservedInboundBlock(ctx context.Context, in *MsgVoteInboundBlock, opts ...grpc.CallOption) (*MsgVoteOnObservedInboundBlockResponse, error) {
	out := new(MsgVoteOnObservedInboundBlockResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Msg/VoteOnObservedInboundBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteOnObservedInboundTx(ctx context.Context, in *MsgVoteOnObservedInboundTx, opts ...grpc.CallOption) (*MsgVoteOnObservedInboundTxResponse, error) {
	out := new(MsgVoteOnObservedInboundTxResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Msg/VoteOnObservedInboundTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteOnPellRecharge(ctx context.Context, in *MsgVoteOnPellRecharge, opts ...grpc.CallOption) (*MsgVoteOnPellRechargeResponse, error) {
	out := new(MsgVoteOnPellRechargeResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Msg/VoteOnPellRecharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteOnGasRecharge(ctx context.Context, in *MsgVoteOnGasRecharge, opts ...grpc.CallOption) (*MsgVoteOnGasRechargeResponse, error) {
	out := new(MsgVoteOnGasRechargeResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Msg/VoteOnGasRecharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTssAddress(ctx context.Context, in *MsgUpdateTssAddress, opts ...grpc.CallOption) (*MsgUpdateTssAddressResponse, error) {
	out := new(MsgUpdateTssAddressResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Msg/UpdateTssAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MigrateTssFunds(ctx context.Context, in *MsgMigrateTssFunds, opts ...grpc.CallOption) (*MsgMigrateTssFundsResponse, error) {
	out := new(MsgMigrateTssFundsResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Msg/MigrateTssFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AbortStuckXmsg(ctx context.Context, in *MsgAbortStuckXmsg, opts ...grpc.CallOption) (*MsgAbortStuckXmsgResponse, error) {
	out := new(MsgAbortStuckXmsgResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Msg/AbortStuckXmsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRateLimiterFlags(ctx context.Context, in *MsgUpdateRateLimiterFlags, opts ...grpc.CallOption) (*MsgUpdateRateLimiterFlagsResponse, error) {
	out := new(MsgUpdateRateLimiterFlagsResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Msg/UpdateRateLimiterFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddAllowedXmsgSender(ctx context.Context, in *MsgAddAllowedXmsgSender, opts ...grpc.CallOption) (*MsgAddAllowedXmsgSenderResponse, error) {
	out := new(MsgAddAllowedXmsgSenderResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Msg/AddAllowedXmsgSender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveAllowedXmsgSender(ctx context.Context, in *MsgRemoveAllowedXmsgSender, opts ...grpc.CallOption) (*MsgRemoveAllowedXmsgSenderResponse, error) {
	out := new(MsgRemoveAllowedXmsgSenderResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Msg/RemoveAllowedXmsgSender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InboundTxMaintenance(ctx context.Context, in *MsgInboundTxMaintenance, opts ...grpc.CallOption) (*MsgInboundTxMaintenanceResponse, error) {
	out := new(MsgInboundTxMaintenanceResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Msg/InboundTxMaintenance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpsertCrosschainFeeParams(ctx context.Context, in *MsgUpsertCrosschainFeeParams, opts ...grpc.CallOption) (*MsgUpsertCrosschainFeeParamsResponse, error) {
	out := new(MsgUpsertCrosschainFeeParamsResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Msg/UpsertCrosschainFeeParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// add to outbound tx tracker
	AddToOutTxTracker(context.Context, *MsgAddToOutTxTracker) (*MsgAddToOutTxTrackerResponse, error)
	// add to inbound tx tracker
	AddToInTxTracker(context.Context, *MsgAddToInTxTracker) (*MsgAddToInTxTrackerResponse, error)
	// remove from outbound tx tracker
	RemoveFromOutTxTracker(context.Context, *MsgRemoveFromOutTxTracker) (*MsgRemoveFromOutTxTrackerResponse, error)
	// vote on gas price
	VoteGasPrice(context.Context, *MsgVoteGasPrice) (*MsgVoteGasPriceResponse, error)
	// vote on observed outbound tx
	VoteOnObservedOutboundTx(context.Context, *MsgVoteOnObservedOutboundTx) (*MsgVoteOnObservedOutboundTxResponse, error)
	// vote on observed inbound block
	VoteOnObservedInboundBlock(context.Context, *MsgVoteInboundBlock) (*MsgVoteOnObservedInboundBlockResponse, error)
	// vote on observed inbound tx
	VoteOnObservedInboundTx(context.Context, *MsgVoteOnObservedInboundTx) (*MsgVoteOnObservedInboundTxResponse, error)
	// vote on observer recharge pell token
	VoteOnPellRecharge(context.Context, *MsgVoteOnPellRecharge) (*MsgVoteOnPellRechargeResponse, error)
	// vote on observer recharge gas token
	VoteOnGasRecharge(context.Context, *MsgVoteOnGasRecharge) (*MsgVoteOnGasRechargeResponse, error)
	// update tss address
	UpdateTssAddress(context.Context, *MsgUpdateTssAddress) (*MsgUpdateTssAddressResponse, error)
	// migrate tss funds
	MigrateTssFunds(context.Context, *MsgMigrateTssFunds) (*MsgMigrateTssFundsResponse, error)
	// abort stuck xmsg
	AbortStuckXmsg(context.Context, *MsgAbortStuckXmsg) (*MsgAbortStuckXmsgResponse, error)
	// update rate limiter flags
	UpdateRateLimiterFlags(context.Context, *MsgUpdateRateLimiterFlags) (*MsgUpdateRateLimiterFlagsResponse, error)
	// add allowed xmsg sender
	AddAllowedXmsgSender(context.Context, *MsgAddAllowedXmsgSender) (*MsgAddAllowedXmsgSenderResponse, error)
	// remove allowed xmsg sender
	RemoveAllowedXmsgSender(context.Context, *MsgRemoveAllowedXmsgSender) (*MsgRemoveAllowedXmsgSenderResponse, error)
	// TODO: admin maintenance
	InboundTxMaintenance(context.Context, *MsgInboundTxMaintenance) (*MsgInboundTxMaintenanceResponse, error)
	// UpsertCrosschainFeeParams upserts crosschain fee params
	UpsertCrosschainFeeParams(context.Context, *MsgUpsertCrosschainFeeParams) (*MsgUpsertCrosschainFeeParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddToOutTxTracker(ctx context.Context, req *MsgAddToOutTxTracker) (*MsgAddToOutTxTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToOutTxTracker not implemented")
}
func (*UnimplementedMsgServer) AddToInTxTracker(ctx context.Context, req *MsgAddToInTxTracker) (*MsgAddToInTxTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToInTxTracker not implemented")
}
func (*UnimplementedMsgServer) RemoveFromOutTxTracker(ctx context.Context, req *MsgRemoveFromOutTxTracker) (*MsgRemoveFromOutTxTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromOutTxTracker not implemented")
}
func (*UnimplementedMsgServer) VoteGasPrice(ctx context.Context, req *MsgVoteGasPrice) (*MsgVoteGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteGasPrice not implemented")
}
func (*UnimplementedMsgServer) VoteOnObservedOutboundTx(ctx context.Context, req *MsgVoteOnObservedOutboundTx) (*MsgVoteOnObservedOutboundTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteOnObservedOutboundTx not implemented")
}
func (*UnimplementedMsgServer) VoteOnObservedInboundBlock(ctx context.Context, req *MsgVoteInboundBlock) (*MsgVoteOnObservedInboundBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteOnObservedInboundBlock not implemented")
}
func (*UnimplementedMsgServer) VoteOnObservedInboundTx(ctx context.Context, req *MsgVoteOnObservedInboundTx) (*MsgVoteOnObservedInboundTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteOnObservedInboundTx not implemented")
}
func (*UnimplementedMsgServer) VoteOnPellRecharge(ctx context.Context, req *MsgVoteOnPellRecharge) (*MsgVoteOnPellRechargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteOnPellRecharge not implemented")
}
func (*UnimplementedMsgServer) VoteOnGasRecharge(ctx context.Context, req *MsgVoteOnGasRecharge) (*MsgVoteOnGasRechargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteOnGasRecharge not implemented")
}
func (*UnimplementedMsgServer) UpdateTssAddress(ctx context.Context, req *MsgUpdateTssAddress) (*MsgUpdateTssAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTssAddress not implemented")
}
func (*UnimplementedMsgServer) MigrateTssFunds(ctx context.Context, req *MsgMigrateTssFunds) (*MsgMigrateTssFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateTssFunds not implemented")
}
func (*UnimplementedMsgServer) AbortStuckXmsg(ctx context.Context, req *MsgAbortStuckXmsg) (*MsgAbortStuckXmsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortStuckXmsg not implemented")
}
func (*UnimplementedMsgServer) UpdateRateLimiterFlags(ctx context.Context, req *MsgUpdateRateLimiterFlags) (*MsgUpdateRateLimiterFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRateLimiterFlags not implemented")
}
func (*UnimplementedMsgServer) AddAllowedXmsgSender(ctx context.Context, req *MsgAddAllowedXmsgSender) (*MsgAddAllowedXmsgSenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAllowedXmsgSender not implemented")
}
func (*UnimplementedMsgServer) RemoveAllowedXmsgSender(ctx context.Context, req *MsgRemoveAllowedXmsgSender) (*MsgRemoveAllowedXmsgSenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllowedXmsgSender not implemented")
}
func (*UnimplementedMsgServer) InboundTxMaintenance(ctx context.Context, req *MsgInboundTxMaintenance) (*MsgInboundTxMaintenanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboundTxMaintenance not implemented")
}
func (*UnimplementedMsgServer) UpsertCrosschainFeeParams(ctx context.Context, req *MsgUpsertCrosschainFeeParams) (*MsgUpsertCrosschainFeeParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCrosschainFeeParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddToOutTxTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddToOutTxTracker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddToOutTxTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Msg/AddToOutTxTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddToOutTxTracker(ctx, req.(*MsgAddToOutTxTracker))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddToInTxTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddToInTxTracker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddToInTxTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Msg/AddToInTxTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddToInTxTracker(ctx, req.(*MsgAddToInTxTracker))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveFromOutTxTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveFromOutTxTracker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveFromOutTxTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Msg/RemoveFromOutTxTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveFromOutTxTracker(ctx, req.(*MsgRemoveFromOutTxTracker))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteGasPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Msg/VoteGasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteGasPrice(ctx, req.(*MsgVoteGasPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteOnObservedOutboundTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteOnObservedOutboundTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteOnObservedOutboundTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Msg/VoteOnObservedOutboundTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteOnObservedOutboundTx(ctx, req.(*MsgVoteOnObservedOutboundTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteOnObservedInboundBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteInboundBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteOnObservedInboundBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Msg/VoteOnObservedInboundBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteOnObservedInboundBlock(ctx, req.(*MsgVoteInboundBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteOnObservedInboundTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteOnObservedInboundTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteOnObservedInboundTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Msg/VoteOnObservedInboundTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteOnObservedInboundTx(ctx, req.(*MsgVoteOnObservedInboundTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteOnPellRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteOnPellRecharge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteOnPellRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Msg/VoteOnPellRecharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteOnPellRecharge(ctx, req.(*MsgVoteOnPellRecharge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteOnGasRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteOnGasRecharge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteOnGasRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Msg/VoteOnGasRecharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteOnGasRecharge(ctx, req.(*MsgVoteOnGasRecharge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTssAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTssAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTssAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Msg/UpdateTssAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTssAddress(ctx, req.(*MsgUpdateTssAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MigrateTssFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMigrateTssFunds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MigrateTssFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Msg/MigrateTssFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MigrateTssFunds(ctx, req.(*MsgMigrateTssFunds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AbortStuckXmsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAbortStuckXmsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AbortStuckXmsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Msg/AbortStuckXmsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AbortStuckXmsg(ctx, req.(*MsgAbortStuckXmsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRateLimiterFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRateLimiterFlags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRateLimiterFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Msg/UpdateRateLimiterFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRateLimiterFlags(ctx, req.(*MsgUpdateRateLimiterFlags))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddAllowedXmsgSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAllowedXmsgSender)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAllowedXmsgSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Msg/AddAllowedXmsgSender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAllowedXmsgSender(ctx, req.(*MsgAddAllowedXmsgSender))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveAllowedXmsgSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveAllowedXmsgSender)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveAllowedXmsgSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Msg/RemoveAllowedXmsgSender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveAllowedXmsgSender(ctx, req.(*MsgRemoveAllowedXmsgSender))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InboundTxMaintenance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInboundTxMaintenance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InboundTxMaintenance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Msg/InboundTxMaintenance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InboundTxMaintenance(ctx, req.(*MsgInboundTxMaintenance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpsertCrosschainFeeParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpsertCrosschainFeeParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpsertCrosschainFeeParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Msg/UpsertCrosschainFeeParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpsertCrosschainFeeParams(ctx, req.(*MsgUpsertCrosschainFeeParams))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xmsg.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToOutTxTracker",
			Handler:    _Msg_AddToOutTxTracker_Handler,
		},
		{
			MethodName: "AddToInTxTracker",
			Handler:    _Msg_AddToInTxTracker_Handler,
		},
		{
			MethodName: "RemoveFromOutTxTracker",
			Handler:    _Msg_RemoveFromOutTxTracker_Handler,
		},
		{
			MethodName: "VoteGasPrice",
			Handler:    _Msg_VoteGasPrice_Handler,
		},
		{
			MethodName: "VoteOnObservedOutboundTx",
			Handler:    _Msg_VoteOnObservedOutboundTx_Handler,
		},
		{
			MethodName: "VoteOnObservedInboundBlock",
			Handler:    _Msg_VoteOnObservedInboundBlock_Handler,
		},
		{
			MethodName: "VoteOnObservedInboundTx",
			Handler:    _Msg_VoteOnObservedInboundTx_Handler,
		},
		{
			MethodName: "VoteOnPellRecharge",
			Handler:    _Msg_VoteOnPellRecharge_Handler,
		},
		{
			MethodName: "VoteOnGasRecharge",
			Handler:    _Msg_VoteOnGasRecharge_Handler,
		},
		{
			MethodName: "UpdateTssAddress",
			Handler:    _Msg_UpdateTssAddress_Handler,
		},
		{
			MethodName: "MigrateTssFunds",
			Handler:    _Msg_MigrateTssFunds_Handler,
		},
		{
			MethodName: "AbortStuckXmsg",
			Handler:    _Msg_AbortStuckXmsg_Handler,
		},
		{
			MethodName: "UpdateRateLimiterFlags",
			Handler:    _Msg_UpdateRateLimiterFlags_Handler,
		},
		{
			MethodName: "AddAllowedXmsgSender",
			Handler:    _Msg_AddAllowedXmsgSender_Handler,
		},
		{
			MethodName: "RemoveAllowedXmsgSender",
			Handler:    _Msg_RemoveAllowedXmsgSender_Handler,
		},
		{
			MethodName: "InboundTxMaintenance",
			Handler:    _Msg_InboundTxMaintenance_Handler,
		},
		{
			MethodName: "UpsertCrosschainFeeParams",
			Handler:    _Msg_UpsertCrosschainFeeParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xmsg/tx.proto",
}

func (m *MsgInboundTxMaintenance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInboundTxMaintenance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInboundTxMaintenance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ToBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ToBlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.FromBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FromBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInboundTxMaintenanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInboundTxMaintenanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInboundTxMaintenanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMigrateTssFunds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMigrateTssFunds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMigrateTssFunds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMigrateTssFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMigrateTssFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMigrateTssFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTssAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTssAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTssAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TssPubkey) > 0 {
		i -= len(m.TssPubkey)
		copy(dAtA[i:], m.TssPubkey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TssPubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTssAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTssAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTssAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddToInTxTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddToInTxTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddToInTxTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TxIndex))
		i--
		dAtA[i] = 0x38
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CoinType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddToInTxTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddToInTxTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddToInTxTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddToOutTxTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddToOutTxTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddToOutTxTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TxIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TxIndex))
		i--
		dAtA[i] = 0x30
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddToOutTxTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddToOutTxTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddToOutTxTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRemoved {
		i--
		if m.IsRemoved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveFromOutTxTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveFromOutTxTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveFromOutTxTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveFromOutTxTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveFromOutTxTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveFromOutTxTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteGasPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteGasPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteGasPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Supply) > 0 {
		i -= len(m.Supply)
		copy(dAtA[i:], m.Supply)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Supply)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.Price != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteGasPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteGasPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteGasPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteOnObservedOutboundTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOnObservedOutboundTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOnObservedOutboundTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObservedOutTxFailedReasonMsg) > 0 {
		i -= len(m.ObservedOutTxFailedReasonMsg)
		copy(dAtA[i:], m.ObservedOutTxFailedReasonMsg)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObservedOutTxFailedReasonMsg)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ObservedOutTxEffectiveGasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ObservedOutTxEffectiveGasLimit))
		i--
		dAtA[i] = 0x50
	}
	{
		size := m.ObservedOutTxEffectiveGasPrice.Size()
		i -= size
		if _, err := m.ObservedOutTxEffectiveGasPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.ObservedOutTxGasUsed != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ObservedOutTxGasUsed))
		i--
		dAtA[i] = 0x40
	}
	if m.ObservedOutTxBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ObservedOutTxBlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ObservedOutTxHash) > 0 {
		i -= len(m.ObservedOutTxHash)
		copy(dAtA[i:], m.ObservedOutTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObservedOutTxHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.OutTxTssNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutTxTssNonce))
		i--
		dAtA[i] = 0x28
	}
	if m.OutTxChain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutTxChain))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.XmsgHash) > 0 {
		i -= len(m.XmsgHash)
		copy(dAtA[i:], m.XmsgHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.XmsgHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteOnObservedOutboundTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOnObservedOutboundTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOnObservedOutboundTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteOnObservedInboundTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOnObservedInboundTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOnObservedInboundTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PellTx != nil {
		{
			size, err := m.PellTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.EventIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EventIndex))
		i--
		dAtA[i] = 0x48
	}
	if len(m.TxOrigin) > 0 {
		i -= len(m.TxOrigin)
		copy(dAtA[i:], m.TxOrigin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxOrigin)))
		i--
		dAtA[i] = 0x42
	}
	if m.GasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x38
	}
	if m.InBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.InBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.InTxHash) > 0 {
		i -= len(m.InTxHash)
		copy(dAtA[i:], m.InTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InTxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ReceiverChain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ReceiverChain))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SenderChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SenderChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteOnObservedInboundTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOnObservedInboundTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOnObservedInboundTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAbortStuckXmsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAbortStuckXmsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAbortStuckXmsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.XmsgIndex) > 0 {
		i -= len(m.XmsgIndex)
		copy(dAtA[i:], m.XmsgIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.XmsgIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAbortStuckXmsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAbortStuckXmsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAbortStuckXmsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRefundAbortedXmsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRefundAbortedXmsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRefundAbortedXmsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RefundAddress) > 0 {
		i -= len(m.RefundAddress)
		copy(dAtA[i:], m.RefundAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RefundAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.XmsgIndex) > 0 {
		i -= len(m.XmsgIndex)
		copy(dAtA[i:], m.XmsgIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.XmsgIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRefundAbortedXmsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRefundAbortedXmsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRefundAbortedXmsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRateLimiterFlags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRateLimiterFlags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRateLimiterFlags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RateLimiterFlags.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRateLimiterFlagsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRateLimiterFlagsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRateLimiterFlagsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteInboundBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteInboundBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteInboundBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockProof != nil {
		{
			size, err := m.BlockProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteOnObservedInboundBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOnObservedInboundBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOnObservedInboundBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddAllowedXmsgSender) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAllowedXmsgSender) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAllowedXmsgSender) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Builders) > 0 {
		for iNdEx := len(m.Builders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Builders[iNdEx])
			copy(dAtA[i:], m.Builders[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Builders[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddAllowedXmsgSenderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAllowedXmsgSenderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAllowedXmsgSenderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveAllowedXmsgSender) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveAllowedXmsgSender) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveAllowedXmsgSender) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Builders) > 0 {
		for iNdEx := len(m.Builders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Builders[iNdEx])
			copy(dAtA[i:], m.Builders[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Builders[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveAllowedXmsgSenderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveAllowedXmsgSenderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveAllowedXmsgSenderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteOnPellRecharge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOnPellRecharge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOnPellRecharge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.VoteIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VoteIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteOnPellRechargeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOnPellRechargeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOnPellRechargeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteOnGasRecharge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOnGasRecharge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOnGasRecharge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.VoteIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VoteIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteOnGasRechargeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOnGasRechargeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOnGasRechargeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpsertCrosschainFeeParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpsertCrosschainFeeParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpsertCrosschainFeeParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CrosschainFeeParams) > 0 {
		for iNdEx := len(m.CrosschainFeeParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainFeeParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpsertCrosschainFeeParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpsertCrosschainFeeParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpsertCrosschainFeeParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgInboundTxMaintenance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	if m.FromBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.FromBlockHeight))
	}
	if m.ToBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.ToBlockHeight))
	}
	return n
}

func (m *MsgInboundTxMaintenanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMigrateTssFunds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgMigrateTssFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateTssAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TssPubkey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateTssAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddToInTxTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CoinType != 0 {
		n += 1 + sovTx(uint64(m.CoinType))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TxIndex != 0 {
		n += 1 + sovTx(uint64(m.TxIndex))
	}
	return n
}

func (m *MsgAddToInTxTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddToOutTxTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TxIndex != 0 {
		n += 1 + sovTx(uint64(m.TxIndex))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddToOutTxTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsRemoved {
		n += 2
	}
	return n
}

func (m *MsgRemoveFromOutTxTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	return n
}

func (m *MsgRemoveFromOutTxTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteGasPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	if m.Price != 0 {
		n += 1 + sovTx(uint64(m.Price))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovTx(uint64(m.BlockNumber))
	}
	l = len(m.Supply)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVoteGasPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteOnObservedOutboundTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.XmsgHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	if m.OutTxChain != 0 {
		n += 1 + sovTx(uint64(m.OutTxChain))
	}
	if m.OutTxTssNonce != 0 {
		n += 1 + sovTx(uint64(m.OutTxTssNonce))
	}
	l = len(m.ObservedOutTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ObservedOutTxBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.ObservedOutTxBlockHeight))
	}
	if m.ObservedOutTxGasUsed != 0 {
		n += 1 + sovTx(uint64(m.ObservedOutTxGasUsed))
	}
	l = m.ObservedOutTxEffectiveGasPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.ObservedOutTxEffectiveGasLimit != 0 {
		n += 1 + sovTx(uint64(m.ObservedOutTxEffectiveGasLimit))
	}
	l = len(m.ObservedOutTxFailedReasonMsg)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVoteOnObservedOutboundTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteOnObservedInboundTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SenderChainId != 0 {
		n += 1 + sovTx(uint64(m.SenderChainId))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ReceiverChain != 0 {
		n += 1 + sovTx(uint64(m.ReceiverChain))
	}
	l = len(m.InTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.InBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.InBlockHeight))
	}
	if m.GasLimit != 0 {
		n += 1 + sovTx(uint64(m.GasLimit))
	}
	l = len(m.TxOrigin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EventIndex != 0 {
		n += 1 + sovTx(uint64(m.EventIndex))
	}
	if m.PellTx != nil {
		l = m.PellTx.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVoteOnObservedInboundTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAbortStuckXmsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.XmsgIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAbortStuckXmsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRefundAbortedXmsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.XmsgIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RefundAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRefundAbortedXmsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRateLimiterFlags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.RateLimiterFlags.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateRateLimiterFlagsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteInboundBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BlockProof != nil {
		l = m.BlockProof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVoteOnObservedInboundBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddAllowedXmsgSender) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Builders) > 0 {
		for _, s := range m.Builders {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddAllowedXmsgSenderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveAllowedXmsgSender) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Builders) > 0 {
		for _, s := range m.Builders {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRemoveAllowedXmsgSenderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteOnPellRecharge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	if m.VoteIndex != 0 {
		n += 1 + sovTx(uint64(m.VoteIndex))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVoteOnPellRechargeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteOnGasRecharge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	if m.VoteIndex != 0 {
		n += 1 + sovTx(uint64(m.VoteIndex))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVoteOnGasRechargeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpsertCrosschainFeeParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.CrosschainFeeParams) > 0 {
		for _, e := range m.CrosschainFeeParams {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpsertCrosschainFeeParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgInboundTxMaintenance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInboundTxMaintenance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInboundTxMaintenance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromBlockHeight", wireType)
			}
			m.FromBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToBlockHeight", wireType)
			}
			m.ToBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInboundTxMaintenanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInboundTxMaintenanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInboundTxMaintenanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMigrateTssFunds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMigrateTssFunds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMigrateTssFunds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMigrateTssFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMigrateTssFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMigrateTssFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTssAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTssAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTssAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TssPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TssPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTssAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTssAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTssAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddToInTxTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddToInTxTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddToInTxTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= coin.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &proofs.Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIndex", wireType)
			}
			m.TxIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddToInTxTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddToInTxTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddToInTxTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddToOutTxTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddToOutTxTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddToOutTxTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &proofs.Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIndex", wireType)
			}
			m.TxIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddToOutTxTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddToOutTxTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddToOutTxTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRemoved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRemoved = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveFromOutTxTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveFromOutTxTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveFromOutTxTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveFromOutTxTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveFromOutTxTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveFromOutTxTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteGasPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteGasPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteGasPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Supply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteGasPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteGasPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteGasPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOnObservedOutboundTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOnObservedOutboundTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOnObservedOutboundTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XmsgHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XmsgHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= chains.ReceiveStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxChain", wireType)
			}
			m.OutTxChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutTxChain |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxTssNonce", wireType)
			}
			m.OutTxTssNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutTxTssNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservedOutTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutTxBlockHeight", wireType)
			}
			m.ObservedOutTxBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedOutTxBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutTxGasUsed", wireType)
			}
			m.ObservedOutTxGasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedOutTxGasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutTxEffectiveGasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObservedOutTxEffectiveGasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutTxEffectiveGasLimit", wireType)
			}
			m.ObservedOutTxEffectiveGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedOutTxEffectiveGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutTxFailedReasonMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservedOutTxFailedReasonMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOnObservedOutboundTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOnObservedOutboundTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOnObservedOutboundTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOnObservedInboundTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOnObservedInboundTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOnObservedInboundTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderChainId", wireType)
			}
			m.SenderChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChain", wireType)
			}
			m.ReceiverChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverChain |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InBlockHeight", wireType)
			}
			m.InBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOrigin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOrigin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventIndex", wireType)
			}
			m.EventIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PellTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PellTx == nil {
				m.PellTx = &InboundPellEvent{}
			}
			if err := m.PellTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOnObservedInboundTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOnObservedInboundTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOnObservedInboundTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAbortStuckXmsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAbortStuckXmsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAbortStuckXmsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XmsgIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XmsgIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAbortStuckXmsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAbortStuckXmsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAbortStuckXmsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRefundAbortedXmsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRefundAbortedXmsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRefundAbortedXmsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XmsgIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XmsgIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRefundAbortedXmsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRefundAbortedXmsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRefundAbortedXmsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRateLimiterFlags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRateLimiterFlags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRateLimiterFlags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiterFlags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RateLimiterFlags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRateLimiterFlagsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRateLimiterFlagsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRateLimiterFlagsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteInboundBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteInboundBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteInboundBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockProof == nil {
				m.BlockProof = &BlockProof{}
			}
			if err := m.BlockProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOnObservedInboundBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOnObservedInboundBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOnObservedInboundBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAllowedXmsgSender) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAllowedXmsgSender: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAllowedXmsgSender: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Builders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Builders = append(m.Builders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAllowedXmsgSenderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAllowedXmsgSenderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAllowedXmsgSenderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveAllowedXmsgSender) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveAllowedXmsgSender: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveAllowedXmsgSender: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Builders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Builders = append(m.Builders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveAllowedXmsgSenderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveAllowedXmsgSenderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveAllowedXmsgSenderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOnPellRecharge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOnPellRecharge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOnPellRecharge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteIndex", wireType)
			}
			m.VoteIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOnPellRechargeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOnPellRechargeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOnPellRechargeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOnGasRecharge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOnGasRecharge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOnGasRecharge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteIndex", wireType)
			}
			m.VoteIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOnGasRechargeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOnGasRechargeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOnGasRechargeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpsertCrosschainFeeParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpsertCrosschainFeeParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpsertCrosschainFeeParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainFeeParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainFeeParams = append(m.CrosschainFeeParams, &CrosschainFeeParam{})
			if err := m.CrosschainFeeParams[len(m.CrosschainFeeParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpsertCrosschainFeeParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpsertCrosschainFeeParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpsertCrosschainFeeParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
