// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xmsg/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryCrosschainFeeParamsRequest is the request type for the
// Query/CrosschainFeeParams.
type QueryCrosschainFeeParamsRequest struct {
}

func (m *QueryCrosschainFeeParamsRequest) Reset()         { *m = QueryCrosschainFeeParamsRequest{} }
func (m *QueryCrosschainFeeParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCrosschainFeeParamsRequest) ProtoMessage()    {}
func (*QueryCrosschainFeeParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{0}
}
func (m *QueryCrosschainFeeParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCrosschainFeeParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCrosschainFeeParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCrosschainFeeParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCrosschainFeeParamsRequest.Merge(m, src)
}
func (m *QueryCrosschainFeeParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCrosschainFeeParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCrosschainFeeParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCrosschainFeeParamsRequest proto.InternalMessageInfo

// QueryCrosschainFeeParamsResponse is the response type for the
// Query/CrosschainFeeParams.
type QueryCrosschainFeeParamsResponse struct {
	CrosschainFeeParams []*CrosschainFeeParam `protobuf:"bytes,1,rep,name=crosschain_fee_params,json=crosschainFeeParams,proto3" json:"crosschain_fee_params,omitempty"`
}

func (m *QueryCrosschainFeeParamsResponse) Reset()         { *m = QueryCrosschainFeeParamsResponse{} }
func (m *QueryCrosschainFeeParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCrosschainFeeParamsResponse) ProtoMessage()    {}
func (*QueryCrosschainFeeParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{1}
}
func (m *QueryCrosschainFeeParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCrosschainFeeParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCrosschainFeeParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCrosschainFeeParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCrosschainFeeParamsResponse.Merge(m, src)
}
func (m *QueryCrosschainFeeParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCrosschainFeeParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCrosschainFeeParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCrosschainFeeParamsResponse proto.InternalMessageInfo

func (m *QueryCrosschainFeeParamsResponse) GetCrosschainFeeParams() []*CrosschainFeeParam {
	if m != nil {
		return m.CrosschainFeeParams
	}
	return nil
}

// QueryCrosschainFeeParamByChainIdRequest is the request type for the
// Query/CrosschainFeeParamByChainId.
type QueryCrosschainFeeParamByChainIdRequest struct {
	ChainId int64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryCrosschainFeeParamByChainIdRequest) Reset() {
	*m = QueryCrosschainFeeParamByChainIdRequest{}
}
func (m *QueryCrosschainFeeParamByChainIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCrosschainFeeParamByChainIdRequest) ProtoMessage()    {}
func (*QueryCrosschainFeeParamByChainIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{2}
}
func (m *QueryCrosschainFeeParamByChainIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCrosschainFeeParamByChainIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCrosschainFeeParamByChainIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCrosschainFeeParamByChainIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCrosschainFeeParamByChainIdRequest.Merge(m, src)
}
func (m *QueryCrosschainFeeParamByChainIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCrosschainFeeParamByChainIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCrosschainFeeParamByChainIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCrosschainFeeParamByChainIdRequest proto.InternalMessageInfo

func (m *QueryCrosschainFeeParamByChainIdRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// QueryCrosschainFeeParamByChainIdResponse is the response type for the
// Query/CrosschainFeeParamByChainId.
type QueryCrosschainFeeParamByChainIdResponse struct {
	CrosschainFeeParam *CrosschainFeeParam `protobuf:"bytes,1,opt,name=crosschain_fee_param,json=crosschainFeeParam,proto3" json:"crosschain_fee_param,omitempty"`
}

func (m *QueryCrosschainFeeParamByChainIdResponse) Reset() {
	*m = QueryCrosschainFeeParamByChainIdResponse{}
}
func (m *QueryCrosschainFeeParamByChainIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCrosschainFeeParamByChainIdResponse) ProtoMessage()    {}
func (*QueryCrosschainFeeParamByChainIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{3}
}
func (m *QueryCrosschainFeeParamByChainIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCrosschainFeeParamByChainIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCrosschainFeeParamByChainIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCrosschainFeeParamByChainIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCrosschainFeeParamByChainIdResponse.Merge(m, src)
}
func (m *QueryCrosschainFeeParamByChainIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCrosschainFeeParamByChainIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCrosschainFeeParamByChainIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCrosschainFeeParamByChainIdResponse proto.InternalMessageInfo

func (m *QueryCrosschainFeeParamByChainIdResponse) GetCrosschainFeeParam() *CrosschainFeeParam {
	if m != nil {
		return m.CrosschainFeeParam
	}
	return nil
}

// QueryListXmsgBuildersRequest is an empty message used to request the list of
// Xmsg builders
type QueryListAllowedXmsgSendersRequest struct {
}

func (m *QueryListAllowedXmsgSendersRequest) Reset()         { *m = QueryListAllowedXmsgSendersRequest{} }
func (m *QueryListAllowedXmsgSendersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListAllowedXmsgSendersRequest) ProtoMessage()    {}
func (*QueryListAllowedXmsgSendersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{4}
}
func (m *QueryListAllowedXmsgSendersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListAllowedXmsgSendersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListAllowedXmsgSendersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListAllowedXmsgSendersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListAllowedXmsgSendersRequest.Merge(m, src)
}
func (m *QueryListAllowedXmsgSendersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListAllowedXmsgSendersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListAllowedXmsgSendersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListAllowedXmsgSendersRequest proto.InternalMessageInfo

// QueryListAllowedXmsgSendersResponse contains the list of authorized Xmsg
// builder addresses
type QueryListAllowedXmsgSendersResponse struct {
	// builders is a list of authorized Xmsg builder addresses
	Builders []string `protobuf:"bytes,1,rep,name=builders,proto3" json:"builders,omitempty"`
}

func (m *QueryListAllowedXmsgSendersResponse) Reset()         { *m = QueryListAllowedXmsgSendersResponse{} }
func (m *QueryListAllowedXmsgSendersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListAllowedXmsgSendersResponse) ProtoMessage()    {}
func (*QueryListAllowedXmsgSendersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{5}
}
func (m *QueryListAllowedXmsgSendersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListAllowedXmsgSendersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListAllowedXmsgSendersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListAllowedXmsgSendersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListAllowedXmsgSendersResponse.Merge(m, src)
}
func (m *QueryListAllowedXmsgSendersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListAllowedXmsgSendersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListAllowedXmsgSendersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListAllowedXmsgSendersResponse proto.InternalMessageInfo

func (m *QueryListAllowedXmsgSendersResponse) GetBuilders() []string {
	if m != nil {
		return m.Builders
	}
	return nil
}

// request of query out tx tracker
type QueryGetOutTxTrackerRequest struct {
	ChainId int64  `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce   uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryGetOutTxTrackerRequest) Reset()         { *m = QueryGetOutTxTrackerRequest{} }
func (m *QueryGetOutTxTrackerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOutTxTrackerRequest) ProtoMessage()    {}
func (*QueryGetOutTxTrackerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{6}
}
func (m *QueryGetOutTxTrackerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOutTxTrackerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOutTxTrackerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOutTxTrackerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOutTxTrackerRequest.Merge(m, src)
}
func (m *QueryGetOutTxTrackerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOutTxTrackerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOutTxTrackerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOutTxTrackerRequest proto.InternalMessageInfo

func (m *QueryGetOutTxTrackerRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryGetOutTxTrackerRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// response of query out tx tracker
type QueryOutTxTrackerResponse struct {
	OutTxTracker OutTxTracker `protobuf:"bytes,1,opt,name=out_tx_tracker,json=outTxTracker,proto3" json:"out_tx_tracker"`
}

func (m *QueryOutTxTrackerResponse) Reset()         { *m = QueryOutTxTrackerResponse{} }
func (m *QueryOutTxTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutTxTrackerResponse) ProtoMessage()    {}
func (*QueryOutTxTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{7}
}
func (m *QueryOutTxTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutTxTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutTxTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutTxTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutTxTrackerResponse.Merge(m, src)
}
func (m *QueryOutTxTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutTxTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutTxTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutTxTrackerResponse proto.InternalMessageInfo

func (m *QueryOutTxTrackerResponse) GetOutTxTracker() OutTxTracker {
	if m != nil {
		return m.OutTxTracker
	}
	return OutTxTracker{}
}

// request of query all out tx tracker
type QueryAllOutTxTrackerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutTxTrackerRequest) Reset()         { *m = QueryAllOutTxTrackerRequest{} }
func (m *QueryAllOutTxTrackerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutTxTrackerRequest) ProtoMessage()    {}
func (*QueryAllOutTxTrackerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{8}
}
func (m *QueryAllOutTxTrackerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutTxTrackerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutTxTrackerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutTxTrackerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutTxTrackerRequest.Merge(m, src)
}
func (m *QueryAllOutTxTrackerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutTxTrackerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutTxTrackerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutTxTrackerRequest proto.InternalMessageInfo

func (m *QueryAllOutTxTrackerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// response of query all out tx tracker
type QueryOutTxTrackerAllResponse struct {
	OutTxTracker []OutTxTracker      `protobuf:"bytes,1,rep,name=out_tx_tracker,json=outTxTracker,proto3" json:"out_tx_tracker"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOutTxTrackerAllResponse) Reset()         { *m = QueryOutTxTrackerAllResponse{} }
func (m *QueryOutTxTrackerAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutTxTrackerAllResponse) ProtoMessage()    {}
func (*QueryOutTxTrackerAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{9}
}
func (m *QueryOutTxTrackerAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutTxTrackerAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutTxTrackerAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutTxTrackerAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutTxTrackerAllResponse.Merge(m, src)
}
func (m *QueryOutTxTrackerAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutTxTrackerAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutTxTrackerAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutTxTrackerAllResponse proto.InternalMessageInfo

func (m *QueryOutTxTrackerAllResponse) GetOutTxTracker() []OutTxTracker {
	if m != nil {
		return m.OutTxTracker
	}
	return nil
}

func (m *QueryOutTxTrackerAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// request of query all out tx tracker by chain
type QueryAllOutTxTrackerByChainRequest struct {
	Chain      int64              `protobuf:"varint,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutTxTrackerByChainRequest) Reset()         { *m = QueryAllOutTxTrackerByChainRequest{} }
func (m *QueryAllOutTxTrackerByChainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutTxTrackerByChainRequest) ProtoMessage()    {}
func (*QueryAllOutTxTrackerByChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{10}
}
func (m *QueryAllOutTxTrackerByChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutTxTrackerByChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutTxTrackerByChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutTxTrackerByChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutTxTrackerByChainRequest.Merge(m, src)
}
func (m *QueryAllOutTxTrackerByChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutTxTrackerByChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutTxTrackerByChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutTxTrackerByChainRequest proto.InternalMessageInfo

func (m *QueryAllOutTxTrackerByChainRequest) GetChain() int64 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *QueryAllOutTxTrackerByChainRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// response of query all out tx tracker by chain
type QueryOutTxTrackerAllByChainResponse struct {
	OutTxTrackers []OutTxTracker      `protobuf:"bytes,1,rep,name=out_tx_trackers,json=outTxTrackers,proto3" json:"out_tx_trackers"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOutTxTrackerAllByChainResponse) Reset()         { *m = QueryOutTxTrackerAllByChainResponse{} }
func (m *QueryOutTxTrackerAllByChainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutTxTrackerAllByChainResponse) ProtoMessage()    {}
func (*QueryOutTxTrackerAllByChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{11}
}
func (m *QueryOutTxTrackerAllByChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutTxTrackerAllByChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutTxTrackerAllByChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutTxTrackerAllByChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutTxTrackerAllByChainResponse.Merge(m, src)
}
func (m *QueryOutTxTrackerAllByChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutTxTrackerAllByChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutTxTrackerAllByChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutTxTrackerAllByChainResponse proto.InternalMessageInfo

func (m *QueryOutTxTrackerAllByChainResponse) GetOutTxTrackers() []OutTxTracker {
	if m != nil {
		return m.OutTxTrackers
	}
	return nil
}

func (m *QueryOutTxTrackerAllByChainResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// request of query all in tx tracker by chain
type QueryAllInTxTrackerByChainRequest struct {
	ChainId    int64              `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInTxTrackerByChainRequest) Reset()         { *m = QueryAllInTxTrackerByChainRequest{} }
func (m *QueryAllInTxTrackerByChainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInTxTrackerByChainRequest) ProtoMessage()    {}
func (*QueryAllInTxTrackerByChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{12}
}
func (m *QueryAllInTxTrackerByChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInTxTrackerByChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInTxTrackerByChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInTxTrackerByChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInTxTrackerByChainRequest.Merge(m, src)
}
func (m *QueryAllInTxTrackerByChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInTxTrackerByChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInTxTrackerByChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInTxTrackerByChainRequest proto.InternalMessageInfo

func (m *QueryAllInTxTrackerByChainRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryAllInTxTrackerByChainRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// response of query all in tx tracker by chain
type QueryInTxTrackerAllByChainResponse struct {
	InTxTrackers []InTxTracker       `protobuf:"bytes,1,rep,name=in_tx_trackers,json=inTxTrackers,proto3" json:"in_tx_trackers"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryInTxTrackerAllByChainResponse) Reset()         { *m = QueryInTxTrackerAllByChainResponse{} }
func (m *QueryInTxTrackerAllByChainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInTxTrackerAllByChainResponse) ProtoMessage()    {}
func (*QueryInTxTrackerAllByChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{13}
}
func (m *QueryInTxTrackerAllByChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInTxTrackerAllByChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInTxTrackerAllByChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInTxTrackerAllByChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInTxTrackerAllByChainResponse.Merge(m, src)
}
func (m *QueryInTxTrackerAllByChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInTxTrackerAllByChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInTxTrackerAllByChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInTxTrackerAllByChainResponse proto.InternalMessageInfo

func (m *QueryInTxTrackerAllByChainResponse) GetInTxTrackers() []InTxTracker {
	if m != nil {
		return m.InTxTrackers
	}
	return nil
}

func (m *QueryInTxTrackerAllByChainResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// request of query all in tx trackers
type QueryAllInTxTrackersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInTxTrackersRequest) Reset()         { *m = QueryAllInTxTrackersRequest{} }
func (m *QueryAllInTxTrackersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInTxTrackersRequest) ProtoMessage()    {}
func (*QueryAllInTxTrackersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{14}
}
func (m *QueryAllInTxTrackersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInTxTrackersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInTxTrackersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInTxTrackersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInTxTrackersRequest.Merge(m, src)
}
func (m *QueryAllInTxTrackersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInTxTrackersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInTxTrackersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInTxTrackersRequest proto.InternalMessageInfo

func (m *QueryAllInTxTrackersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// response of query all in tx trackers
type QueryInTxTrackerAllResponse struct {
	InTxTrackers []InTxTracker       `protobuf:"bytes,1,rep,name=in_tx_trackers,json=inTxTrackers,proto3" json:"in_tx_trackers"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryInTxTrackerAllResponse) Reset()         { *m = QueryInTxTrackerAllResponse{} }
func (m *QueryInTxTrackerAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInTxTrackerAllResponse) ProtoMessage()    {}
func (*QueryInTxTrackerAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{15}
}
func (m *QueryInTxTrackerAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInTxTrackerAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInTxTrackerAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInTxTrackerAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInTxTrackerAllResponse.Merge(m, src)
}
func (m *QueryInTxTrackerAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInTxTrackerAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInTxTrackerAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInTxTrackerAllResponse proto.InternalMessageInfo

func (m *QueryInTxTrackerAllResponse) GetInTxTrackers() []InTxTracker {
	if m != nil {
		return m.InTxTrackers
	}
	return nil
}

func (m *QueryInTxTrackerAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// request of query in tx hash to xmsg
type QueryGetInTxHashToXmsgRequest struct {
	InTxHash string `protobuf:"bytes,1,opt,name=in_tx_hash,json=inTxHash,proto3" json:"in_tx_hash,omitempty"`
}

func (m *QueryGetInTxHashToXmsgRequest) Reset()         { *m = QueryGetInTxHashToXmsgRequest{} }
func (m *QueryGetInTxHashToXmsgRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInTxHashToXmsgRequest) ProtoMessage()    {}
func (*QueryGetInTxHashToXmsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{16}
}
func (m *QueryGetInTxHashToXmsgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInTxHashToXmsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInTxHashToXmsgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInTxHashToXmsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInTxHashToXmsgRequest.Merge(m, src)
}
func (m *QueryGetInTxHashToXmsgRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInTxHashToXmsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInTxHashToXmsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInTxHashToXmsgRequest proto.InternalMessageInfo

func (m *QueryGetInTxHashToXmsgRequest) GetInTxHash() string {
	if m != nil {
		return m.InTxHash
	}
	return ""
}

// response of query in tx hash to xmsg
type QueryInTxHashToXmsgResponse struct {
	InTxHashToXmsg InTxHashToXmsg `protobuf:"bytes,1,opt,name=in_tx_hash_to_xmsg,json=inTxHashToXmsg,proto3" json:"in_tx_hash_to_xmsg"`
}

func (m *QueryInTxHashToXmsgResponse) Reset()         { *m = QueryInTxHashToXmsgResponse{} }
func (m *QueryInTxHashToXmsgResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInTxHashToXmsgResponse) ProtoMessage()    {}
func (*QueryInTxHashToXmsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{17}
}
func (m *QueryInTxHashToXmsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInTxHashToXmsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInTxHashToXmsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInTxHashToXmsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInTxHashToXmsgResponse.Merge(m, src)
}
func (m *QueryInTxHashToXmsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInTxHashToXmsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInTxHashToXmsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInTxHashToXmsgResponse proto.InternalMessageInfo

func (m *QueryInTxHashToXmsgResponse) GetInTxHashToXmsg() InTxHashToXmsg {
	if m != nil {
		return m.InTxHashToXmsg
	}
	return InTxHashToXmsg{}
}

// request of query in tx hash to xmsg data
type QueryInTxHashToXmsgDataRequest struct {
	InTxHash string `protobuf:"bytes,1,opt,name=in_tx_hash,json=inTxHash,proto3" json:"in_tx_hash,omitempty"`
}

func (m *QueryInTxHashToXmsgDataRequest) Reset()         { *m = QueryInTxHashToXmsgDataRequest{} }
func (m *QueryInTxHashToXmsgDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInTxHashToXmsgDataRequest) ProtoMessage()    {}
func (*QueryInTxHashToXmsgDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{18}
}
func (m *QueryInTxHashToXmsgDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInTxHashToXmsgDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInTxHashToXmsgDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInTxHashToXmsgDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInTxHashToXmsgDataRequest.Merge(m, src)
}
func (m *QueryInTxHashToXmsgDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInTxHashToXmsgDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInTxHashToXmsgDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInTxHashToXmsgDataRequest proto.InternalMessageInfo

func (m *QueryInTxHashToXmsgDataRequest) GetInTxHash() string {
	if m != nil {
		return m.InTxHash
	}
	return ""
}

// response of query in tx hash to xmsg data
type QueryInTxHashToXmsgDataResponse struct {
	Xmsgs []Xmsg `protobuf:"bytes,1,rep,name=xmsgs,proto3" json:"xmsgs"`
}

func (m *QueryInTxHashToXmsgDataResponse) Reset()         { *m = QueryInTxHashToXmsgDataResponse{} }
func (m *QueryInTxHashToXmsgDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInTxHashToXmsgDataResponse) ProtoMessage()    {}
func (*QueryInTxHashToXmsgDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{19}
}
func (m *QueryInTxHashToXmsgDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInTxHashToXmsgDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInTxHashToXmsgDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInTxHashToXmsgDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInTxHashToXmsgDataResponse.Merge(m, src)
}
func (m *QueryInTxHashToXmsgDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInTxHashToXmsgDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInTxHashToXmsgDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInTxHashToXmsgDataResponse proto.InternalMessageInfo

func (m *QueryInTxHashToXmsgDataResponse) GetXmsgs() []Xmsg {
	if m != nil {
		return m.Xmsgs
	}
	return nil
}

// request of query all in tx hash to xmsg
type QueryAllInTxHashToXmsgRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInTxHashToXmsgRequest) Reset()         { *m = QueryAllInTxHashToXmsgRequest{} }
func (m *QueryAllInTxHashToXmsgRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInTxHashToXmsgRequest) ProtoMessage()    {}
func (*QueryAllInTxHashToXmsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{20}
}
func (m *QueryAllInTxHashToXmsgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInTxHashToXmsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInTxHashToXmsgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInTxHashToXmsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInTxHashToXmsgRequest.Merge(m, src)
}
func (m *QueryAllInTxHashToXmsgRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInTxHashToXmsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInTxHashToXmsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInTxHashToXmsgRequest proto.InternalMessageInfo

func (m *QueryAllInTxHashToXmsgRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// response of query all in tx hash to xmsg
type QueryInTxHashToXmsgAllResponse struct {
	InTxHashToXmsg []InTxHashToXmsg    `protobuf:"bytes,1,rep,name=in_tx_hash_to_xmsg,json=inTxHashToXmsg,proto3" json:"in_tx_hash_to_xmsg"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryInTxHashToXmsgAllResponse) Reset()         { *m = QueryInTxHashToXmsgAllResponse{} }
func (m *QueryInTxHashToXmsgAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInTxHashToXmsgAllResponse) ProtoMessage()    {}
func (*QueryInTxHashToXmsgAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{21}
}
func (m *QueryInTxHashToXmsgAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInTxHashToXmsgAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInTxHashToXmsgAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInTxHashToXmsgAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInTxHashToXmsgAllResponse.Merge(m, src)
}
func (m *QueryInTxHashToXmsgAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInTxHashToXmsgAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInTxHashToXmsgAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInTxHashToXmsgAllResponse proto.InternalMessageInfo

func (m *QueryInTxHashToXmsgAllResponse) GetInTxHashToXmsg() []InTxHashToXmsg {
	if m != nil {
		return m.InTxHashToXmsg
	}
	return nil
}

func (m *QueryInTxHashToXmsgAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// request of query gas price
type QueryGetGasPriceRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetGasPriceRequest) Reset()         { *m = QueryGetGasPriceRequest{} }
func (m *QueryGetGasPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGasPriceRequest) ProtoMessage()    {}
func (*QueryGetGasPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{22}
}
func (m *QueryGetGasPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGasPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGasPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGasPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGasPriceRequest.Merge(m, src)
}
func (m *QueryGetGasPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGasPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGasPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGasPriceRequest proto.InternalMessageInfo

func (m *QueryGetGasPriceRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// response of query gas price
type QueryGasPriceResponse struct {
	GasPrice *GasPrice `protobuf:"bytes,1,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
}

func (m *QueryGasPriceResponse) Reset()         { *m = QueryGasPriceResponse{} }
func (m *QueryGasPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGasPriceResponse) ProtoMessage()    {}
func (*QueryGasPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{23}
}
func (m *QueryGasPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasPriceResponse.Merge(m, src)
}
func (m *QueryGasPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasPriceResponse proto.InternalMessageInfo

func (m *QueryGasPriceResponse) GetGasPrice() *GasPrice {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

// request of query all gas price
type QueryAllGasPriceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGasPriceRequest) Reset()         { *m = QueryAllGasPriceRequest{} }
func (m *QueryAllGasPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGasPriceRequest) ProtoMessage()    {}
func (*QueryAllGasPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{24}
}
func (m *QueryAllGasPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGasPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGasPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGasPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGasPriceRequest.Merge(m, src)
}
func (m *QueryAllGasPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGasPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGasPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGasPriceRequest proto.InternalMessageInfo

func (m *QueryAllGasPriceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// response of query all gas price
type QueryGasPriceAllResponse struct {
	GasPrices  []*GasPrice         `protobuf:"bytes,1,rep,name=gas_prices,json=gasPrices,proto3" json:"gas_prices,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGasPriceAllResponse) Reset()         { *m = QueryGasPriceAllResponse{} }
func (m *QueryGasPriceAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGasPriceAllResponse) ProtoMessage()    {}
func (*QueryGasPriceAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{25}
}
func (m *QueryGasPriceAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasPriceAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasPriceAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasPriceAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasPriceAllResponse.Merge(m, src)
}
func (m *QueryGasPriceAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasPriceAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasPriceAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasPriceAllResponse proto.InternalMessageInfo

func (m *QueryGasPriceAllResponse) GetGasPrices() []*GasPrice {
	if m != nil {
		return m.GasPrices
	}
	return nil
}

func (m *QueryGasPriceAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// request of query last block height
type QueryGetLastBlockHeightRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetLastBlockHeightRequest) Reset()         { *m = QueryGetLastBlockHeightRequest{} }
func (m *QueryGetLastBlockHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLastBlockHeightRequest) ProtoMessage()    {}
func (*QueryGetLastBlockHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{26}
}
func (m *QueryGetLastBlockHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastBlockHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastBlockHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastBlockHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastBlockHeightRequest.Merge(m, src)
}
func (m *QueryGetLastBlockHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastBlockHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastBlockHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastBlockHeightRequest proto.InternalMessageInfo

func (m *QueryGetLastBlockHeightRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// response of query last block height
type QueryLastBlockHeightResponse struct {
	LastBlockHeight *LastBlockHeight `protobuf:"bytes,1,opt,name=last_block_height,json=lastBlockHeight,proto3" json:"last_block_height,omitempty"`
}

func (m *QueryLastBlockHeightResponse) Reset()         { *m = QueryLastBlockHeightResponse{} }
func (m *QueryLastBlockHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastBlockHeightResponse) ProtoMessage()    {}
func (*QueryLastBlockHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{27}
}
func (m *QueryLastBlockHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastBlockHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastBlockHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastBlockHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastBlockHeightResponse.Merge(m, src)
}
func (m *QueryLastBlockHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastBlockHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastBlockHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastBlockHeightResponse proto.InternalMessageInfo

func (m *QueryLastBlockHeightResponse) GetLastBlockHeight() *LastBlockHeight {
	if m != nil {
		return m.LastBlockHeight
	}
	return nil
}

// request of query all last block height
type QueryAllLastBlockHeightRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLastBlockHeightRequest) Reset()         { *m = QueryAllLastBlockHeightRequest{} }
func (m *QueryAllLastBlockHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLastBlockHeightRequest) ProtoMessage()    {}
func (*QueryAllLastBlockHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{28}
}
func (m *QueryAllLastBlockHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLastBlockHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLastBlockHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLastBlockHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLastBlockHeightRequest.Merge(m, src)
}
func (m *QueryAllLastBlockHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLastBlockHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLastBlockHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLastBlockHeightRequest proto.InternalMessageInfo

func (m *QueryAllLastBlockHeightRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// response of query all last block height
type QueryLastBlockHeightAllResponse struct {
	LastBlockHeight []*LastBlockHeight  `protobuf:"bytes,1,rep,name=last_block_height,json=lastBlockHeight,proto3" json:"last_block_height,omitempty"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLastBlockHeightAllResponse) Reset()         { *m = QueryLastBlockHeightAllResponse{} }
func (m *QueryLastBlockHeightAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastBlockHeightAllResponse) ProtoMessage()    {}
func (*QueryLastBlockHeightAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{29}
}
func (m *QueryLastBlockHeightAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastBlockHeightAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastBlockHeightAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastBlockHeightAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastBlockHeightAllResponse.Merge(m, src)
}
func (m *QueryLastBlockHeightAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastBlockHeightAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastBlockHeightAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastBlockHeightAllResponse proto.InternalMessageInfo

func (m *QueryLastBlockHeightAllResponse) GetLastBlockHeight() []*LastBlockHeight {
	if m != nil {
		return m.LastBlockHeight
	}
	return nil
}

func (m *QueryLastBlockHeightAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// request of query xmsg
type QueryGetXmsgRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetXmsgRequest) Reset()         { *m = QueryGetXmsgRequest{} }
func (m *QueryGetXmsgRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetXmsgRequest) ProtoMessage()    {}
func (*QueryGetXmsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{30}
}
func (m *QueryGetXmsgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetXmsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetXmsgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetXmsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetXmsgRequest.Merge(m, src)
}
func (m *QueryGetXmsgRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetXmsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetXmsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetXmsgRequest proto.InternalMessageInfo

func (m *QueryGetXmsgRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// request of query xmsg by nonce
type QueryGetXmsgByNonceRequest struct {
	ChainId int64  `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce   uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryGetXmsgByNonceRequest) Reset()         { *m = QueryGetXmsgByNonceRequest{} }
func (m *QueryGetXmsgByNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetXmsgByNonceRequest) ProtoMessage()    {}
func (*QueryGetXmsgByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{31}
}
func (m *QueryGetXmsgByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetXmsgByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetXmsgByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetXmsgByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetXmsgByNonceRequest.Merge(m, src)
}
func (m *QueryGetXmsgByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetXmsgByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetXmsgByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetXmsgByNonceRequest proto.InternalMessageInfo

func (m *QueryGetXmsgByNonceRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryGetXmsgByNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// response of query xmsg by nonce
type QueryXmsgByNonceResponse struct {
	Xmsg *Xmsg `protobuf:"bytes,1,opt,name=xmsg,proto3" json:"xmsg,omitempty"`
}

func (m *QueryXmsgByNonceResponse) Reset()         { *m = QueryXmsgByNonceResponse{} }
func (m *QueryXmsgByNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryXmsgByNonceResponse) ProtoMessage()    {}
func (*QueryXmsgByNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{32}
}
func (m *QueryXmsgByNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryXmsgByNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryXmsgByNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryXmsgByNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryXmsgByNonceResponse.Merge(m, src)
}
func (m *QueryXmsgByNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryXmsgByNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryXmsgByNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryXmsgByNonceResponse proto.InternalMessageInfo

func (m *QueryXmsgByNonceResponse) GetXmsg() *Xmsg {
	if m != nil {
		return m.Xmsg
	}
	return nil
}

// response of query xmsg
type QueryXmsgResponse struct {
	Xmsg *Xmsg `protobuf:"bytes,1,opt,name=xmsg,proto3" json:"xmsg,omitempty"`
}

func (m *QueryXmsgResponse) Reset()         { *m = QueryXmsgResponse{} }
func (m *QueryXmsgResponse) String() string { return proto.CompactTextString(m) }
func (*QueryXmsgResponse) ProtoMessage()    {}
func (*QueryXmsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{33}
}
func (m *QueryXmsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryXmsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryXmsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryXmsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryXmsgResponse.Merge(m, src)
}
func (m *QueryXmsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryXmsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryXmsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryXmsgResponse proto.InternalMessageInfo

func (m *QueryXmsgResponse) GetXmsg() *Xmsg {
	if m != nil {
		return m.Xmsg
	}
	return nil
}

// request of query all xmsg
type QueryAllXmsgRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllXmsgRequest) Reset()         { *m = QueryAllXmsgRequest{} }
func (m *QueryAllXmsgRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllXmsgRequest) ProtoMessage()    {}
func (*QueryAllXmsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{34}
}
func (m *QueryAllXmsgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllXmsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllXmsgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllXmsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllXmsgRequest.Merge(m, src)
}
func (m *QueryAllXmsgRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllXmsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllXmsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllXmsgRequest proto.InternalMessageInfo

func (m *QueryAllXmsgRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// response of query all xmsg
type QueryXmsgAllResponse struct {
	Xmsgs      []*Xmsg             `protobuf:"bytes,1,rep,name=xmsgs,proto3" json:"xmsgs,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryXmsgAllResponse) Reset()         { *m = QueryXmsgAllResponse{} }
func (m *QueryXmsgAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryXmsgAllResponse) ProtoMessage()    {}
func (*QueryXmsgAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{35}
}
func (m *QueryXmsgAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryXmsgAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryXmsgAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryXmsgAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryXmsgAllResponse.Merge(m, src)
}
func (m *QueryXmsgAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryXmsgAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryXmsgAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryXmsgAllResponse proto.InternalMessageInfo

func (m *QueryXmsgAllResponse) GetXmsgs() []*Xmsg {
	if m != nil {
		return m.Xmsgs
	}
	return nil
}

func (m *QueryXmsgAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// request of query list pending xmsg
type QueryListPendingXmsgRequest struct {
	ChainId int64  `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Limit   uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *QueryListPendingXmsgRequest) Reset()         { *m = QueryListPendingXmsgRequest{} }
func (m *QueryListPendingXmsgRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListPendingXmsgRequest) ProtoMessage()    {}
func (*QueryListPendingXmsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{36}
}
func (m *QueryListPendingXmsgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListPendingXmsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListPendingXmsgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListPendingXmsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListPendingXmsgRequest.Merge(m, src)
}
func (m *QueryListPendingXmsgRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListPendingXmsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListPendingXmsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListPendingXmsgRequest proto.InternalMessageInfo

func (m *QueryListPendingXmsgRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryListPendingXmsgRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// response of query list pending xmsg
type QueryListPendingXmsgResponse struct {
	Xmsg         []*Xmsg `protobuf:"bytes,1,rep,name=xmsg,proto3" json:"xmsg,omitempty"`
	TotalPending uint64  `protobuf:"varint,2,opt,name=total_pending,json=totalPending,proto3" json:"total_pending,omitempty"`
}

func (m *QueryListPendingXmsgResponse) Reset()         { *m = QueryListPendingXmsgResponse{} }
func (m *QueryListPendingXmsgResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListPendingXmsgResponse) ProtoMessage()    {}
func (*QueryListPendingXmsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{37}
}
func (m *QueryListPendingXmsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListPendingXmsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListPendingXmsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListPendingXmsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListPendingXmsgResponse.Merge(m, src)
}
func (m *QueryListPendingXmsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListPendingXmsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListPendingXmsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListPendingXmsgResponse proto.InternalMessageInfo

func (m *QueryListPendingXmsgResponse) GetXmsg() []*Xmsg {
	if m != nil {
		return m.Xmsg
	}
	return nil
}

func (m *QueryListPendingXmsgResponse) GetTotalPending() uint64 {
	if m != nil {
		return m.TotalPending
	}
	return 0
}

// request of query list pending xmsg within rate limit
type QueryListPendingXmsgWithinRateLimitRequest struct {
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *QueryListPendingXmsgWithinRateLimitRequest) Reset() {
	*m = QueryListPendingXmsgWithinRateLimitRequest{}
}
func (m *QueryListPendingXmsgWithinRateLimitRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryListPendingXmsgWithinRateLimitRequest) ProtoMessage() {}
func (*QueryListPendingXmsgWithinRateLimitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{38}
}
func (m *QueryListPendingXmsgWithinRateLimitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListPendingXmsgWithinRateLimitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListPendingXmsgWithinRateLimitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListPendingXmsgWithinRateLimitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListPendingXmsgWithinRateLimitRequest.Merge(m, src)
}
func (m *QueryListPendingXmsgWithinRateLimitRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListPendingXmsgWithinRateLimitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListPendingXmsgWithinRateLimitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListPendingXmsgWithinRateLimitRequest proto.InternalMessageInfo

func (m *QueryListPendingXmsgWithinRateLimitRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// response of query list pending xmsg within rate limit
type QueryListPendingXmsgWithinRateLimitResponse struct {
	Xmsgs                 []*Xmsg `protobuf:"bytes,1,rep,name=xmsgs,proto3" json:"xmsgs,omitempty"`
	TotalPending          uint64  `protobuf:"varint,2,opt,name=total_pending,json=totalPending,proto3" json:"total_pending,omitempty"`
	CurrentWithdrawWindow int64   `protobuf:"varint,3,opt,name=current_withdraw_window,json=currentWithdrawWindow,proto3" json:"current_withdraw_window,omitempty"`
	CurrentWithdrawRate   string  `protobuf:"bytes,4,opt,name=current_withdraw_rate,json=currentWithdrawRate,proto3" json:"current_withdraw_rate,omitempty"`
	RateLimitExceeded     bool    `protobuf:"varint,5,opt,name=rate_limit_exceeded,json=rateLimitExceeded,proto3" json:"rate_limit_exceeded,omitempty"`
}

func (m *QueryListPendingXmsgWithinRateLimitResponse) Reset() {
	*m = QueryListPendingXmsgWithinRateLimitResponse{}
}
func (m *QueryListPendingXmsgWithinRateLimitResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryListPendingXmsgWithinRateLimitResponse) ProtoMessage() {}
func (*QueryListPendingXmsgWithinRateLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{39}
}
func (m *QueryListPendingXmsgWithinRateLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListPendingXmsgWithinRateLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListPendingXmsgWithinRateLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListPendingXmsgWithinRateLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListPendingXmsgWithinRateLimitResponse.Merge(m, src)
}
func (m *QueryListPendingXmsgWithinRateLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListPendingXmsgWithinRateLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListPendingXmsgWithinRateLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListPendingXmsgWithinRateLimitResponse proto.InternalMessageInfo

func (m *QueryListPendingXmsgWithinRateLimitResponse) GetXmsgs() []*Xmsg {
	if m != nil {
		return m.Xmsgs
	}
	return nil
}

func (m *QueryListPendingXmsgWithinRateLimitResponse) GetTotalPending() uint64 {
	if m != nil {
		return m.TotalPending
	}
	return 0
}

func (m *QueryListPendingXmsgWithinRateLimitResponse) GetCurrentWithdrawWindow() int64 {
	if m != nil {
		return m.CurrentWithdrawWindow
	}
	return 0
}

func (m *QueryListPendingXmsgWithinRateLimitResponse) GetCurrentWithdrawRate() string {
	if m != nil {
		return m.CurrentWithdrawRate
	}
	return ""
}

func (m *QueryListPendingXmsgWithinRateLimitResponse) GetRateLimitExceeded() bool {
	if m != nil {
		return m.RateLimitExceeded
	}
	return false
}

// request of query last pell height
type QueryLastPellHeightRequest struct {
}

func (m *QueryLastPellHeightRequest) Reset()         { *m = QueryLastPellHeightRequest{} }
func (m *QueryLastPellHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastPellHeightRequest) ProtoMessage()    {}
func (*QueryLastPellHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{40}
}
func (m *QueryLastPellHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPellHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPellHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPellHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPellHeightRequest.Merge(m, src)
}
func (m *QueryLastPellHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPellHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPellHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPellHeightRequest proto.InternalMessageInfo

// response of query last pell height
type QueryLastPellHeightResponse struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryLastPellHeightResponse) Reset()         { *m = QueryLastPellHeightResponse{} }
func (m *QueryLastPellHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastPellHeightResponse) ProtoMessage()    {}
func (*QueryLastPellHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{41}
}
func (m *QueryLastPellHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPellHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPellHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPellHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPellHeightResponse.Merge(m, src)
}
func (m *QueryLastPellHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPellHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPellHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPellHeightResponse proto.InternalMessageInfo

func (m *QueryLastPellHeightResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// request of query rate limiter flags
type QueryRateLimiterFlagsRequest struct {
}

func (m *QueryRateLimiterFlagsRequest) Reset()         { *m = QueryRateLimiterFlagsRequest{} }
func (m *QueryRateLimiterFlagsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimiterFlagsRequest) ProtoMessage()    {}
func (*QueryRateLimiterFlagsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{42}
}
func (m *QueryRateLimiterFlagsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimiterFlagsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimiterFlagsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimiterFlagsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimiterFlagsRequest.Merge(m, src)
}
func (m *QueryRateLimiterFlagsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimiterFlagsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimiterFlagsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimiterFlagsRequest proto.InternalMessageInfo

// response of query rate limiter flags
type QueryRateLimiterFlagsResponse struct {
	RateLimiterFlags RateLimiterFlags `protobuf:"bytes,1,opt,name=rate_limiter_flags,json=rateLimiterFlags,proto3" json:"rate_limiter_flags"`
}

func (m *QueryRateLimiterFlagsResponse) Reset()         { *m = QueryRateLimiterFlagsResponse{} }
func (m *QueryRateLimiterFlagsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimiterFlagsResponse) ProtoMessage()    {}
func (*QueryRateLimiterFlagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{43}
}
func (m *QueryRateLimiterFlagsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimiterFlagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimiterFlagsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimiterFlagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimiterFlagsResponse.Merge(m, src)
}
func (m *QueryRateLimiterFlagsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimiterFlagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimiterFlagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimiterFlagsResponse proto.InternalMessageInfo

func (m *QueryRateLimiterFlagsResponse) GetRateLimiterFlags() RateLimiterFlags {
	if m != nil {
		return m.RateLimiterFlags
	}
	return RateLimiterFlags{}
}

// request of query chain index
type QueryChainIndexRequest struct {
	ChainId int64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryChainIndexRequest) Reset()         { *m = QueryChainIndexRequest{} }
func (m *QueryChainIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChainIndexRequest) ProtoMessage()    {}
func (*QueryChainIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{44}
}
func (m *QueryChainIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainIndexRequest.Merge(m, src)
}
func (m *QueryChainIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainIndexRequest proto.InternalMessageInfo

func (m *QueryChainIndexRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// response of query chain index
type QueryChainIndexResponse struct {
	ChainId    uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	CurrHeight uint64 `protobuf:"varint,2,opt,name=curr_height,json=currHeight,proto3" json:"curr_height,omitempty"`
}

func (m *QueryChainIndexResponse) Reset()         { *m = QueryChainIndexResponse{} }
func (m *QueryChainIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainIndexResponse) ProtoMessage()    {}
func (*QueryChainIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{45}
}
func (m *QueryChainIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainIndexResponse.Merge(m, src)
}
func (m *QueryChainIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainIndexResponse proto.InternalMessageInfo

func (m *QueryChainIndexResponse) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryChainIndexResponse) GetCurrHeight() uint64 {
	if m != nil {
		return m.CurrHeight
	}
	return 0
}

// request of query block proof
type QueryBlockProofRequest struct {
	ChainId int64  `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryBlockProofRequest) Reset()         { *m = QueryBlockProofRequest{} }
func (m *QueryBlockProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlockProofRequest) ProtoMessage()    {}
func (*QueryBlockProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{46}
}
func (m *QueryBlockProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockProofRequest.Merge(m, src)
}
func (m *QueryBlockProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockProofRequest proto.InternalMessageInfo

func (m *QueryBlockProofRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryBlockProofRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// response of query block proof
type QueryBlockProofResponse struct {
	ChainId         uint64   `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	PrevBlockHeight uint64   `protobuf:"varint,2,opt,name=prev_block_height,json=prevBlockHeight,proto3" json:"prev_block_height,omitempty"`
	BlockHeight     uint64   `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockHash       string   `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Events          []*Event `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *QueryBlockProofResponse) Reset()         { *m = QueryBlockProofResponse{} }
func (m *QueryBlockProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlockProofResponse) ProtoMessage()    {}
func (*QueryBlockProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{47}
}
func (m *QueryBlockProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockProofResponse.Merge(m, src)
}
func (m *QueryBlockProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockProofResponse proto.InternalMessageInfo

func (m *QueryBlockProofResponse) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryBlockProofResponse) GetPrevBlockHeight() uint64 {
	if m != nil {
		return m.PrevBlockHeight
	}
	return 0
}

func (m *QueryBlockProofResponse) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *QueryBlockProofResponse) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *QueryBlockProofResponse) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

// request of query recharge pell operation index
type QueryPellRechargeOperationIndexRequest struct {
	ChainId int64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryPellRechargeOperationIndexRequest) Reset() {
	*m = QueryPellRechargeOperationIndexRequest{}
}
func (m *QueryPellRechargeOperationIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPellRechargeOperationIndexRequest) ProtoMessage()    {}
func (*QueryPellRechargeOperationIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{48}
}
func (m *QueryPellRechargeOperationIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPellRechargeOperationIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPellRechargeOperationIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPellRechargeOperationIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPellRechargeOperationIndexRequest.Merge(m, src)
}
func (m *QueryPellRechargeOperationIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPellRechargeOperationIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPellRechargeOperationIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPellRechargeOperationIndexRequest proto.InternalMessageInfo

func (m *QueryPellRechargeOperationIndexRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// response of query recharge pell operation index
type QueryPellRechargeOperationIndexResponse struct {
	ChainId   uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	CurrIndex uint64 `protobuf:"varint,2,opt,name=curr_index,json=currIndex,proto3" json:"curr_index,omitempty"`
}

func (m *QueryPellRechargeOperationIndexResponse) Reset() {
	*m = QueryPellRechargeOperationIndexResponse{}
}
func (m *QueryPellRechargeOperationIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPellRechargeOperationIndexResponse) ProtoMessage()    {}
func (*QueryPellRechargeOperationIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{49}
}
func (m *QueryPellRechargeOperationIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPellRechargeOperationIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPellRechargeOperationIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPellRechargeOperationIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPellRechargeOperationIndexResponse.Merge(m, src)
}
func (m *QueryPellRechargeOperationIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPellRechargeOperationIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPellRechargeOperationIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPellRechargeOperationIndexResponse proto.InternalMessageInfo

func (m *QueryPellRechargeOperationIndexResponse) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryPellRechargeOperationIndexResponse) GetCurrIndex() uint64 {
	if m != nil {
		return m.CurrIndex
	}
	return 0
}

// request of query recharge gas operation index
type QueryGasRechargeOperationIndexRequest struct {
	ChainId int64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryGasRechargeOperationIndexRequest) Reset()         { *m = QueryGasRechargeOperationIndexRequest{} }
func (m *QueryGasRechargeOperationIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGasRechargeOperationIndexRequest) ProtoMessage()    {}
func (*QueryGasRechargeOperationIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{50}
}
func (m *QueryGasRechargeOperationIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasRechargeOperationIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasRechargeOperationIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasRechargeOperationIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasRechargeOperationIndexRequest.Merge(m, src)
}
func (m *QueryGasRechargeOperationIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasRechargeOperationIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasRechargeOperationIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasRechargeOperationIndexRequest proto.InternalMessageInfo

func (m *QueryGasRechargeOperationIndexRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// response of query recharge gas operation index
type QueryGasRechargeOperationIndexResponse struct {
	ChainId   uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	CurrIndex uint64 `protobuf:"varint,2,opt,name=curr_index,json=currIndex,proto3" json:"curr_index,omitempty"`
}

func (m *QueryGasRechargeOperationIndexResponse) Reset() {
	*m = QueryGasRechargeOperationIndexResponse{}
}
func (m *QueryGasRechargeOperationIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGasRechargeOperationIndexResponse) ProtoMessage()    {}
func (*QueryGasRechargeOperationIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{51}
}
func (m *QueryGasRechargeOperationIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasRechargeOperationIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasRechargeOperationIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasRechargeOperationIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasRechargeOperationIndexResponse.Merge(m, src)
}
func (m *QueryGasRechargeOperationIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasRechargeOperationIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasRechargeOperationIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasRechargeOperationIndexResponse proto.InternalMessageInfo

func (m *QueryGasRechargeOperationIndexResponse) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryGasRechargeOperationIndexResponse) GetCurrIndex() uint64 {
	if m != nil {
		return m.CurrIndex
	}
	return 0
}

// request of query rate limiter input
type QueryRateLimiterInputRequest struct {
	Limit  uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Window int64  `protobuf:"varint,2,opt,name=window,proto3" json:"window,omitempty"`
}

func (m *QueryRateLimiterInputRequest) Reset()         { *m = QueryRateLimiterInputRequest{} }
func (m *QueryRateLimiterInputRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimiterInputRequest) ProtoMessage()    {}
func (*QueryRateLimiterInputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{52}
}
func (m *QueryRateLimiterInputRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimiterInputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimiterInputRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimiterInputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimiterInputRequest.Merge(m, src)
}
func (m *QueryRateLimiterInputRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimiterInputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimiterInputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimiterInputRequest proto.InternalMessageInfo

func (m *QueryRateLimiterInputRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryRateLimiterInputRequest) GetWindow() int64 {
	if m != nil {
		return m.Window
	}
	return 0
}

// response of query rate limiter input
type QueryRateLimiterInputResponse struct {
	Height                  int64   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	XmsgsMissed             []*Xmsg `protobuf:"bytes,2,rep,name=xmsgs_missed,json=xmsgsMissed,proto3" json:"xmsgs_missed,omitempty"`
	XmsgsPending            []*Xmsg `protobuf:"bytes,3,rep,name=xmsgs_pending,json=xmsgsPending,proto3" json:"xmsgs_pending,omitempty"`
	TotalPending            uint64  `protobuf:"varint,4,opt,name=total_pending,json=totalPending,proto3" json:"total_pending,omitempty"`
	LowestPendingXmsgHeight int64   `protobuf:"varint,5,opt,name=lowest_pending_xmsg_height,json=lowestPendingXmsgHeight,proto3" json:"lowest_pending_xmsg_height,omitempty"`
}

func (m *QueryRateLimiterInputResponse) Reset()         { *m = QueryRateLimiterInputResponse{} }
func (m *QueryRateLimiterInputResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimiterInputResponse) ProtoMessage()    {}
func (*QueryRateLimiterInputResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab451d68199ead4, []int{53}
}
func (m *QueryRateLimiterInputResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimiterInputResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimiterInputResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimiterInputResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimiterInputResponse.Merge(m, src)
}
func (m *QueryRateLimiterInputResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimiterInputResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimiterInputResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimiterInputResponse proto.InternalMessageInfo

func (m *QueryRateLimiterInputResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryRateLimiterInputResponse) GetXmsgsMissed() []*Xmsg {
	if m != nil {
		return m.XmsgsMissed
	}
	return nil
}

func (m *QueryRateLimiterInputResponse) GetXmsgsPending() []*Xmsg {
	if m != nil {
		return m.XmsgsPending
	}
	return nil
}

func (m *QueryRateLimiterInputResponse) GetTotalPending() uint64 {
	if m != nil {
		return m.TotalPending
	}
	return 0
}

func (m *QueryRateLimiterInputResponse) GetLowestPendingXmsgHeight() int64 {
	if m != nil {
		return m.LowestPendingXmsgHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryCrosschainFeeParamsRequest)(nil), "xmsg.QueryCrosschainFeeParamsRequest")
	proto.RegisterType((*QueryCrosschainFeeParamsResponse)(nil), "xmsg.QueryCrosschainFeeParamsResponse")
	proto.RegisterType((*QueryCrosschainFeeParamByChainIdRequest)(nil), "xmsg.QueryCrosschainFeeParamByChainIdRequest")
	proto.RegisterType((*QueryCrosschainFeeParamByChainIdResponse)(nil), "xmsg.QueryCrosschainFeeParamByChainIdResponse")
	proto.RegisterType((*QueryListAllowedXmsgSendersRequest)(nil), "xmsg.QueryListAllowedXmsgSendersRequest")
	proto.RegisterType((*QueryListAllowedXmsgSendersResponse)(nil), "xmsg.QueryListAllowedXmsgSendersResponse")
	proto.RegisterType((*QueryGetOutTxTrackerRequest)(nil), "xmsg.QueryGetOutTxTrackerRequest")
	proto.RegisterType((*QueryOutTxTrackerResponse)(nil), "xmsg.QueryOutTxTrackerResponse")
	proto.RegisterType((*QueryAllOutTxTrackerRequest)(nil), "xmsg.QueryAllOutTxTrackerRequest")
	proto.RegisterType((*QueryOutTxTrackerAllResponse)(nil), "xmsg.QueryOutTxTrackerAllResponse")
	proto.RegisterType((*QueryAllOutTxTrackerByChainRequest)(nil), "xmsg.QueryAllOutTxTrackerByChainRequest")
	proto.RegisterType((*QueryOutTxTrackerAllByChainResponse)(nil), "xmsg.QueryOutTxTrackerAllByChainResponse")
	proto.RegisterType((*QueryAllInTxTrackerByChainRequest)(nil), "xmsg.QueryAllInTxTrackerByChainRequest")
	proto.RegisterType((*QueryInTxTrackerAllByChainResponse)(nil), "xmsg.QueryInTxTrackerAllByChainResponse")
	proto.RegisterType((*QueryAllInTxTrackersRequest)(nil), "xmsg.QueryAllInTxTrackersRequest")
	proto.RegisterType((*QueryInTxTrackerAllResponse)(nil), "xmsg.QueryInTxTrackerAllResponse")
	proto.RegisterType((*QueryGetInTxHashToXmsgRequest)(nil), "xmsg.QueryGetInTxHashToXmsgRequest")
	proto.RegisterType((*QueryInTxHashToXmsgResponse)(nil), "xmsg.QueryInTxHashToXmsgResponse")
	proto.RegisterType((*QueryInTxHashToXmsgDataRequest)(nil), "xmsg.QueryInTxHashToXmsgDataRequest")
	proto.RegisterType((*QueryInTxHashToXmsgDataResponse)(nil), "xmsg.QueryInTxHashToXmsgDataResponse")
	proto.RegisterType((*QueryAllInTxHashToXmsgRequest)(nil), "xmsg.QueryAllInTxHashToXmsgRequest")
	proto.RegisterType((*QueryInTxHashToXmsgAllResponse)(nil), "xmsg.QueryInTxHashToXmsgAllResponse")
	proto.RegisterType((*QueryGetGasPriceRequest)(nil), "xmsg.QueryGetGasPriceRequest")
	proto.RegisterType((*QueryGasPriceResponse)(nil), "xmsg.QueryGasPriceResponse")
	proto.RegisterType((*QueryAllGasPriceRequest)(nil), "xmsg.QueryAllGasPriceRequest")
	proto.RegisterType((*QueryGasPriceAllResponse)(nil), "xmsg.QueryGasPriceAllResponse")
	proto.RegisterType((*QueryGetLastBlockHeightRequest)(nil), "xmsg.QueryGetLastBlockHeightRequest")
	proto.RegisterType((*QueryLastBlockHeightResponse)(nil), "xmsg.QueryLastBlockHeightResponse")
	proto.RegisterType((*QueryAllLastBlockHeightRequest)(nil), "xmsg.QueryAllLastBlockHeightRequest")
	proto.RegisterType((*QueryLastBlockHeightAllResponse)(nil), "xmsg.QueryLastBlockHeightAllResponse")
	proto.RegisterType((*QueryGetXmsgRequest)(nil), "xmsg.QueryGetXmsgRequest")
	proto.RegisterType((*QueryGetXmsgByNonceRequest)(nil), "xmsg.QueryGetXmsgByNonceRequest")
	proto.RegisterType((*QueryXmsgByNonceResponse)(nil), "xmsg.QueryXmsgByNonceResponse")
	proto.RegisterType((*QueryXmsgResponse)(nil), "xmsg.QueryXmsgResponse")
	proto.RegisterType((*QueryAllXmsgRequest)(nil), "xmsg.QueryAllXmsgRequest")
	proto.RegisterType((*QueryXmsgAllResponse)(nil), "xmsg.QueryXmsgAllResponse")
	proto.RegisterType((*QueryListPendingXmsgRequest)(nil), "xmsg.QueryListPendingXmsgRequest")
	proto.RegisterType((*QueryListPendingXmsgResponse)(nil), "xmsg.QueryListPendingXmsgResponse")
	proto.RegisterType((*QueryListPendingXmsgWithinRateLimitRequest)(nil), "xmsg.QueryListPendingXmsgWithinRateLimitRequest")
	proto.RegisterType((*QueryListPendingXmsgWithinRateLimitResponse)(nil), "xmsg.QueryListPendingXmsgWithinRateLimitResponse")
	proto.RegisterType((*QueryLastPellHeightRequest)(nil), "xmsg.QueryLastPellHeightRequest")
	proto.RegisterType((*QueryLastPellHeightResponse)(nil), "xmsg.QueryLastPellHeightResponse")
	proto.RegisterType((*QueryRateLimiterFlagsRequest)(nil), "xmsg.QueryRateLimiterFlagsRequest")
	proto.RegisterType((*QueryRateLimiterFlagsResponse)(nil), "xmsg.QueryRateLimiterFlagsResponse")
	proto.RegisterType((*QueryChainIndexRequest)(nil), "xmsg.QueryChainIndexRequest")
	proto.RegisterType((*QueryChainIndexResponse)(nil), "xmsg.QueryChainIndexResponse")
	proto.RegisterType((*QueryBlockProofRequest)(nil), "xmsg.QueryBlockProofRequest")
	proto.RegisterType((*QueryBlockProofResponse)(nil), "xmsg.QueryBlockProofResponse")
	proto.RegisterType((*QueryPellRechargeOperationIndexRequest)(nil), "xmsg.QueryPellRechargeOperationIndexRequest")
	proto.RegisterType((*QueryPellRechargeOperationIndexResponse)(nil), "xmsg.QueryPellRechargeOperationIndexResponse")
	proto.RegisterType((*QueryGasRechargeOperationIndexRequest)(nil), "xmsg.QueryGasRechargeOperationIndexRequest")
	proto.RegisterType((*QueryGasRechargeOperationIndexResponse)(nil), "xmsg.QueryGasRechargeOperationIndexResponse")
	proto.RegisterType((*QueryRateLimiterInputRequest)(nil), "xmsg.QueryRateLimiterInputRequest")
	proto.RegisterType((*QueryRateLimiterInputResponse)(nil), "xmsg.QueryRateLimiterInputResponse")
}

func init() { proto.RegisterFile("xmsg/query.proto", fileDescriptor_cab451d68199ead4) }

var fileDescriptor_cab451d68199ead4 = []byte{
	// 2352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xcd, 0x6f, 0x1c, 0x49,
	0x15, 0x4f, 0x7b, 0xec, 0xac, 0xfd, 0xec, 0xd8, 0x71, 0xf9, 0x6b, 0xdc, 0xb6, 0xc7, 0x76, 0x3b,
	0x71, 0x66, 0xed, 0x78, 0x26, 0x71, 0xd8, 0x2c, 0x02, 0x12, 0x61, 0xe7, 0x6b, 0x03, 0xde, 0x5d,
	0x33, 0x04, 0x05, 0x81, 0x50, 0xab, 0x67, 0xa6, 0x32, 0xd3, 0x4a, 0xbb, 0x7b, 0xd2, 0xdd, 0x8e,
	0x6d, 0x45, 0x5e, 0xb4, 0x11, 0x5a, 0x0e, 0x7c, 0x68, 0x05, 0x9c, 0x38, 0x21, 0x10, 0x42, 0x42,
	0x80, 0xe0, 0xca, 0x91, 0x0b, 0x7b, 0x5c, 0x89, 0x0b, 0x27, 0x84, 0x12, 0xfe, 0x09, 0x6e, 0xa8,
	0xab, 0x5e, 0xcf, 0x54, 0xf5, 0xd7, 0xcc, 0x86, 0x89, 0xb4, 0xb7, 0x99, 0xfa, 0x7a, 0xbf, 0xf7,
	0x7b, 0xaf, 0x5e, 0x55, 0xfd, 0xd4, 0x70, 0xfe, 0xf8, 0xc0, 0x6b, 0x94, 0x9f, 0x1c, 0x52, 0xf7,
	0xa4, 0xd4, 0x72, 0x1d, 0xdf, 0x21, 0x83, 0x41, 0x8b, 0xba, 0x51, 0x73, 0xbc, 0x03, 0xc7, 0x2b,
	0x57, 0x0d, 0x8f, 0xf2, 0xee, 0xf2, 0xd3, 0xab, 0x55, 0xea, 0x1b, 0x57, 0xcb, 0x2d, 0xa3, 0x61,
	0xda, 0x86, 0x6f, 0x3a, 0x36, 0x9f, 0xa1, 0x4e, 0x37, 0x9c, 0x86, 0xc3, 0x7e, 0x96, 0x83, 0x5f,
	0xd8, 0xba, 0xd8, 0x70, 0x9c, 0x86, 0x45, 0xcb, 0x46, 0xcb, 0x2c, 0x1b, 0xb6, 0xed, 0xf8, 0x6c,
	0x8a, 0x87, 0xbd, 0xb3, 0xcc, 0x6e, 0xad, 0x69, 0x98, 0xb6, 0x6e, 0xda, 0x75, 0x7a, 0x8c, 0xed,
	0xcb, 0xbc, 0xdd, 0x75, 0x3c, 0x8f, 0x77, 0x3e, 0xa2, 0x54, 0x6f, 0x19, 0xae, 0x71, 0x10, 0x1a,
	0x63, 0x03, 0x1a, 0x86, 0xa7, 0xb7, 0x5c, 0xb3, 0x46, 0xb1, 0x75, 0x89, 0xb5, 0x9a, 0xb6, 0xee,
	0x1f, 0xeb, 0x4d, 0xc3, 0x6b, 0xea, 0xbe, 0xa3, 0x07, 0x4d, 0xd8, 0x9d, 0x17, 0xba, 0x7d, 0xd7,
	0xa8, 0x3d, 0xa6, 0x6e, 0x88, 0x92, 0xf5, 0x58, 0x86, 0xe7, 0xeb, 0x55, 0xcb, 0xa9, 0x3d, 0xd6,
	0x9b, 0xd4, 0x6c, 0x34, 0x7d, 0xec, 0x9d, 0x67, 0xbd, 0xce, 0xa1, 0x1f, 0x9f, 0xc8, 0x2d, 0xba,
	0x86, 0x4f, 0x75, 0xcb, 0x3c, 0x30, 0x7d, 0xea, 0xea, 0x8f, 0x2c, 0xa3, 0x11, 0xfa, 0x37, 0xc1,
	0xba, 0x3b, 0x10, 0xb4, 0x55, 0x58, 0xfe, 0x46, 0x40, 0xe3, 0xad, 0xb6, 0x6b, 0x77, 0x29, 0xdd,
	0x0f, 0x1c, 0xf3, 0x2a, 0xf4, 0xc9, 0x21, 0xf5, 0x7c, 0xad, 0x05, 0x2b, 0xe9, 0x43, 0xbc, 0x96,
	0x63, 0x7b, 0x94, 0xec, 0xc1, 0x4c, 0x12, 0x39, 0x5e, 0x5e, 0x59, 0xc9, 0x15, 0x47, 0xb7, 0xf3,
	0x25, 0x66, 0x32, 0xbe, 0x42, 0x65, 0xaa, 0x16, 0x5f, 0x55, 0xbb, 0x0d, 0x97, 0x52, 0x2c, 0xee,
	0x9e, 0xdc, 0x0a, 0xfe, 0xde, 0xaf, 0x23, 0x38, 0x32, 0x0f, 0xc3, 0x18, 0xad, 0x7a, 0x5e, 0x59,
	0x51, 0x8a, 0xb9, 0xca, 0x1b, 0x35, 0x3e, 0x42, 0x7b, 0x0a, 0xc5, 0xee, 0xab, 0x20, 0xfe, 0xaf,
	0xc1, 0x74, 0x12, 0x7e, 0xb6, 0x64, 0x16, 0x7c, 0x12, 0x87, 0xaf, 0x5d, 0x00, 0x8d, 0xd9, 0xdd,
	0x33, 0x3d, 0x7f, 0xc7, 0xb2, 0x9c, 0x23, 0x5a, 0xff, 0xf6, 0x81, 0xd7, 0xf8, 0x26, 0xb5, 0xeb,
	0xd4, 0x6d, 0xb3, 0xba, 0x03, 0x6b, 0x99, 0xa3, 0x10, 0x98, 0x0a, 0xc3, 0xd5, 0x43, 0xd3, 0x0a,
	0xda, 0x18, 0x97, 0x23, 0x95, 0xf6, 0x7f, 0xed, 0x3d, 0x58, 0x60, 0x4b, 0xdc, 0xa3, 0xfe, 0xfb,
	0x87, 0xfe, 0x83, 0xe3, 0x07, 0x3c, 0x13, 0xba, 0x53, 0x43, 0xa6, 0x61, 0xc8, 0x76, 0xec, 0x1a,
	0xcd, 0x0f, 0xac, 0x28, 0xc5, 0xc1, 0x0a, 0xff, 0xa3, 0x7d, 0x17, 0xe6, 0xd9, 0x7a, 0xf2, 0x62,
	0x08, 0xe4, 0x26, 0x8c, 0xcb, 0x09, 0x87, 0xdc, 0x10, 0xce, 0x8d, 0x38, 0x67, 0x77, 0xf0, 0x93,
	0x7f, 0x2d, 0x9f, 0xa9, 0x8c, 0x39, 0x42, 0x9b, 0x46, 0x11, 0xec, 0x8e, 0x65, 0x25, 0x81, 0xbd,
	0x0b, 0xd0, 0xd9, 0xc0, 0xb8, 0xf4, 0x7a, 0x89, 0xef, 0xf6, 0x52, 0xb0, 0xdb, 0x4b, 0xbc, 0x18,
	0xe0, 0x6e, 0x2f, 0xed, 0x1b, 0x0d, 0x8a, 0x73, 0x2b, 0xc2, 0x4c, 0xed, 0x77, 0x0a, 0x2c, 0xc6,
	0x9c, 0xd8, 0xb1, 0xac, 0x4c, 0x3f, 0x72, 0xbd, 0xfb, 0x41, 0xee, 0x49, 0x40, 0x07, 0x18, 0xd0,
	0x4b, 0x5d, 0x81, 0x72, 0xe3, 0x12, 0xd2, 0xe7, 0x0a, 0xe6, 0x49, 0x84, 0x11, 0x4c, 0xce, 0x90,
	0x98, 0x69, 0x18, 0x62, 0x51, 0xc3, 0x10, 0xf2, 0x3f, 0x11, 0xba, 0x06, 0x5e, 0x99, 0xae, 0x3f,
	0x2b, 0x98, 0x86, 0x11, 0xba, 0xda, 0x20, 0x90, 0xb5, 0xaf, 0xc2, 0x84, 0xcc, 0x9a, 0xd7, 0x95,
	0xb6, 0x73, 0x22, 0x6d, 0x5e, 0xff, 0x78, 0xfb, 0x48, 0x81, 0xd5, 0x90, 0xb7, 0xfb, 0x76, 0x1a,
	0x6d, 0x19, 0xc9, 0xdf, 0x2f, 0xee, 0xfe, 0x10, 0x06, 0x50, 0x40, 0x91, 0x40, 0xdd, 0x0d, 0x18,
	0x97, 0x2a, 0x7c, 0xc8, 0xdc, 0x24, 0x67, 0x4e, 0x74, 0x01, 0xf3, 0xcd, 0xb4, 0x5f, 0x07, 0x6f,
	0xc2, 0x06, 0x14, 0x6c, 0x7a, 0xfd, 0xde, 0x80, 0xbf, 0x55, 0xd0, 0x8e, 0xcc, 0xca, 0xe7, 0x8e,
	0x8e, 0x1b, 0xb0, 0x14, 0x16, 0xcf, 0xc0, 0xe6, 0x3b, 0x86, 0xd7, 0x7c, 0xe0, 0x04, 0x15, 0x38,
	0x24, 0x64, 0x11, 0xa0, 0x73, 0x70, 0x33, 0x42, 0x46, 0x2a, 0xc3, 0x26, 0x0e, 0x6d, 0xb3, 0x19,
	0x9d, 0x8b, 0x5e, 0xde, 0x05, 0x12, 0x3f, 0xf5, 0x91, 0xd5, 0xe9, 0x8e, 0xa7, 0x9d, 0x99, 0xe8,
	0xec, 0xb8, 0x29, 0xb5, 0x6a, 0x37, 0xa1, 0x90, 0x60, 0xe6, 0xb6, 0xe1, 0x1b, 0xbd, 0xc1, 0xbc,
	0x8f, 0xc7, 0x7b, 0xd2, 0x7c, 0x84, 0xba, 0x0e, 0x43, 0x01, 0x9e, 0x30, 0x0e, 0xc0, 0xd1, 0x09,
	0x98, 0x78, 0xb7, 0xd6, 0x40, 0xc2, 0x30, 0x7f, 0xe2, 0x84, 0xf5, 0x2b, 0x83, 0xfe, 0xa2, 0x24,
	0x3a, 0x2d, 0x26, 0x51, 0x1a, 0xbd, 0xb9, 0xcf, 0x46, 0x6f, 0xff, 0xb2, 0xa9, 0x0c, 0x73, 0x61,
	0x36, 0xdd, 0x33, 0xbc, 0xfd, 0xe0, 0x0a, 0x28, 0x14, 0x70, 0x76, 0x93, 0xc4, 0xd8, 0xf0, 0x3f,
	0xda, 0x6d, 0x98, 0xe1, 0x13, 0xda, 0xa3, 0xd1, 0xb5, 0x4d, 0x18, 0x69, 0xdf, 0x22, 0x91, 0xc4,
	0x71, 0xee, 0x51, 0x7b, 0xe8, 0x70, 0x03, 0x7f, 0x69, 0x06, 0x9a, 0xdd, 0xb1, 0xac, 0xa8, 0xd9,
	0x7e, 0x45, 0xe3, 0x67, 0x0a, 0xe4, 0x25, 0xa4, 0x62, 0x1c, 0xb6, 0x00, 0xda, 0x60, 0xc3, 0x04,
	0x8a, 0xa2, 0x1d, 0x09, 0xd1, 0xf6, 0x71, 0xf3, 0x5e, 0xc7, 0x0c, 0xb9, 0x47, 0xfd, 0x3d, 0xc3,
	0xf3, 0x77, 0x83, 0x2b, 0xf2, 0x3b, 0xec, 0x86, 0x9c, 0xcd, 0xba, 0x81, 0x97, 0x83, 0xd8, 0x24,
	0xf4, 0x67, 0x07, 0x26, 0x63, 0x77, 0x6e, 0xe4, 0x6e, 0x86, 0xbb, 0x15, 0x9d, 0x39, 0x61, 0xc9,
	0x0d, 0x5a, 0x13, 0xa1, 0xed, 0x58, 0x56, 0x0a, 0xb4, 0x7e, 0x45, 0xe6, 0x8f, 0x0a, 0x6e, 0xee,
	0x88, 0x1d, 0x31, 0x40, 0x29, 0x0e, 0xe5, 0x7a, 0x77, 0xa8, 0x7f, 0x41, 0xdb, 0x84, 0xa9, 0x30,
	0x68, 0x62, 0xd9, 0x48, 0x8e, 0xd4, 0xbb, 0xa0, 0x8a, 0x83, 0x77, 0x4f, 0xde, 0x0b, 0xae, 0xa8,
	0xaf, 0x7c, 0xb5, 0xfd, 0x12, 0x26, 0xb1, 0xb4, 0x16, 0x72, 0x54, 0x80, 0x41, 0xa1, 0x3a, 0x0b,
	0xf5, 0xaf, 0xc2, 0xda, 0xb5, 0x6b, 0x30, 0xd9, 0x9e, 0xdb, 0xf3, 0xa4, 0xef, 0xa1, 0xb3, 0x3b,
	0x96, 0xf5, 0x3a, 0x6a, 0xe4, 0x87, 0x0a, 0x4c, 0xb7, 0x41, 0x89, 0x01, 0x5f, 0x49, 0xad, 0xe6,
	0x58, 0xc7, 0xfb, 0x17, 0xcf, 0xf0, 0xf9, 0x11, 0xbc, 0x60, 0xf6, 0xa9, 0x5d, 0x37, 0xed, 0x86,
	0xe8, 0x6a, 0x76, 0x8c, 0xd8, 0xe3, 0x94, 0x59, 0x3f, 0x57, 0xe1, 0x7f, 0xb4, 0x5a, 0xb8, 0x39,
	0xa3, 0xeb, 0xc5, 0x28, 0xcf, 0x25, 0x51, 0x4e, 0xd6, 0xe0, 0x9c, 0xef, 0xf8, 0x86, 0xa5, 0xb7,
	0xf8, 0x64, 0xcc, 0x80, 0x31, 0xd6, 0x88, 0x0b, 0x6a, 0xbb, 0xb0, 0x91, 0x64, 0xe4, 0xa1, 0xe9,
	0x37, 0x4d, 0xbb, 0x62, 0xf8, 0x74, 0x2f, 0xc0, 0x22, 0xe4, 0x26, 0x07, 0xaa, 0x88, 0x40, 0x3f,
	0x1e, 0x80, 0xcd, 0x9e, 0x16, 0xe9, 0x39, 0x26, 0xbd, 0x40, 0x27, 0xd7, 0x61, 0xae, 0x76, 0xe8,
	0xba, 0xd4, 0xf6, 0xf5, 0x23, 0xd3, 0x6f, 0xd6, 0x5d, 0xe3, 0x48, 0x3f, 0x32, 0xed, 0xba, 0x73,
	0x94, 0xcf, 0x31, 0x7e, 0x67, 0xb0, 0xfb, 0x21, 0xf6, 0x3e, 0x64, 0x9d, 0x64, 0x1b, 0x66, 0x62,
	0xf3, 0x5c, 0xc3, 0xa7, 0xf9, 0x41, 0xb6, 0xe1, 0xa6, 0x22, 0xb3, 0x02, 0xfc, 0xa4, 0x04, 0x53,
	0x1d, 0x0d, 0x41, 0xa7, 0xc7, 0x35, 0x4a, 0xeb, 0xb4, 0x9e, 0x1f, 0x5a, 0x51, 0x8a, 0xc3, 0x95,
	0x49, 0x37, 0x74, 0xf1, 0x0e, 0x76, 0x68, 0x8b, 0xb8, 0x5d, 0x83, 0x6a, 0xb2, 0x4f, 0x2d, 0x4b,
	0xaa, 0x78, 0xda, 0x5b, 0x61, 0xa6, 0x44, 0x7a, 0x91, 0x9f, 0x59, 0x38, 0x2b, 0x94, 0xda, 0x5c,
	0x05, 0xff, 0x69, 0x05, 0x4c, 0x88, 0x36, 0xa3, 0xd4, 0xbd, 0x6b, 0x19, 0x8d, 0xf6, 0x13, 0xfa,
	0x31, 0xde, 0x48, 0xe2, 0xfd, 0xed, 0x57, 0x3d, 0x89, 0x2b, 0x21, 0xb8, 0xeb, 0x66, 0x79, 0x14,
	0xa2, 0x73, 0xf1, 0xa2, 0x70, 0xde, 0x8d, 0xb4, 0x6b, 0xd7, 0x60, 0x96, 0xab, 0x09, 0x2c, 0x87,
	0x83, 0x1a, 0xd5, 0x83, 0x04, 0xf1, 0x2d, 0x3c, 0x9f, 0xc5, 0x49, 0x88, 0x2d, 0x3a, 0x6b, 0xb0,
	0xb3, 0x3d, 0x96, 0x61, 0x34, 0x88, 0x49, 0x58, 0xae, 0x79, 0x2e, 0x40, 0xd0, 0x84, 0x67, 0xcc,
	0xd7, 0x11, 0x0b, 0x2b, 0xd3, 0xfb, 0xae, 0xe3, 0x3c, 0xea, 0x61, 0xd3, 0x75, 0x58, 0xe6, 0x0b,
	0x86, 0x2c, 0xff, 0x5d, 0x41, 0x90, 0xe2, 0x6a, 0xdd, 0x41, 0x6e, 0xc0, 0x64, 0xcb, 0xa5, 0x4f,
	0xe5, 0x93, 0x85, 0xaf, 0x3c, 0x11, 0x74, 0x88, 0x47, 0xc8, 0x2a, 0x8c, 0x49, 0xc3, 0x72, 0x6c,
	0xd8, 0x68, 0x55, 0x18, 0xb2, 0x04, 0x80, 0x43, 0x82, 0x6b, 0x2c, 0xcf, 0xcc, 0x11, 0x3e, 0xc0,
	0xf0, 0x9a, 0x64, 0x0d, 0xce, 0xd2, 0xa7, 0xd4, 0xf6, 0xbd, 0xfc, 0x10, 0xdb, 0x43, 0xa3, 0x3c,
	0x7a, 0x77, 0x82, 0xb6, 0x0a, 0x76, 0x69, 0xb7, 0x60, 0x9d, 0x39, 0x12, 0xa4, 0x58, 0x85, 0xd6,
	0x9a, 0x86, 0xdb, 0xa0, 0xef, 0xb7, 0xa8, 0xcb, 0xca, 0x55, 0xaf, 0x21, 0xab, 0xa1, 0xf6, 0x94,
	0xb5, 0x48, 0x77, 0x76, 0x96, 0x80, 0xc5, 0x8b, 0x6b, 0x88, 0x48, 0xcb, 0x48, 0xd0, 0xc2, 0x56,
	0xd0, 0x76, 0xe1, 0x62, 0x78, 0xa7, 0x7a, 0x65, 0xa0, 0x55, 0xf4, 0x36, 0x63, 0x8d, 0xff, 0x1b,
	0xe7, 0x5e, 0x7c, 0x07, 0xde, 0xb7, 0x5b, 0x87, 0xd9, 0xf5, 0x31, 0xc8, 0x34, 0xac, 0x4b, 0x03,
	0x7c, 0x3f, 0xf3, 0x7f, 0xda, 0x7f, 0x95, 0xf8, 0x86, 0xc5, 0xe5, 0xb2, 0x2b, 0x01, 0xd9, 0x82,
	0x31, 0x56, 0x28, 0xf5, 0x03, 0xd3, 0xf3, 0x68, 0x3d, 0x3f, 0x10, 0x2b, 0xa4, 0xa3, 0xac, 0xff,
	0x5d, 0xd6, 0x4d, 0xca, 0x70, 0x8e, 0x0f, 0x0f, 0xcb, 0x69, 0x2e, 0x36, 0x9e, 0xaf, 0x17, 0x96,
	0xd6, 0x58, 0xfd, 0x1d, 0x4c, 0xa8, 0xbf, 0x5f, 0x06, 0xd5, 0x72, 0x8e, 0xa8, 0xe7, 0x87, 0xa3,
	0xd8, 0xab, 0x23, 0xcc, 0xe9, 0x21, 0x06, 0x78, 0x8e, 0x8f, 0x10, 0x0e, 0x05, 0x9e, 0xdf, 0xdb,
	0x3f, 0x28, 0xc0, 0x10, 0xf3, 0x9d, 0xfc, 0x58, 0x81, 0x31, 0x51, 0x2e, 0x21, 0xab, 0x1c, 0x56,
	0x86, 0x94, 0xa7, 0x2e, 0x0b, 0x43, 0x92, 0xd4, 0x39, 0xed, 0x8b, 0xcf, 0xff, 0xf1, 0x9f, 0x9f,
	0x0f, 0x6c, 0x93, 0x2b, 0xe5, 0x16, 0xb5, 0xac, 0x2d, 0x16, 0xde, 0x72, 0xa8, 0x12, 0xb7, 0x87,
	0x97, 0x9f, 0x85, 0x79, 0x70, 0x5a, 0x7e, 0xc6, 0x2e, 0x46, 0xa7, 0xe4, 0xfb, 0x30, 0x11, 0xd1,
	0x7e, 0x24, 0x40, 0xc9, 0x72, 0x9d, 0xaa, 0xa5, 0x00, 0x12, 0xae, 0x22, 0xda, 0x45, 0x86, 0x69,
	0x99, 0x2c, 0x65, 0x62, 0x22, 0xbf, 0x51, 0x60, 0x36, 0x59, 0x7d, 0x22, 0xc5, 0x74, 0x20, 0xb2,
	0xdc, 0xa3, 0xbe, 0x99, 0x8e, 0x27, 0xa2, 0xc7, 0x68, 0x5f, 0x60, 0xb0, 0x4a, 0xe4, 0x72, 0x26,
	0x2c, 0x9c, 0x85, 0x8c, 0x9d, 0x92, 0x5f, 0x2b, 0x30, 0x93, 0xa8, 0xf3, 0x90, 0x4b, 0x32, 0xc8,
	0x54, 0x49, 0x4a, 0x15, 0xbd, 0xc9, 0x94, 0x8c, 0xb4, 0xeb, 0x0c, 0xe2, 0x15, 0x52, 0x8a, 0x41,
	0x34, 0xed, 0x14, 0x84, 0x41, 0x4c, 0xc9, 0x29, 0x8c, 0xcb, 0x0b, 0x47, 0x43, 0x99, 0x20, 0xfc,
	0xa8, 0xab, 0xa9, 0xb0, 0x7a, 0x88, 0xa4, 0xa4, 0xcd, 0xfc, 0x54, 0xe1, 0xf6, 0x85, 0x07, 0xf6,
	0x9a, 0x9c, 0xdb, 0x89, 0xc2, 0x41, 0x0c, 0x41, 0x5c, 0x4f, 0xc9, 0x08, 0x9a, 0xfc, 0xa2, 0x2f,
	0x3f, 0xeb, 0xe8, 0x02, 0xa7, 0xe4, 0x57, 0x0a, 0x90, 0xb8, 0xf2, 0x41, 0x2e, 0xa4, 0xda, 0x13,
	0x84, 0x15, 0xf5, 0x62, 0x97, 0x51, 0x88, 0xec, 0x06, 0x43, 0xf6, 0x36, 0x79, 0x2b, 0x01, 0x59,
	0x54, 0xa1, 0xd0, 0xeb, 0x86, 0x6f, 0xc8, 0x10, 0x7f, 0xa8, 0xc0, 0x64, 0x4c, 0xe7, 0x90, 0x68,
	0x4b, 0xd3, 0x5b, 0xd4, 0x74, 0x37, 0xc4, 0xd8, 0x5d, 0x62, 0xf8, 0x56, 0xc9, 0x72, 0x17, 0xe6,
	0xc8, 0x13, 0x18, 0x0e, 0xdf, 0xec, 0x64, 0x49, 0x0e, 0x5b, 0x44, 0x5b, 0x50, 0x17, 0xc4, 0xee,
	0x88, 0x80, 0xa1, 0xbd, 0xc9, 0x0c, 0xae, 0x91, 0xd5, 0x98, 0xc1, 0x50, 0x08, 0x08, 0x18, 0xa8,
	0xd3, 0xe3, 0x53, 0xe2, 0xc0, 0xa8, 0xa0, 0x2a, 0x48, 0x56, 0xe3, 0x8a, 0x86, 0x5a, 0x48, 0xb0,
	0x2a, 0x7a, 0xba, 0xca, 0x0c, 0x2f, 0x90, 0xf9, 0x54, 0xc3, 0xe4, 0x27, 0x0a, 0x4c, 0x44, 0x1e,
	0xbc, 0x52, 0x36, 0xa4, 0xea, 0x09, 0x52, 0xc1, 0x4b, 0x51, 0x0f, 0xb4, 0x2b, 0x0c, 0xc0, 0x06,
	0x29, 0xc6, 0x00, 0x44, 0xde, 0xd4, 0x6d, 0x02, 0x7e, 0xa4, 0x00, 0x89, 0xbf, 0xde, 0x25, 0x48,
	0xa9, 0x3a, 0x82, 0x94, 0xa0, 0xe9, 0x12, 0x80, 0x56, 0x64, 0xa8, 0x34, 0xb2, 0xd2, 0x0d, 0x15,
	0x31, 0x60, 0x90, 0x65, 0xc2, 0xbc, 0xcc, 0x88, 0x98, 0x73, 0x73, 0x42, 0x97, 0xb4, 0x41, 0xd3,
	0x4b, 0xc4, 0x31, 0x6e, 0x4b, 0xe6, 0xf0, 0x73, 0x05, 0xa0, 0x73, 0xcf, 0x24, 0x8b, 0xc2, 0x72,
	0xb1, 0xcb, 0xac, 0xba, 0x94, 0xd2, 0x8b, 0x26, 0xdf, 0x66, 0x26, 0xaf, 0x92, 0x72, 0xcc, 0x64,
	0xb5, 0x3d, 0x58, 0x3a, 0xf1, 0xf8, 0x49, 0x7d, 0x4a, 0x3e, 0x54, 0x60, 0x54, 0x10, 0x02, 0xc8,
	0x4a, 0xdc, 0x5f, 0x59, 0x6f, 0x90, 0x52, 0x2f, 0x41, 0x42, 0xc8, 0x88, 0x3c, 0xf7, 0x3e, 0x7e,
	0xec, 0xea, 0xf0, 0x46, 0xb8, 0xd9, 0xe7, 0xe5, 0x68, 0x8b, 0x74, 0xab, 0x11, 0xbb, 0x62, 0x5c,
	0x97, 0x98, 0xcd, 0x39, 0x32, 0x93, 0x68, 0x93, 0xd8, 0x00, 0x9d, 0x57, 0x87, 0x44, 0x74, 0xec,
	0x05, 0x23, 0x11, 0x1d, 0x7f, 0xaa, 0x68, 0x6b, 0xcc, 0xd2, 0x12, 0x59, 0x88, 0x59, 0xaa, 0x75,
	0x2c, 0xfc, 0x49, 0x01, 0x35, 0xfd, 0xce, 0x4c, 0x2e, 0x0b, 0x26, 0xba, 0xde, 0xcf, 0xd5, 0xad,
	0x1e, 0x47, 0x23, 0xc0, 0x6b, 0x0c, 0xe0, 0x16, 0xd9, 0x8c, 0x01, 0x6c, 0xa5, 0x23, 0xfa, 0xbd,
	0x02, 0xf3, 0xa9, 0x77, 0x67, 0xb2, 0x29, 0x17, 0x9b, 0x6c, 0xb8, 0x97, 0x7b, 0x1b, 0x8c, 0x68,
	0xb7, 0x19, 0xda, 0xcb, 0x64, 0x23, 0xa9, 0x4e, 0xa5, 0xc0, 0xf9, 0x00, 0x26, 0x22, 0x62, 0x83,
	0x74, 0xb4, 0x27, 0x4b, 0x30, 0x72, 0xd1, 0x4a, 0x56, 0x55, 0xb4, 0x0b, 0x0c, 0x4d, 0x81, 0x2c,
	0x26, 0x70, 0xd7, 0x31, 0xf6, 0x57, 0x05, 0x0a, 0xd9, 0x6a, 0x07, 0xb9, 0x92, 0x6e, 0x2c, 0x59,
	0x5d, 0x51, 0xaf, 0x7e, 0x86, 0x19, 0x3d, 0x44, 0x3a, 0x15, 0xd9, 0x07, 0x30, 0x2e, 0x2b, 0x0f,
	0xd2, 0x8e, 0x4f, 0x94, 0x2c, 0xa4, 0x3b, 0x49, 0xb2, 0x6c, 0x91, 0x71, 0xb2, 0x5a, 0xb2, 0xb5,
	0x8f, 0x14, 0x38, 0x1f, 0xd5, 0x19, 0x88, 0x18, 0x9b, 0x14, 0x81, 0x43, 0x5d, 0xcb, 0x1c, 0xd3,
	0xf5, 0xbc, 0x8d, 0x6a, 0x18, 0x51, 0x20, 0xec, 0xed, 0x95, 0x06, 0x44, 0x7c, 0xe7, 0xa5, 0x01,
	0x91, 0x1e, 0x6f, 0xbd, 0x01, 0xe1, 0x36, 0x7f, 0xa9, 0xc0, 0x6c, 0xf2, 0x87, 0x0f, 0xd2, 0x9d,
	0x3f, 0xf3, 0x0b, 0x0a, 0xe9, 0xce, 0x9f, 0xfd, 0x15, 0x85, 0xb6, 0xc9, 0xa0, 0x5d, 0x24, 0x6b,
	0x31, 0x68, 0x46, 0x1c, 0xc1, 0x2f, 0x14, 0x98, 0x4a, 0xf8, 0xd6, 0x85, 0x88, 0xe7, 0x6d, 0xfa,
	0xe7, 0x32, 0xea, 0x7a, 0xb7, 0x61, 0x88, 0xa9, 0xc4, 0x30, 0x15, 0xc9, 0x7a, 0xbc, 0xaa, 0x26,
	0x7d, 0x49, 0x43, 0xfe, 0xa6, 0xc0, 0x42, 0xc6, 0xa7, 0x2c, 0x64, 0x2b, 0xd3, 0x6e, 0xf4, 0xc3,
	0x19, 0xb5, 0xd4, 0xeb, 0x70, 0x84, 0x7b, 0x9b, 0xc1, 0xbd, 0x49, 0xbe, 0xd2, 0x13, 0x5c, 0xbd,
	0x7a, 0xa2, 0x87, 0x87, 0x9e, 0x70, 0xfc, 0xed, 0xde, 0xf9, 0xe4, 0x45, 0x41, 0xf9, 0xf4, 0x45,
	0x41, 0xf9, 0xf7, 0x8b, 0x82, 0xf2, 0xf1, 0xcb, 0xc2, 0x99, 0x4f, 0x5f, 0x16, 0xce, 0xfc, 0xf3,
	0x65, 0xe1, 0xcc, 0x77, 0x36, 0x1b, 0xa6, 0xdf, 0x3c, 0xac, 0x96, 0x6a, 0xce, 0x81, 0x68, 0x21,
	0xf8, 0x59, 0x73, 0x5c, 0x5a, 0x3e, 0xe6, 0xc6, 0xfc, 0x93, 0x16, 0xf5, 0xaa, 0x67, 0xd9, 0xc7,
	0x4b, 0xd7, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0x77, 0xa2, 0xdc, 0x2d, 0x27, 0x26, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a OutTxTracker by index.
	OutTxTracker(ctx context.Context, in *QueryGetOutTxTrackerRequest, opts ...grpc.CallOption) (*QueryOutTxTrackerResponse, error)
	// Queries a list of OutTxTracker items.
	OutTxTrackerAll(ctx context.Context, in *QueryAllOutTxTrackerRequest, opts ...grpc.CallOption) (*QueryOutTxTrackerAllResponse, error)
	// Queries a list of OutTxTracker items by chain.
	OutTxTrackerAllByChain(ctx context.Context, in *QueryAllOutTxTrackerByChainRequest, opts ...grpc.CallOption) (*QueryOutTxTrackerAllByChainResponse, error)
	// Queries a list of inTxTracker items by chain.
	InTxTrackerAllByChain(ctx context.Context, in *QueryAllInTxTrackerByChainRequest, opts ...grpc.CallOption) (*QueryInTxTrackerAllByChainResponse, error)
	// Queries a list of inTxTracker items.
	InTxTrackerAll(ctx context.Context, in *QueryAllInTxTrackersRequest, opts ...grpc.CallOption) (*QueryInTxTrackerAllResponse, error)
	// Queries a InTxHashToXmsg by index.
	InTxHashToXmsg(ctx context.Context, in *QueryGetInTxHashToXmsgRequest, opts ...grpc.CallOption) (*QueryInTxHashToXmsgResponse, error)
	// Queries a InTxHashToXmsg data by index.
	InTxHashToXmsgData(ctx context.Context, in *QueryInTxHashToXmsgDataRequest, opts ...grpc.CallOption) (*QueryInTxHashToXmsgDataResponse, error)
	// Queries a list of InTxHashToXmsg items.
	InTxHashToXmsgAll(ctx context.Context, in *QueryAllInTxHashToXmsgRequest, opts ...grpc.CallOption) (*QueryInTxHashToXmsgAllResponse, error)
	// Queries a gasPrice by index.
	GasPrice(ctx context.Context, in *QueryGetGasPriceRequest, opts ...grpc.CallOption) (*QueryGasPriceResponse, error)
	// Queries a list of gasPrice items.
	GasPriceAll(ctx context.Context, in *QueryAllGasPriceRequest, opts ...grpc.CallOption) (*QueryGasPriceAllResponse, error)
	// Queries a lastBlockHeight by index.
	LastBlockHeight(ctx context.Context, in *QueryGetLastBlockHeightRequest, opts ...grpc.CallOption) (*QueryLastBlockHeightResponse, error)
	// Queries a list of lastBlockHeight items.
	LastBlockHeightAll(ctx context.Context, in *QueryAllLastBlockHeightRequest, opts ...grpc.CallOption) (*QueryLastBlockHeightAllResponse, error)
	// Queries a send by index.
	Xmsg(ctx context.Context, in *QueryGetXmsgRequest, opts ...grpc.CallOption) (*QueryXmsgResponse, error)
	// Queries a send by index.
	BlockProof(ctx context.Context, in *QueryBlockProofRequest, opts ...grpc.CallOption) (*QueryBlockProofResponse, error)
	// Queries a send by nonce.
	XmsgByNonce(ctx context.Context, in *QueryGetXmsgByNonceRequest, opts ...grpc.CallOption) (*QueryXmsgByNonceResponse, error)
	// Queries a list of send items.
	XmsgAll(ctx context.Context, in *QueryAllXmsgRequest, opts ...grpc.CallOption) (*QueryXmsgAllResponse, error)
	// Queries a list of send items.
	ChainIndex(ctx context.Context, in *QueryChainIndexRequest, opts ...grpc.CallOption) (*QueryChainIndexResponse, error)
	// Queries a index for pell token vote
	PellRechargeOperationIndex(ctx context.Context, in *QueryPellRechargeOperationIndexRequest, opts ...grpc.CallOption) (*QueryPellRechargeOperationIndexResponse, error)
	// Queries a index for gas token vote
	GasRechargeOperationIndex(ctx context.Context, in *QueryGasRechargeOperationIndexRequest, opts ...grpc.CallOption) (*QueryGasRechargeOperationIndexResponse, error)
	// Queries a list of pending xmsgs.
	ListPendingXmsg(ctx context.Context, in *QueryListPendingXmsgRequest, opts ...grpc.CallOption) (*QueryListPendingXmsgResponse, error)
	// Queries a list of pending xmsgs within rate limit.
	ListPendingXmsgWithinRateLimit(ctx context.Context, in *QueryListPendingXmsgWithinRateLimitRequest, opts ...grpc.CallOption) (*QueryListPendingXmsgWithinRateLimitResponse, error)
	// Queries a list of lastMetaHeight items.
	LastPellHeight(ctx context.Context, in *QueryLastPellHeightRequest, opts ...grpc.CallOption) (*QueryLastPellHeightResponse, error)
	// Queries the rate limiter flags
	RateLimiterFlags(ctx context.Context, in *QueryRateLimiterFlagsRequest, opts ...grpc.CallOption) (*QueryRateLimiterFlagsResponse, error)
	// Queries the input data of rate limiter.
	RateLimiterInput(ctx context.Context, in *QueryRateLimiterInputRequest, opts ...grpc.CallOption) (*QueryRateLimiterInputResponse, error)
	// Queries the list of allowed xmsg senders.
	ListAllowedXmsgSenders(ctx context.Context, in *QueryListAllowedXmsgSendersRequest, opts ...grpc.CallOption) (*QueryListAllowedXmsgSendersResponse, error)
	// Queries a list of crosschain event fees.
	CrosschainFeeParams(ctx context.Context, in *QueryCrosschainFeeParamsRequest, opts ...grpc.CallOption) (*QueryCrosschainFeeParamsResponse, error)
	// Queries a list of crosschain event fees by chain id.
	CrosschainFeeParamByChainId(ctx context.Context, in *QueryCrosschainFeeParamByChainIdRequest, opts ...grpc.CallOption) (*QueryCrosschainFeeParamByChainIdResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) OutTxTracker(ctx context.Context, in *QueryGetOutTxTrackerRequest, opts ...grpc.CallOption) (*QueryOutTxTrackerResponse, error) {
	out := new(QueryOutTxTrackerResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/OutTxTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutTxTrackerAll(ctx context.Context, in *QueryAllOutTxTrackerRequest, opts ...grpc.CallOption) (*QueryOutTxTrackerAllResponse, error) {
	out := new(QueryOutTxTrackerAllResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/OutTxTrackerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutTxTrackerAllByChain(ctx context.Context, in *QueryAllOutTxTrackerByChainRequest, opts ...grpc.CallOption) (*QueryOutTxTrackerAllByChainResponse, error) {
	out := new(QueryOutTxTrackerAllByChainResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/OutTxTrackerAllByChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InTxTrackerAllByChain(ctx context.Context, in *QueryAllInTxTrackerByChainRequest, opts ...grpc.CallOption) (*QueryInTxTrackerAllByChainResponse, error) {
	out := new(QueryInTxTrackerAllByChainResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/InTxTrackerAllByChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InTxTrackerAll(ctx context.Context, in *QueryAllInTxTrackersRequest, opts ...grpc.CallOption) (*QueryInTxTrackerAllResponse, error) {
	out := new(QueryInTxTrackerAllResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/InTxTrackerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InTxHashToXmsg(ctx context.Context, in *QueryGetInTxHashToXmsgRequest, opts ...grpc.CallOption) (*QueryInTxHashToXmsgResponse, error) {
	out := new(QueryInTxHashToXmsgResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/InTxHashToXmsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InTxHashToXmsgData(ctx context.Context, in *QueryInTxHashToXmsgDataRequest, opts ...grpc.CallOption) (*QueryInTxHashToXmsgDataResponse, error) {
	out := new(QueryInTxHashToXmsgDataResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/InTxHashToXmsgData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InTxHashToXmsgAll(ctx context.Context, in *QueryAllInTxHashToXmsgRequest, opts ...grpc.CallOption) (*QueryInTxHashToXmsgAllResponse, error) {
	out := new(QueryInTxHashToXmsgAllResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/InTxHashToXmsgAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasPrice(ctx context.Context, in *QueryGetGasPriceRequest, opts ...grpc.CallOption) (*QueryGasPriceResponse, error) {
	out := new(QueryGasPriceResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/GasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasPriceAll(ctx context.Context, in *QueryAllGasPriceRequest, opts ...grpc.CallOption) (*QueryGasPriceAllResponse, error) {
	out := new(QueryGasPriceAllResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/GasPriceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastBlockHeight(ctx context.Context, in *QueryGetLastBlockHeightRequest, opts ...grpc.CallOption) (*QueryLastBlockHeightResponse, error) {
	out := new(QueryLastBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/LastBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastBlockHeightAll(ctx context.Context, in *QueryAllLastBlockHeightRequest, opts ...grpc.CallOption) (*QueryLastBlockHeightAllResponse, error) {
	out := new(QueryLastBlockHeightAllResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/LastBlockHeightAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Xmsg(ctx context.Context, in *QueryGetXmsgRequest, opts ...grpc.CallOption) (*QueryXmsgResponse, error) {
	out := new(QueryXmsgResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/Xmsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlockProof(ctx context.Context, in *QueryBlockProofRequest, opts ...grpc.CallOption) (*QueryBlockProofResponse, error) {
	out := new(QueryBlockProofResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/BlockProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) XmsgByNonce(ctx context.Context, in *QueryGetXmsgByNonceRequest, opts ...grpc.CallOption) (*QueryXmsgByNonceResponse, error) {
	out := new(QueryXmsgByNonceResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/XmsgByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) XmsgAll(ctx context.Context, in *QueryAllXmsgRequest, opts ...grpc.CallOption) (*QueryXmsgAllResponse, error) {
	out := new(QueryXmsgAllResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/XmsgAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainIndex(ctx context.Context, in *QueryChainIndexRequest, opts ...grpc.CallOption) (*QueryChainIndexResponse, error) {
	out := new(QueryChainIndexResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/ChainIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PellRechargeOperationIndex(ctx context.Context, in *QueryPellRechargeOperationIndexRequest, opts ...grpc.CallOption) (*QueryPellRechargeOperationIndexResponse, error) {
	out := new(QueryPellRechargeOperationIndexResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/PellRechargeOperationIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasRechargeOperationIndex(ctx context.Context, in *QueryGasRechargeOperationIndexRequest, opts ...grpc.CallOption) (*QueryGasRechargeOperationIndexResponse, error) {
	out := new(QueryGasRechargeOperationIndexResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/GasRechargeOperationIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListPendingXmsg(ctx context.Context, in *QueryListPendingXmsgRequest, opts ...grpc.CallOption) (*QueryListPendingXmsgResponse, error) {
	out := new(QueryListPendingXmsgResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/ListPendingXmsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListPendingXmsgWithinRateLimit(ctx context.Context, in *QueryListPendingXmsgWithinRateLimitRequest, opts ...grpc.CallOption) (*QueryListPendingXmsgWithinRateLimitResponse, error) {
	out := new(QueryListPendingXmsgWithinRateLimitResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/ListPendingXmsgWithinRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPellHeight(ctx context.Context, in *QueryLastPellHeightRequest, opts ...grpc.CallOption) (*QueryLastPellHeightResponse, error) {
	out := new(QueryLastPellHeightResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/LastPellHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RateLimiterFlags(ctx context.Context, in *QueryRateLimiterFlagsRequest, opts ...grpc.CallOption) (*QueryRateLimiterFlagsResponse, error) {
	out := new(QueryRateLimiterFlagsResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/RateLimiterFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RateLimiterInput(ctx context.Context, in *QueryRateLimiterInputRequest, opts ...grpc.CallOption) (*QueryRateLimiterInputResponse, error) {
	out := new(QueryRateLimiterInputResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/RateLimiterInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListAllowedXmsgSenders(ctx context.Context, in *QueryListAllowedXmsgSendersRequest, opts ...grpc.CallOption) (*QueryListAllowedXmsgSendersResponse, error) {
	out := new(QueryListAllowedXmsgSendersResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/ListAllowedXmsgSenders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainFeeParams(ctx context.Context, in *QueryCrosschainFeeParamsRequest, opts ...grpc.CallOption) (*QueryCrosschainFeeParamsResponse, error) {
	out := new(QueryCrosschainFeeParamsResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/CrosschainFeeParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainFeeParamByChainId(ctx context.Context, in *QueryCrosschainFeeParamByChainIdRequest, opts ...grpc.CallOption) (*QueryCrosschainFeeParamByChainIdResponse, error) {
	out := new(QueryCrosschainFeeParamByChainIdResponse)
	err := c.cc.Invoke(ctx, "/xmsg.Query/CrosschainFeeParamByChainId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a OutTxTracker by index.
	OutTxTracker(context.Context, *QueryGetOutTxTrackerRequest) (*QueryOutTxTrackerResponse, error)
	// Queries a list of OutTxTracker items.
	OutTxTrackerAll(context.Context, *QueryAllOutTxTrackerRequest) (*QueryOutTxTrackerAllResponse, error)
	// Queries a list of OutTxTracker items by chain.
	OutTxTrackerAllByChain(context.Context, *QueryAllOutTxTrackerByChainRequest) (*QueryOutTxTrackerAllByChainResponse, error)
	// Queries a list of inTxTracker items by chain.
	InTxTrackerAllByChain(context.Context, *QueryAllInTxTrackerByChainRequest) (*QueryInTxTrackerAllByChainResponse, error)
	// Queries a list of inTxTracker items.
	InTxTrackerAll(context.Context, *QueryAllInTxTrackersRequest) (*QueryInTxTrackerAllResponse, error)
	// Queries a InTxHashToXmsg by index.
	InTxHashToXmsg(context.Context, *QueryGetInTxHashToXmsgRequest) (*QueryInTxHashToXmsgResponse, error)
	// Queries a InTxHashToXmsg data by index.
	InTxHashToXmsgData(context.Context, *QueryInTxHashToXmsgDataRequest) (*QueryInTxHashToXmsgDataResponse, error)
	// Queries a list of InTxHashToXmsg items.
	InTxHashToXmsgAll(context.Context, *QueryAllInTxHashToXmsgRequest) (*QueryInTxHashToXmsgAllResponse, error)
	// Queries a gasPrice by index.
	GasPrice(context.Context, *QueryGetGasPriceRequest) (*QueryGasPriceResponse, error)
	// Queries a list of gasPrice items.
	GasPriceAll(context.Context, *QueryAllGasPriceRequest) (*QueryGasPriceAllResponse, error)
	// Queries a lastBlockHeight by index.
	LastBlockHeight(context.Context, *QueryGetLastBlockHeightRequest) (*QueryLastBlockHeightResponse, error)
	// Queries a list of lastBlockHeight items.
	LastBlockHeightAll(context.Context, *QueryAllLastBlockHeightRequest) (*QueryLastBlockHeightAllResponse, error)
	// Queries a send by index.
	Xmsg(context.Context, *QueryGetXmsgRequest) (*QueryXmsgResponse, error)
	// Queries a send by index.
	BlockProof(context.Context, *QueryBlockProofRequest) (*QueryBlockProofResponse, error)
	// Queries a send by nonce.
	XmsgByNonce(context.Context, *QueryGetXmsgByNonceRequest) (*QueryXmsgByNonceResponse, error)
	// Queries a list of send items.
	XmsgAll(context.Context, *QueryAllXmsgRequest) (*QueryXmsgAllResponse, error)
	// Queries a list of send items.
	ChainIndex(context.Context, *QueryChainIndexRequest) (*QueryChainIndexResponse, error)
	// Queries a index for pell token vote
	PellRechargeOperationIndex(context.Context, *QueryPellRechargeOperationIndexRequest) (*QueryPellRechargeOperationIndexResponse, error)
	// Queries a index for gas token vote
	GasRechargeOperationIndex(context.Context, *QueryGasRechargeOperationIndexRequest) (*QueryGasRechargeOperationIndexResponse, error)
	// Queries a list of pending xmsgs.
	ListPendingXmsg(context.Context, *QueryListPendingXmsgRequest) (*QueryListPendingXmsgResponse, error)
	// Queries a list of pending xmsgs within rate limit.
	ListPendingXmsgWithinRateLimit(context.Context, *QueryListPendingXmsgWithinRateLimitRequest) (*QueryListPendingXmsgWithinRateLimitResponse, error)
	// Queries a list of lastMetaHeight items.
	LastPellHeight(context.Context, *QueryLastPellHeightRequest) (*QueryLastPellHeightResponse, error)
	// Queries the rate limiter flags
	RateLimiterFlags(context.Context, *QueryRateLimiterFlagsRequest) (*QueryRateLimiterFlagsResponse, error)
	// Queries the input data of rate limiter.
	RateLimiterInput(context.Context, *QueryRateLimiterInputRequest) (*QueryRateLimiterInputResponse, error)
	// Queries the list of allowed xmsg senders.
	ListAllowedXmsgSenders(context.Context, *QueryListAllowedXmsgSendersRequest) (*QueryListAllowedXmsgSendersResponse, error)
	// Queries a list of crosschain event fees.
	CrosschainFeeParams(context.Context, *QueryCrosschainFeeParamsRequest) (*QueryCrosschainFeeParamsResponse, error)
	// Queries a list of crosschain event fees by chain id.
	CrosschainFeeParamByChainId(context.Context, *QueryCrosschainFeeParamByChainIdRequest) (*QueryCrosschainFeeParamByChainIdResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) OutTxTracker(ctx context.Context, req *QueryGetOutTxTrackerRequest) (*QueryOutTxTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutTxTracker not implemented")
}
func (*UnimplementedQueryServer) OutTxTrackerAll(ctx context.Context, req *QueryAllOutTxTrackerRequest) (*QueryOutTxTrackerAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutTxTrackerAll not implemented")
}
func (*UnimplementedQueryServer) OutTxTrackerAllByChain(ctx context.Context, req *QueryAllOutTxTrackerByChainRequest) (*QueryOutTxTrackerAllByChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutTxTrackerAllByChain not implemented")
}
func (*UnimplementedQueryServer) InTxTrackerAllByChain(ctx context.Context, req *QueryAllInTxTrackerByChainRequest) (*QueryInTxTrackerAllByChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InTxTrackerAllByChain not implemented")
}
func (*UnimplementedQueryServer) InTxTrackerAll(ctx context.Context, req *QueryAllInTxTrackersRequest) (*QueryInTxTrackerAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InTxTrackerAll not implemented")
}
func (*UnimplementedQueryServer) InTxHashToXmsg(ctx context.Context, req *QueryGetInTxHashToXmsgRequest) (*QueryInTxHashToXmsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InTxHashToXmsg not implemented")
}
func (*UnimplementedQueryServer) InTxHashToXmsgData(ctx context.Context, req *QueryInTxHashToXmsgDataRequest) (*QueryInTxHashToXmsgDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InTxHashToXmsgData not implemented")
}
func (*UnimplementedQueryServer) InTxHashToXmsgAll(ctx context.Context, req *QueryAllInTxHashToXmsgRequest) (*QueryInTxHashToXmsgAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InTxHashToXmsgAll not implemented")
}
func (*UnimplementedQueryServer) GasPrice(ctx context.Context, req *QueryGetGasPriceRequest) (*QueryGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPrice not implemented")
}
func (*UnimplementedQueryServer) GasPriceAll(ctx context.Context, req *QueryAllGasPriceRequest) (*QueryGasPriceAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPriceAll not implemented")
}
func (*UnimplementedQueryServer) LastBlockHeight(ctx context.Context, req *QueryGetLastBlockHeightRequest) (*QueryLastBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastBlockHeight not implemented")
}
func (*UnimplementedQueryServer) LastBlockHeightAll(ctx context.Context, req *QueryAllLastBlockHeightRequest) (*QueryLastBlockHeightAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastBlockHeightAll not implemented")
}
func (*UnimplementedQueryServer) Xmsg(ctx context.Context, req *QueryGetXmsgRequest) (*QueryXmsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Xmsg not implemented")
}
func (*UnimplementedQueryServer) BlockProof(ctx context.Context, req *QueryBlockProofRequest) (*QueryBlockProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockProof not implemented")
}
func (*UnimplementedQueryServer) XmsgByNonce(ctx context.Context, req *QueryGetXmsgByNonceRequest) (*QueryXmsgByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XmsgByNonce not implemented")
}
func (*UnimplementedQueryServer) XmsgAll(ctx context.Context, req *QueryAllXmsgRequest) (*QueryXmsgAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XmsgAll not implemented")
}
func (*UnimplementedQueryServer) ChainIndex(ctx context.Context, req *QueryChainIndexRequest) (*QueryChainIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainIndex not implemented")
}
func (*UnimplementedQueryServer) PellRechargeOperationIndex(ctx context.Context, req *QueryPellRechargeOperationIndexRequest) (*QueryPellRechargeOperationIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PellRechargeOperationIndex not implemented")
}
func (*UnimplementedQueryServer) GasRechargeOperationIndex(ctx context.Context, req *QueryGasRechargeOperationIndexRequest) (*QueryGasRechargeOperationIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasRechargeOperationIndex not implemented")
}
func (*UnimplementedQueryServer) ListPendingXmsg(ctx context.Context, req *QueryListPendingXmsgRequest) (*QueryListPendingXmsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPendingXmsg not implemented")
}
func (*UnimplementedQueryServer) ListPendingXmsgWithinRateLimit(ctx context.Context, req *QueryListPendingXmsgWithinRateLimitRequest) (*QueryListPendingXmsgWithinRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPendingXmsgWithinRateLimit not implemented")
}
func (*UnimplementedQueryServer) LastPellHeight(ctx context.Context, req *QueryLastPellHeightRequest) (*QueryLastPellHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPellHeight not implemented")
}
func (*UnimplementedQueryServer) RateLimiterFlags(ctx context.Context, req *QueryRateLimiterFlagsRequest) (*QueryRateLimiterFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateLimiterFlags not implemented")
}
func (*UnimplementedQueryServer) RateLimiterInput(ctx context.Context, req *QueryRateLimiterInputRequest) (*QueryRateLimiterInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateLimiterInput not implemented")
}
func (*UnimplementedQueryServer) ListAllowedXmsgSenders(ctx context.Context, req *QueryListAllowedXmsgSendersRequest) (*QueryListAllowedXmsgSendersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllowedXmsgSenders not implemented")
}
func (*UnimplementedQueryServer) CrosschainFeeParams(ctx context.Context, req *QueryCrosschainFeeParamsRequest) (*QueryCrosschainFeeParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainFeeParams not implemented")
}
func (*UnimplementedQueryServer) CrosschainFeeParamByChainId(ctx context.Context, req *QueryCrosschainFeeParamByChainIdRequest) (*QueryCrosschainFeeParamByChainIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainFeeParamByChainId not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_OutTxTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOutTxTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutTxTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/OutTxTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutTxTracker(ctx, req.(*QueryGetOutTxTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutTxTrackerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOutTxTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutTxTrackerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/OutTxTrackerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutTxTrackerAll(ctx, req.(*QueryAllOutTxTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutTxTrackerAllByChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOutTxTrackerByChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutTxTrackerAllByChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/OutTxTrackerAllByChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutTxTrackerAllByChain(ctx, req.(*QueryAllOutTxTrackerByChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InTxTrackerAllByChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInTxTrackerByChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InTxTrackerAllByChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/InTxTrackerAllByChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InTxTrackerAllByChain(ctx, req.(*QueryAllInTxTrackerByChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InTxTrackerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInTxTrackersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InTxTrackerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/InTxTrackerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InTxTrackerAll(ctx, req.(*QueryAllInTxTrackersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InTxHashToXmsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInTxHashToXmsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InTxHashToXmsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/InTxHashToXmsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InTxHashToXmsg(ctx, req.(*QueryGetInTxHashToXmsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InTxHashToXmsgData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInTxHashToXmsgDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InTxHashToXmsgData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/InTxHashToXmsgData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InTxHashToXmsgData(ctx, req.(*QueryInTxHashToXmsgDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InTxHashToXmsgAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInTxHashToXmsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InTxHashToXmsgAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/InTxHashToXmsgAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InTxHashToXmsgAll(ctx, req.(*QueryAllInTxHashToXmsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/GasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasPrice(ctx, req.(*QueryGetGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasPriceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasPriceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/GasPriceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasPriceAll(ctx, req.(*QueryAllGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLastBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/LastBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastBlockHeight(ctx, req.(*QueryGetLastBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastBlockHeightAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLastBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastBlockHeightAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/LastBlockHeightAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastBlockHeightAll(ctx, req.(*QueryAllLastBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Xmsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetXmsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Xmsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/Xmsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Xmsg(ctx, req.(*QueryGetXmsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlockProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlockProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/BlockProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlockProof(ctx, req.(*QueryBlockProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_XmsgByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetXmsgByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).XmsgByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/XmsgByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).XmsgByNonce(ctx, req.(*QueryGetXmsgByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_XmsgAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllXmsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).XmsgAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/XmsgAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).XmsgAll(ctx, req.(*QueryAllXmsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/ChainIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainIndex(ctx, req.(*QueryChainIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PellRechargeOperationIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPellRechargeOperationIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PellRechargeOperationIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/PellRechargeOperationIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PellRechargeOperationIndex(ctx, req.(*QueryPellRechargeOperationIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasRechargeOperationIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGasRechargeOperationIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasRechargeOperationIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/GasRechargeOperationIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasRechargeOperationIndex(ctx, req.(*QueryGasRechargeOperationIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListPendingXmsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListPendingXmsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListPendingXmsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/ListPendingXmsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListPendingXmsg(ctx, req.(*QueryListPendingXmsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListPendingXmsgWithinRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListPendingXmsgWithinRateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListPendingXmsgWithinRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/ListPendingXmsgWithinRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListPendingXmsgWithinRateLimit(ctx, req.(*QueryListPendingXmsgWithinRateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPellHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastPellHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPellHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/LastPellHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPellHeight(ctx, req.(*QueryLastPellHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RateLimiterFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRateLimiterFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RateLimiterFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/RateLimiterFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RateLimiterFlags(ctx, req.(*QueryRateLimiterFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RateLimiterInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRateLimiterInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RateLimiterInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/RateLimiterInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RateLimiterInput(ctx, req.(*QueryRateLimiterInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListAllowedXmsgSenders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListAllowedXmsgSendersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListAllowedXmsgSenders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/ListAllowedXmsgSenders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListAllowedXmsgSenders(ctx, req.(*QueryListAllowedXmsgSendersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainFeeParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCrosschainFeeParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainFeeParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/CrosschainFeeParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainFeeParams(ctx, req.(*QueryCrosschainFeeParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainFeeParamByChainId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCrosschainFeeParamByChainIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainFeeParamByChainId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmsg.Query/CrosschainFeeParamByChainId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainFeeParamByChainId(ctx, req.(*QueryCrosschainFeeParamByChainIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xmsg.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OutTxTracker",
			Handler:    _Query_OutTxTracker_Handler,
		},
		{
			MethodName: "OutTxTrackerAll",
			Handler:    _Query_OutTxTrackerAll_Handler,
		},
		{
			MethodName: "OutTxTrackerAllByChain",
			Handler:    _Query_OutTxTrackerAllByChain_Handler,
		},
		{
			MethodName: "InTxTrackerAllByChain",
			Handler:    _Query_InTxTrackerAllByChain_Handler,
		},
		{
			MethodName: "InTxTrackerAll",
			Handler:    _Query_InTxTrackerAll_Handler,
		},
		{
			MethodName: "InTxHashToXmsg",
			Handler:    _Query_InTxHashToXmsg_Handler,
		},
		{
			MethodName: "InTxHashToXmsgData",
			Handler:    _Query_InTxHashToXmsgData_Handler,
		},
		{
			MethodName: "InTxHashToXmsgAll",
			Handler:    _Query_InTxHashToXmsgAll_Handler,
		},
		{
			MethodName: "GasPrice",
			Handler:    _Query_GasPrice_Handler,
		},
		{
			MethodName: "GasPriceAll",
			Handler:    _Query_GasPriceAll_Handler,
		},
		{
			MethodName: "LastBlockHeight",
			Handler:    _Query_LastBlockHeight_Handler,
		},
		{
			MethodName: "LastBlockHeightAll",
			Handler:    _Query_LastBlockHeightAll_Handler,
		},
		{
			MethodName: "Xmsg",
			Handler:    _Query_Xmsg_Handler,
		},
		{
			MethodName: "BlockProof",
			Handler:    _Query_BlockProof_Handler,
		},
		{
			MethodName: "XmsgByNonce",
			Handler:    _Query_XmsgByNonce_Handler,
		},
		{
			MethodName: "XmsgAll",
			Handler:    _Query_XmsgAll_Handler,
		},
		{
			MethodName: "ChainIndex",
			Handler:    _Query_ChainIndex_Handler,
		},
		{
			MethodName: "PellRechargeOperationIndex",
			Handler:    _Query_PellRechargeOperationIndex_Handler,
		},
		{
			MethodName: "GasRechargeOperationIndex",
			Handler:    _Query_GasRechargeOperationIndex_Handler,
		},
		{
			MethodName: "ListPendingXmsg",
			Handler:    _Query_ListPendingXmsg_Handler,
		},
		{
			MethodName: "ListPendingXmsgWithinRateLimit",
			Handler:    _Query_ListPendingXmsgWithinRateLimit_Handler,
		},
		{
			MethodName: "LastPellHeight",
			Handler:    _Query_LastPellHeight_Handler,
		},
		{
			MethodName: "RateLimiterFlags",
			Handler:    _Query_RateLimiterFlags_Handler,
		},
		{
			MethodName: "RateLimiterInput",
			Handler:    _Query_RateLimiterInput_Handler,
		},
		{
			MethodName: "ListAllowedXmsgSenders",
			Handler:    _Query_ListAllowedXmsgSenders_Handler,
		},
		{
			MethodName: "CrosschainFeeParams",
			Handler:    _Query_CrosschainFeeParams_Handler,
		},
		{
			MethodName: "CrosschainFeeParamByChainId",
			Handler:    _Query_CrosschainFeeParamByChainId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xmsg/query.proto",
}

func (m *QueryCrosschainFeeParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCrosschainFeeParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCrosschainFeeParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCrosschainFeeParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCrosschainFeeParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCrosschainFeeParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CrosschainFeeParams) > 0 {
		for iNdEx := len(m.CrosschainFeeParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainFeeParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCrosschainFeeParamByChainIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCrosschainFeeParamByChainIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCrosschainFeeParamByChainIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCrosschainFeeParamByChainIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCrosschainFeeParamByChainIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCrosschainFeeParamByChainIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CrosschainFeeParam != nil {
		{
			size, err := m.CrosschainFeeParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListAllowedXmsgSendersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListAllowedXmsgSendersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListAllowedXmsgSendersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryListAllowedXmsgSendersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListAllowedXmsgSendersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListAllowedXmsgSendersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Builders) > 0 {
		for iNdEx := len(m.Builders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Builders[iNdEx])
			copy(dAtA[i:], m.Builders[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Builders[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOutTxTrackerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOutTxTrackerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOutTxTrackerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutTxTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutTxTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutTxTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OutTxTracker.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllOutTxTrackerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutTxTrackerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutTxTrackerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutTxTrackerAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutTxTrackerAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutTxTrackerAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OutTxTracker) > 0 {
		for iNdEx := len(m.OutTxTracker) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutTxTracker[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOutTxTrackerByChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutTxTrackerByChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutTxTrackerByChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Chain != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Chain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutTxTrackerAllByChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutTxTrackerAllByChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutTxTrackerAllByChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OutTxTrackers) > 0 {
		for iNdEx := len(m.OutTxTrackers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutTxTrackers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInTxTrackerByChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInTxTrackerByChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInTxTrackerByChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryInTxTrackerAllByChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInTxTrackerAllByChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInTxTrackerAllByChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InTxTrackers) > 0 {
		for iNdEx := len(m.InTxTrackers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InTxTrackers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInTxTrackersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInTxTrackersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInTxTrackersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInTxTrackerAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInTxTrackerAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInTxTrackerAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InTxTrackers) > 0 {
		for iNdEx := len(m.InTxTrackers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InTxTrackers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInTxHashToXmsgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInTxHashToXmsgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInTxHashToXmsgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InTxHash) > 0 {
		i -= len(m.InTxHash)
		copy(dAtA[i:], m.InTxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInTxHashToXmsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInTxHashToXmsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInTxHashToXmsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InTxHashToXmsg.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryInTxHashToXmsgDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInTxHashToXmsgDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInTxHashToXmsgDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InTxHash) > 0 {
		i -= len(m.InTxHash)
		copy(dAtA[i:], m.InTxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInTxHashToXmsgDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInTxHashToXmsgDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInTxHashToXmsgDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Xmsgs) > 0 {
		for iNdEx := len(m.Xmsgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Xmsgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInTxHashToXmsgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInTxHashToXmsgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInTxHashToXmsgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInTxHashToXmsgAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInTxHashToXmsgAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInTxHashToXmsgAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InTxHashToXmsg) > 0 {
		for iNdEx := len(m.InTxHashToXmsg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InTxHashToXmsg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGasPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGasPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGasPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasPrice != nil {
		{
			size, err := m.GasPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGasPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGasPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGasPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasPriceAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasPriceAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasPriceAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GasPrices) > 0 {
		for iNdEx := len(m.GasPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLastBlockHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastBlockHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastBlockHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastBlockHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastBlockHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastBlockHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastBlockHeight != nil {
		{
			size, err := m.LastBlockHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLastBlockHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLastBlockHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLastBlockHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastBlockHeightAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastBlockHeightAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastBlockHeightAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LastBlockHeight) > 0 {
		for iNdEx := len(m.LastBlockHeight) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastBlockHeight[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetXmsgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetXmsgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetXmsgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetXmsgByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetXmsgByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetXmsgByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryXmsgByNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryXmsgByNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryXmsgByNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Xmsg != nil {
		{
			size, err := m.Xmsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryXmsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryXmsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryXmsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Xmsg != nil {
		{
			size, err := m.Xmsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllXmsgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllXmsgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllXmsgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryXmsgAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryXmsgAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryXmsgAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Xmsgs) > 0 {
		for iNdEx := len(m.Xmsgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Xmsgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListPendingXmsgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListPendingXmsgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListPendingXmsgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryListPendingXmsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListPendingXmsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListPendingXmsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalPending != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalPending))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Xmsg) > 0 {
		for iNdEx := len(m.Xmsg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Xmsg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListPendingXmsgWithinRateLimitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListPendingXmsgWithinRateLimitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListPendingXmsgWithinRateLimitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryListPendingXmsgWithinRateLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListPendingXmsgWithinRateLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListPendingXmsgWithinRateLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateLimitExceeded {
		i--
		if m.RateLimitExceeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.CurrentWithdrawRate) > 0 {
		i -= len(m.CurrentWithdrawRate)
		copy(dAtA[i:], m.CurrentWithdrawRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CurrentWithdrawRate)))
		i--
		dAtA[i] = 0x22
	}
	if m.CurrentWithdrawWindow != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentWithdrawWindow))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalPending != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalPending))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Xmsgs) > 0 {
		for iNdEx := len(m.Xmsgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Xmsgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPellHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPellHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPellHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastPellHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPellHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPellHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateLimiterFlagsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimiterFlagsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimiterFlagsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRateLimiterFlagsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimiterFlagsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimiterFlagsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RateLimiterFlags.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryChainIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.PrevBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PrevBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPellRechargeOperationIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPellRechargeOperationIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPellRechargeOperationIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPellRechargeOperationIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPellRechargeOperationIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPellRechargeOperationIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasRechargeOperationIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasRechargeOperationIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasRechargeOperationIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasRechargeOperationIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasRechargeOperationIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasRechargeOperationIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateLimiterInputRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimiterInputRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimiterInputRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Window != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Window))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateLimiterInputResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimiterInputResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimiterInputResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LowestPendingXmsgHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LowestPendingXmsgHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalPending != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalPending))
		i--
		dAtA[i] = 0x20
	}
	if len(m.XmsgsPending) > 0 {
		for iNdEx := len(m.XmsgsPending) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.XmsgsPending[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.XmsgsMissed) > 0 {
		for iNdEx := len(m.XmsgsMissed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.XmsgsMissed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryCrosschainFeeParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCrosschainFeeParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosschainFeeParams) > 0 {
		for _, e := range m.CrosschainFeeParams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCrosschainFeeParamByChainIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryCrosschainFeeParamByChainIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CrosschainFeeParam != nil {
		l = m.CrosschainFeeParam.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListAllowedXmsgSendersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryListAllowedXmsgSendersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Builders) > 0 {
		for _, s := range m.Builders {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetOutTxTrackerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryOutTxTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OutTxTracker.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllOutTxTrackerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOutTxTrackerAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OutTxTracker) > 0 {
		for _, e := range m.OutTxTracker {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOutTxTrackerByChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chain != 0 {
		n += 1 + sovQuery(uint64(m.Chain))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOutTxTrackerAllByChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OutTxTrackers) > 0 {
		for _, e := range m.OutTxTrackers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInTxTrackerByChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInTxTrackerAllByChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InTxTrackers) > 0 {
		for _, e := range m.InTxTrackers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInTxTrackersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInTxTrackerAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InTxTrackers) > 0 {
		for _, e := range m.InTxTrackers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInTxHashToXmsgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InTxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInTxHashToXmsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InTxHashToXmsg.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryInTxHashToXmsgDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InTxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInTxHashToXmsgDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Xmsgs) > 0 {
		for _, e := range m.Xmsgs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllInTxHashToXmsgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInTxHashToXmsgAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InTxHashToXmsg) > 0 {
		for _, e := range m.InTxHashToXmsg {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGasPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGasPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasPrice != nil {
		l = m.GasPrice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGasPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGasPriceAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GasPrices) > 0 {
		for _, e := range m.GasPrices {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLastBlockHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastBlockHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastBlockHeight != nil {
		l = m.LastBlockHeight.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLastBlockHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastBlockHeightAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LastBlockHeight) > 0 {
		for _, e := range m.LastBlockHeight {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetXmsgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetXmsgByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryXmsgByNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Xmsg != nil {
		l = m.Xmsg.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryXmsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Xmsg != nil {
		l = m.Xmsg.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllXmsgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryXmsgAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Xmsgs) > 0 {
		for _, e := range m.Xmsgs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListPendingXmsgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	return n
}

func (m *QueryListPendingXmsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Xmsg) > 0 {
		for _, e := range m.Xmsg {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.TotalPending != 0 {
		n += 1 + sovQuery(uint64(m.TotalPending))
	}
	return n
}

func (m *QueryListPendingXmsgWithinRateLimitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	return n
}

func (m *QueryListPendingXmsgWithinRateLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Xmsgs) > 0 {
		for _, e := range m.Xmsgs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.TotalPending != 0 {
		n += 1 + sovQuery(uint64(m.TotalPending))
	}
	if m.CurrentWithdrawWindow != 0 {
		n += 1 + sovQuery(uint64(m.CurrentWithdrawWindow))
	}
	l = len(m.CurrentWithdrawRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RateLimitExceeded {
		n += 2
	}
	return n
}

func (m *QueryLastPellHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastPellHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryRateLimiterFlagsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRateLimiterFlagsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RateLimiterFlags.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryChainIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryChainIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.CurrHeight != 0 {
		n += 1 + sovQuery(uint64(m.CurrHeight))
	}
	return n
}

func (m *QueryBlockProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryBlockProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.PrevBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.PrevBlockHeight))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPellRechargeOperationIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryPellRechargeOperationIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.CurrIndex != 0 {
		n += 1 + sovQuery(uint64(m.CurrIndex))
	}
	return n
}

func (m *QueryGasRechargeOperationIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryGasRechargeOperationIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.CurrIndex != 0 {
		n += 1 + sovQuery(uint64(m.CurrIndex))
	}
	return n
}

func (m *QueryRateLimiterInputRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	if m.Window != 0 {
		n += 1 + sovQuery(uint64(m.Window))
	}
	return n
}

func (m *QueryRateLimiterInputResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if len(m.XmsgsMissed) > 0 {
		for _, e := range m.XmsgsMissed {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.XmsgsPending) > 0 {
		for _, e := range m.XmsgsPending {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.TotalPending != 0 {
		n += 1 + sovQuery(uint64(m.TotalPending))
	}
	if m.LowestPendingXmsgHeight != 0 {
		n += 1 + sovQuery(uint64(m.LowestPendingXmsgHeight))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryCrosschainFeeParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCrosschainFeeParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCrosschainFeeParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCrosschainFeeParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCrosschainFeeParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCrosschainFeeParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainFeeParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainFeeParams = append(m.CrosschainFeeParams, &CrosschainFeeParam{})
			if err := m.CrosschainFeeParams[len(m.CrosschainFeeParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCrosschainFeeParamByChainIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCrosschainFeeParamByChainIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCrosschainFeeParamByChainIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCrosschainFeeParamByChainIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCrosschainFeeParamByChainIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCrosschainFeeParamByChainIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainFeeParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrosschainFeeParam == nil {
				m.CrosschainFeeParam = &CrosschainFeeParam{}
			}
			if err := m.CrosschainFeeParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListAllowedXmsgSendersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListAllowedXmsgSendersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListAllowedXmsgSendersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListAllowedXmsgSendersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListAllowedXmsgSendersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListAllowedXmsgSendersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Builders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Builders = append(m.Builders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOutTxTrackerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOutTxTrackerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOutTxTrackerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutTxTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutTxTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutTxTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutTxTracker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutTxTrackerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutTxTrackerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutTxTrackerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutTxTrackerAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutTxTrackerAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutTxTrackerAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTxTracker = append(m.OutTxTracker, OutTxTracker{})
			if err := m.OutTxTracker[len(m.OutTxTracker)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutTxTrackerByChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutTxTrackerByChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutTxTrackerByChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			m.Chain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chain |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutTxTrackerAllByChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutTxTrackerAllByChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutTxTrackerAllByChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxTrackers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTxTrackers = append(m.OutTxTrackers, OutTxTracker{})
			if err := m.OutTxTrackers[len(m.OutTxTrackers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInTxTrackerByChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInTxTrackerByChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInTxTrackerByChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInTxTrackerAllByChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInTxTrackerAllByChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInTxTrackerAllByChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxTrackers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxTrackers = append(m.InTxTrackers, InTxTracker{})
			if err := m.InTxTrackers[len(m.InTxTrackers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInTxTrackersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInTxTrackersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInTxTrackersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInTxTrackerAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInTxTrackerAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInTxTrackerAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxTrackers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxTrackers = append(m.InTxTrackers, InTxTracker{})
			if err := m.InTxTrackers[len(m.InTxTrackers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInTxHashToXmsgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInTxHashToXmsgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInTxHashToXmsgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInTxHashToXmsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInTxHashToXmsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInTxHashToXmsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHashToXmsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InTxHashToXmsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInTxHashToXmsgDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInTxHashToXmsgDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInTxHashToXmsgDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInTxHashToXmsgDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInTxHashToXmsgDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInTxHashToXmsgDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xmsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xmsgs = append(m.Xmsgs, Xmsg{})
			if err := m.Xmsgs[len(m.Xmsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInTxHashToXmsgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInTxHashToXmsgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInTxHashToXmsgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInTxHashToXmsgAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInTxHashToXmsgAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInTxHashToXmsgAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHashToXmsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHashToXmsg = append(m.InTxHashToXmsg, InTxHashToXmsg{})
			if err := m.InTxHashToXmsg[len(m.InTxHashToXmsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGasPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGasPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGasPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GasPrice == nil {
				m.GasPrice = &GasPrice{}
			}
			if err := m.GasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGasPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGasPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGasPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasPriceAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasPriceAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasPriceAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPrices = append(m.GasPrices, &GasPrice{})
			if err := m.GasPrices[len(m.GasPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastBlockHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastBlockHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastBlockHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastBlockHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastBlockHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastBlockHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastBlockHeight == nil {
				m.LastBlockHeight = &LastBlockHeight{}
			}
			if err := m.LastBlockHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLastBlockHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLastBlockHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLastBlockHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastBlockHeightAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastBlockHeightAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastBlockHeightAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastBlockHeight = append(m.LastBlockHeight, &LastBlockHeight{})
			if err := m.LastBlockHeight[len(m.LastBlockHeight)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetXmsgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetXmsgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetXmsgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetXmsgByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetXmsgByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetXmsgByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryXmsgByNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryXmsgByNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryXmsgByNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xmsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Xmsg == nil {
				m.Xmsg = &Xmsg{}
			}
			if err := m.Xmsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryXmsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryXmsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryXmsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xmsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Xmsg == nil {
				m.Xmsg = &Xmsg{}
			}
			if err := m.Xmsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllXmsgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllXmsgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllXmsgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryXmsgAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryXmsgAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryXmsgAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xmsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xmsgs = append(m.Xmsgs, &Xmsg{})
			if err := m.Xmsgs[len(m.Xmsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListPendingXmsgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListPendingXmsgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListPendingXmsgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListPendingXmsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListPendingXmsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListPendingXmsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xmsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xmsg = append(m.Xmsg, &Xmsg{})
			if err := m.Xmsg[len(m.Xmsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPending", wireType)
			}
			m.TotalPending = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPending |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListPendingXmsgWithinRateLimitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListPendingXmsgWithinRateLimitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListPendingXmsgWithinRateLimitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListPendingXmsgWithinRateLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListPendingXmsgWithinRateLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListPendingXmsgWithinRateLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xmsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xmsgs = append(m.Xmsgs, &Xmsg{})
			if err := m.Xmsgs[len(m.Xmsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPending", wireType)
			}
			m.TotalPending = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPending |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentWithdrawWindow", wireType)
			}
			m.CurrentWithdrawWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentWithdrawWindow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentWithdrawRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentWithdrawRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimitExceeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RateLimitExceeded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPellHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPellHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPellHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPellHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPellHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPellHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimiterFlagsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimiterFlagsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimiterFlagsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimiterFlagsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimiterFlagsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimiterFlagsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiterFlags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RateLimiterFlags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrHeight", wireType)
			}
			m.CurrHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevBlockHeight", wireType)
			}
			m.PrevBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPellRechargeOperationIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPellRechargeOperationIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPellRechargeOperationIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPellRechargeOperationIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPellRechargeOperationIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPellRechargeOperationIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrIndex", wireType)
			}
			m.CurrIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasRechargeOperationIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasRechargeOperationIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasRechargeOperationIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasRechargeOperationIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasRechargeOperationIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasRechargeOperationIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrIndex", wireType)
			}
			m.CurrIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimiterInputRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimiterInputRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimiterInputRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Window", wireType)
			}
			m.Window = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Window |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimiterInputResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimiterInputResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimiterInputResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XmsgsMissed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XmsgsMissed = append(m.XmsgsMissed, &Xmsg{})
			if err := m.XmsgsMissed[len(m.XmsgsMissed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XmsgsPending", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XmsgsPending = append(m.XmsgsPending, &Xmsg{})
			if err := m.XmsgsPending[len(m.XmsgsPending)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPending", wireType)
			}
			m.TotalPending = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPending |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowestPendingXmsgHeight", wireType)
			}
			m.LowestPendingXmsgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowestPendingXmsgHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
