// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xmsg/crosschain_fee_param.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Fee charged when constructing cross-chain xmsg from PEVM events
type CrosschainFeeParam struct {
	ChainId int64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// PellDelegationManagerOperatorSharesIncreased
	// PellDelegationManagerOperatorSharesDecreased
	DelegationOperatorShareEventFee cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=delegation_operator_share_event_fee,json=delegationOperatorShareEventFee,proto3,customtype=cosmossdk.io/math.Int" json:"delegation_operator_share_event_fee"`
	// PellDelegationManagerOperatorRegistered
	// PellDelegationManagerOperatorDetailsModified
	DelegationOperatorSyncFee cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=delegation_operator_sync_fee,json=delegationOperatorSyncFee,proto3,customtype=cosmossdk.io/math.Int" json:"delegation_operator_sync_fee"`
	// RegistryRouterSyncGroup
	RegistryRouterSyncGroupEventFee cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=registry_router_sync_group_event_fee,json=registryRouterSyncGroupEventFee,proto3,customtype=cosmossdk.io/math.Int" json:"registry_router_sync_group_event_fee"`
	DvsDefaultFee                   cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=dvs_default_fee,json=dvsDefaultFee,proto3,customtype=cosmossdk.io/math.Int" json:"dvs_default_fee"`
	PellSentEventFee                cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=pell_sent_event_fee,json=pellSentEventFee,proto3,customtype=cosmossdk.io/math.Int" json:"pell_sent_event_fee"`
	IsSupported                     bool                  `protobuf:"varint,9,opt,name=is_supported,json=isSupported,proto3" json:"is_supported,omitempty"`
}

func (m *CrosschainFeeParam) Reset()         { *m = CrosschainFeeParam{} }
func (m *CrosschainFeeParam) String() string { return proto.CompactTextString(m) }
func (*CrosschainFeeParam) ProtoMessage()    {}
func (*CrosschainFeeParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dcb55132017eb0e, []int{0}
}
func (m *CrosschainFeeParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrosschainFeeParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrosschainFeeParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrosschainFeeParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrosschainFeeParam.Merge(m, src)
}
func (m *CrosschainFeeParam) XXX_Size() int {
	return m.Size()
}
func (m *CrosschainFeeParam) XXX_DiscardUnknown() {
	xxx_messageInfo_CrosschainFeeParam.DiscardUnknown(m)
}

var xxx_messageInfo_CrosschainFeeParam proto.InternalMessageInfo

func (m *CrosschainFeeParam) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *CrosschainFeeParam) GetIsSupported() bool {
	if m != nil {
		return m.IsSupported
	}
	return false
}

func init() {
	proto.RegisterType((*CrosschainFeeParam)(nil), "xmsg.CrosschainFeeParam")
}

func init() { proto.RegisterFile("xmsg/crosschain_fee_param.proto", fileDescriptor_9dcb55132017eb0e) }

var fileDescriptor_9dcb55132017eb0e = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x8e, 0xd3, 0x30,
	0x14, 0x85, 0x13, 0x51, 0x66, 0x3a, 0x06, 0x04, 0x0a, 0x20, 0x75, 0x10, 0x24, 0xe5, 0x67, 0x51,
	0x09, 0x29, 0x41, 0xe2, 0x0d, 0x06, 0x3a, 0x68, 0x24, 0x04, 0xa3, 0x74, 0xc7, 0x02, 0xcb, 0x13,
	0xdf, 0x49, 0xac, 0x26, 0xb9, 0x96, 0xed, 0x94, 0xe6, 0x2d, 0x78, 0x06, 0x9e, 0xa6, 0xcb, 0x2e,
	0x11, 0x8b, 0x0a, 0xb5, 0x2f, 0x82, 0x9c, 0xf4, 0x87, 0x45, 0x17, 0xd9, 0x25, 0xd7, 0x3e, 0xdf,
	0x39, 0xc7, 0xba, 0x24, 0x98, 0x17, 0x3a, 0x8d, 0x12, 0x85, 0x5a, 0x27, 0x19, 0x13, 0x25, 0xbd,
	0x05, 0xa0, 0x92, 0x29, 0x56, 0x84, 0x52, 0xa1, 0x41, 0xaf, 0x67, 0x2f, 0x3c, 0x7b, 0x92, 0x62,
	0x8a, 0xcd, 0x20, 0xb2, 0x5f, 0xed, 0xd9, 0xab, 0x5f, 0x3d, 0xe2, 0x7d, 0xd8, 0x4b, 0x2f, 0x01,
	0xae, 0xad, 0xd0, 0x3b, 0x27, 0xfd, 0x96, 0x25, 0xf8, 0xc0, 0x1d, 0xba, 0xa3, 0x3b, 0xf1, 0x69,
	0xf3, 0x7f, 0xc5, 0xbd, 0x29, 0x79, 0xcd, 0x21, 0x87, 0x94, 0x19, 0x81, 0x25, 0x45, 0x09, 0x8a,
	0x19, 0x54, 0x54, 0x67, 0x4c, 0x01, 0x85, 0x19, 0x94, 0xc6, 0x06, 0x18, 0xf4, 0x86, 0xee, 0xe8,
	0xec, 0xe2, 0xc5, 0x62, 0x15, 0x38, 0x7f, 0x56, 0xc1, 0xd3, 0x04, 0x75, 0x81, 0x5a, 0xf3, 0x69,
	0x28, 0x30, 0x2a, 0x98, 0xc9, 0xc2, 0xab, 0xd2, 0xc4, 0xc1, 0x81, 0xf4, 0x75, 0x0b, 0x9a, 0x58,
	0xce, 0xd8, 0x62, 0x2e, 0x01, 0xbc, 0xef, 0xe4, 0xf9, 0x51, 0xb3, 0xba, 0x4c, 0x1a, 0x97, 0xbb,
	0x5d, 0x5c, 0xce, 0x8f, 0xb8, 0xd4, 0x65, 0x62, 0xf9, 0x39, 0x79, 0xa3, 0x20, 0x15, 0xda, 0xa8,
	0x9a, 0x2a, 0xac, 0x0c, 0x6c, 0xd9, 0xa9, 0xc2, 0x4a, 0xfe, 0xd7, 0xe6, 0xa4, 0x53, 0x9b, 0x1d,
	0x2a, 0x6e, 0x48, 0xd6, 0xe3, 0x93, 0xe5, 0xec, 0xdb, 0x8c, 0xc9, 0x43, 0x3e, 0xd3, 0x94, 0xc3,
	0x2d, 0xab, 0xf2, 0x16, 0x7c, 0xda, 0x05, 0xfc, 0x80, 0xcf, 0xf4, 0xc7, 0x56, 0x64, 0x31, 0x9f,
	0xc9, 0x63, 0x09, 0x79, 0x4e, 0xb5, 0x4d, 0x77, 0xc8, 0xd8, 0xef, 0x82, 0x7a, 0x64, 0x95, 0x13,
	0x28, 0xcd, 0x3e, 0xd4, 0x4b, 0x72, 0x5f, 0x68, 0xaa, 0x2b, 0x29, 0x51, 0x19, 0xe0, 0x83, 0xb3,
	0xa1, 0x3b, 0xea, 0xc7, 0xf7, 0x84, 0x9e, 0xec, 0x46, 0x17, 0xe3, 0xc5, 0xda, 0x77, 0x97, 0x6b,
	0xdf, 0xfd, 0xbb, 0xf6, 0xdd, 0x9f, 0x1b, 0xdf, 0x59, 0x6e, 0x7c, 0xe7, 0xf7, 0xc6, 0x77, 0xbe,
	0xbd, 0x4d, 0x85, 0xc9, 0xaa, 0x9b, 0x30, 0xc1, 0x22, 0x7a, 0x37, 0xbf, 0x86, 0x3c, 0xff, 0x02,
	0xe6, 0x07, 0xaa, 0x69, 0xc4, 0xec, 0x5b, 0x44, 0xf3, 0xa8, 0x59, 0x4e, 0x53, 0x4b, 0xd0, 0x37,
	0x27, 0xcd, 0xca, 0xbd, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x8d, 0x94, 0x1c, 0xb1, 0x02,
	0x00, 0x00,
}

func (m *CrosschainFeeParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrosschainFeeParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrosschainFeeParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSupported {
		i--
		if m.IsSupported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.PellSentEventFee.Size()
		i -= size
		if _, err := m.PellSentEventFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrosschainFeeParam(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.DvsDefaultFee.Size()
		i -= size
		if _, err := m.DvsDefaultFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrosschainFeeParam(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.RegistryRouterSyncGroupEventFee.Size()
		i -= size
		if _, err := m.RegistryRouterSyncGroupEventFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrosschainFeeParam(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.DelegationOperatorSyncFee.Size()
		i -= size
		if _, err := m.DelegationOperatorSyncFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrosschainFeeParam(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.DelegationOperatorShareEventFee.Size()
		i -= size
		if _, err := m.DelegationOperatorShareEventFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrosschainFeeParam(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ChainId != 0 {
		i = encodeVarintCrosschainFeeParam(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrosschainFeeParam(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrosschainFeeParam(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrosschainFeeParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovCrosschainFeeParam(uint64(m.ChainId))
	}
	l = m.DelegationOperatorShareEventFee.Size()
	n += 1 + l + sovCrosschainFeeParam(uint64(l))
	l = m.DelegationOperatorSyncFee.Size()
	n += 1 + l + sovCrosschainFeeParam(uint64(l))
	l = m.RegistryRouterSyncGroupEventFee.Size()
	n += 1 + l + sovCrosschainFeeParam(uint64(l))
	l = m.DvsDefaultFee.Size()
	n += 1 + l + sovCrosschainFeeParam(uint64(l))
	l = m.PellSentEventFee.Size()
	n += 1 + l + sovCrosschainFeeParam(uint64(l))
	if m.IsSupported {
		n += 2
	}
	return n
}

func sovCrosschainFeeParam(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrosschainFeeParam(x uint64) (n int) {
	return sovCrosschainFeeParam(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrosschainFeeParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainFeeParam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrosschainFeeParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrosschainFeeParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainFeeParam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationOperatorShareEventFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainFeeParam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainFeeParam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainFeeParam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationOperatorShareEventFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationOperatorSyncFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainFeeParam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainFeeParam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainFeeParam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationOperatorSyncFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryRouterSyncGroupEventFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainFeeParam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainFeeParam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainFeeParam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegistryRouterSyncGroupEventFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DvsDefaultFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainFeeParam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainFeeParam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainFeeParam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DvsDefaultFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PellSentEventFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainFeeParam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainFeeParam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainFeeParam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PellSentEventFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSupported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainFeeParam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSupported = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainFeeParam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainFeeParam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrosschainFeeParam(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrosschainFeeParam
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosschainFeeParam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosschainFeeParam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrosschainFeeParam
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrosschainFeeParam
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrosschainFeeParam
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrosschainFeeParam        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrosschainFeeParam          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrosschainFeeParam = fmt.Errorf("proto: unexpected end of group")
)
