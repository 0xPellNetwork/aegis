// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xmsg/chain_index.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// event process status
type EventStatus int32

const (
	//  pending status
	EventStatus_PENDING EventStatus = 0
	// done status
	EventStatus_DONE EventStatus = 1
)

var EventStatus_name = map[int32]string{
	0: "PENDING",
	1: "DONE",
}

var EventStatus_value = map[string]int32{
	"PENDING": 0,
	"DONE":    1,
}

func (x EventStatus) String() string {
	return proto.EnumName(EventStatus_name, int32(x))
}

func (EventStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ca34e91a2b36d7f8, []int{0}
}

// chain_index represent inbound chain index
type ChainIndex struct {
	ChainId    uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	CurrHeight uint64 `protobuf:"varint,2,opt,name=curr_height,json=currHeight,proto3" json:"curr_height,omitempty"`
}

func (m *ChainIndex) Reset()         { *m = ChainIndex{} }
func (m *ChainIndex) String() string { return proto.CompactTextString(m) }
func (*ChainIndex) ProtoMessage()    {}
func (*ChainIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca34e91a2b36d7f8, []int{0}
}
func (m *ChainIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainIndex.Merge(m, src)
}
func (m *ChainIndex) XXX_Size() int {
	return m.Size()
}
func (m *ChainIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainIndex.DiscardUnknown(m)
}

var xxx_messageInfo_ChainIndex proto.InternalMessageInfo

func (m *ChainIndex) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ChainIndex) GetCurrHeight() uint64 {
	if m != nil {
		return m.CurrHeight
	}
	return 0
}

// block proof represent observer commit block info
type BlockProof struct {
	ChainId         uint64   `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	PrevBlockHeight uint64   `protobuf:"varint,2,opt,name=prev_block_height,json=prevBlockHeight,proto3" json:"prev_block_height,omitempty"`
	BlockHeight     uint64   `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockHash       string   `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Events          []*Event `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *BlockProof) Reset()         { *m = BlockProof{} }
func (m *BlockProof) String() string { return proto.CompactTextString(m) }
func (*BlockProof) ProtoMessage()    {}
func (*BlockProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca34e91a2b36d7f8, []int{1}
}
func (m *BlockProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockProof.Merge(m, src)
}
func (m *BlockProof) XXX_Size() int {
	return m.Size()
}
func (m *BlockProof) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockProof.DiscardUnknown(m)
}

var xxx_messageInfo_BlockProof proto.InternalMessageInfo

func (m *BlockProof) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *BlockProof) GetPrevBlockHeight() uint64 {
	if m != nil {
		return m.PrevBlockHeight
	}
	return 0
}

func (m *BlockProof) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *BlockProof) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *BlockProof) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

// evm event log
type Event struct {
	Index  uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	TxHash string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Digest string `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	// vote inbound msg digest
	PellEvent *InboundPellEvent `protobuf:"bytes,4,opt,name=pell_event,json=pellEvent,proto3" json:"pell_event,omitempty"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca34e91a2b36d7f8, []int{2}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Event) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *Event) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *Event) GetPellEvent() *InboundPellEvent {
	if m != nil {
		return m.PellEvent
	}
	return nil
}

// evm event log
type EventStatusNode struct {
	PrevEventIndex    string      `protobuf:"bytes,1,opt,name=prev_event_index,json=prevEventIndex,proto3" json:"prev_event_index,omitempty"`
	NextEventIndex    string      `protobuf:"bytes,2,opt,name=next_event_index,json=nextEventIndex,proto3" json:"next_event_index,omitempty"`
	EventIndexInBlock uint64      `protobuf:"varint,3,opt,name=event_index_in_block,json=eventIndexInBlock,proto3" json:"event_index_in_block,omitempty"`
	Status            EventStatus `protobuf:"varint,4,opt,name=status,proto3,enum=xmsg.EventStatus" json:"status,omitempty"`
}

func (m *EventStatusNode) Reset()         { *m = EventStatusNode{} }
func (m *EventStatusNode) String() string { return proto.CompactTextString(m) }
func (*EventStatusNode) ProtoMessage()    {}
func (*EventStatusNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca34e91a2b36d7f8, []int{3}
}
func (m *EventStatusNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStatusNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStatusNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStatusNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStatusNode.Merge(m, src)
}
func (m *EventStatusNode) XXX_Size() int {
	return m.Size()
}
func (m *EventStatusNode) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStatusNode.DiscardUnknown(m)
}

var xxx_messageInfo_EventStatusNode proto.InternalMessageInfo

func (m *EventStatusNode) GetPrevEventIndex() string {
	if m != nil {
		return m.PrevEventIndex
	}
	return ""
}

func (m *EventStatusNode) GetNextEventIndex() string {
	if m != nil {
		return m.NextEventIndex
	}
	return ""
}

func (m *EventStatusNode) GetEventIndexInBlock() uint64 {
	if m != nil {
		return m.EventIndexInBlock
	}
	return 0
}

func (m *EventStatusNode) GetStatus() EventStatus {
	if m != nil {
		return m.Status
	}
	return EventStatus_PENDING
}

func init() {
	proto.RegisterEnum("xmsg.EventStatus", EventStatus_name, EventStatus_value)
	proto.RegisterType((*ChainIndex)(nil), "xmsg.ChainIndex")
	proto.RegisterType((*BlockProof)(nil), "xmsg.BlockProof")
	proto.RegisterType((*Event)(nil), "xmsg.Event")
	proto.RegisterType((*EventStatusNode)(nil), "xmsg.EventStatusNode")
}

func init() { proto.RegisterFile("xmsg/chain_index.proto", fileDescriptor_ca34e91a2b36d7f8) }

var fileDescriptor_ca34e91a2b36d7f8 = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0xad, 0x4d, 0x97, 0x17, 0xd4, 0xb5, 0xd6, 0x28, 0x05, 0x89, 0x50, 0x0a, 0x87,
	0x30, 0x44, 0x2b, 0x15, 0xf1, 0x05, 0xc6, 0x2a, 0x96, 0x4b, 0xa9, 0xc2, 0x8d, 0x4b, 0xd4, 0x24,
	0xa6, 0x89, 0xc8, 0xec, 0x28, 0x76, 0xa7, 0xf0, 0x01, 0xb8, 0xf3, 0x79, 0xb8, 0x71, 0xe3, 0xb8,
	0x23, 0x47, 0xd4, 0x7e, 0x11, 0xe4, 0xe7, 0xc0, 0xd2, 0x0b, 0x37, 0xfb, 0xff, 0x7e, 0x7e, 0xfe,
	0xfb, 0xef, 0x07, 0xc3, 0xea, 0x5a, 0x6e, 0x66, 0x71, 0xba, 0xce, 0x78, 0x98, 0xf1, 0x84, 0x55,
	0xd3, 0xa2, 0x14, 0x4a, 0xd0, 0xb6, 0xd6, 0x1f, 0xdd, 0xc7, 0x6a, 0xc1, 0xf2, 0x3c, 0x64, 0x37,
	0x8c, 0x2b, 0x53, 0x9c, 0x5c, 0x01, 0xbc, 0xd5, 0x27, 0x7c, 0x7d, 0x80, 0x3e, 0x84, 0x93, 0xfa,
	0x7c, 0x32, 0x22, 0x63, 0xe2, 0xb5, 0x83, 0x2e, 0xee, 0xfd, 0x84, 0x3e, 0x01, 0x27, 0xde, 0x96,
	0x65, 0x98, 0xb2, 0x6c, 0x93, 0xaa, 0xd1, 0x11, 0x56, 0x41, 0x4b, 0x57, 0xa8, 0x4c, 0xbe, 0x13,
	0x80, 0x8b, 0x5c, 0xc4, 0x9f, 0x57, 0xa5, 0x10, 0x9f, 0xfe, 0xd7, 0xea, 0x1c, 0x06, 0x45, 0xc9,
	0x6e, 0xc2, 0x48, 0xd3, 0x87, 0x0d, 0x4f, 0x75, 0x01, 0xbb, 0x98, 0xae, 0xf4, 0x29, 0xdc, 0x3b,
	0xc0, 0x8e, 0x11, 0x73, 0xa2, 0x06, 0xf2, 0x18, 0xa0, 0x46, 0xd6, 0x32, 0x1d, 0xb5, 0xc7, 0xc4,
	0xb3, 0x03, 0xdb, 0x00, 0x6b, 0x99, 0xd2, 0x67, 0x60, 0xe1, 0x83, 0xe5, 0xa8, 0x33, 0x3e, 0xf6,
	0x9c, 0xb9, 0x33, 0xd5, 0x49, 0x4c, 0x17, 0x5a, 0x0b, 0xea, 0xd2, 0xe4, 0x2b, 0x81, 0x0e, 0x2a,
	0xf4, 0x0c, 0x3a, 0x18, 0x5e, 0x6d, 0xda, 0x6c, 0xe8, 0x03, 0xe8, 0xaa, 0xca, 0x5c, 0x70, 0x84,
	0x17, 0x58, 0xaa, 0xc2, 0xee, 0x43, 0xb0, 0x92, 0x6c, 0xc3, 0xa4, 0x71, 0x66, 0x07, 0xf5, 0x8e,
	0xbe, 0x01, 0xb8, 0xcb, 0x1a, 0x4d, 0x39, 0xf3, 0xa1, 0xb9, 0xd9, 0xe7, 0x91, 0xd8, 0xf2, 0x64,
	0xc5, 0xf2, 0xdc, 0x98, 0xb0, 0x8b, 0xbf, 0xcb, 0xc9, 0x0f, 0x02, 0xa7, 0xb8, 0xfa, 0xa0, 0xd6,
	0x6a, 0x2b, 0x97, 0x22, 0x61, 0xd4, 0x83, 0x3e, 0xc6, 0x85, 0xad, 0xc2, 0x3b, 0x73, 0x76, 0xd0,
	0xd3, 0x3a, 0xe2, 0xe6, 0xfb, 0x3c, 0xe8, 0x73, 0x56, 0xa9, 0x03, 0xd2, 0xd8, 0xed, 0x69, 0xbd,
	0x41, 0xce, 0xe0, 0xac, 0x01, 0x85, 0x19, 0x37, 0x9f, 0x51, 0xc7, 0x3b, 0x60, 0xff, 0x48, 0x9f,
	0xe3, 0x6f, 0xd0, 0x17, 0x60, 0x49, 0xb4, 0x84, 0x6f, 0xe9, 0xcd, 0x07, 0x8d, 0x14, 0x8d, 0xd7,
	0xa0, 0x06, 0xce, 0x9f, 0x83, 0xd3, 0x90, 0xa9, 0x03, 0xdd, 0xd5, 0x62, 0x79, 0xe9, 0x2f, 0xdf,
	0xf5, 0x5b, 0xf4, 0x04, 0xda, 0x97, 0xef, 0x97, 0x8b, 0x3e, 0xb9, 0x58, 0xfc, 0xdc, 0xb9, 0xe4,
	0x76, 0xe7, 0x92, 0xdf, 0x3b, 0x97, 0x7c, 0xdb, 0xbb, 0xad, 0xdb, 0xbd, 0xdb, 0xfa, 0xb5, 0x77,
	0x5b, 0x1f, 0x5f, 0x6e, 0x32, 0x95, 0x6e, 0xa3, 0x69, 0x2c, 0xae, 0x71, 0x5e, 0x5f, 0xe1, 0xdc,
	0xe0, 0x32, 0x16, 0x25, 0x9b, 0x55, 0x33, 0x1c, 0x65, 0xf5, 0xa5, 0x60, 0x32, 0xb2, 0x70, 0x8c,
	0x5f, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x58, 0x10, 0xe7, 0xfd, 0x02, 0x00, 0x00,
}

func (m *ChainIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrHeight != 0 {
		i = encodeVarintChainIndex(dAtA, i, uint64(m.CurrHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintChainIndex(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChainIndex(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintChainIndex(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintChainIndex(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.PrevBlockHeight != 0 {
		i = encodeVarintChainIndex(dAtA, i, uint64(m.PrevBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintChainIndex(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PellEvent != nil {
		{
			size, err := m.PellEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainIndex(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Digest) > 0 {
		i -= len(m.Digest)
		copy(dAtA[i:], m.Digest)
		i = encodeVarintChainIndex(dAtA, i, uint64(len(m.Digest)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintChainIndex(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintChainIndex(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventStatusNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStatusNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStatusNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintChainIndex(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.EventIndexInBlock != 0 {
		i = encodeVarintChainIndex(dAtA, i, uint64(m.EventIndexInBlock))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NextEventIndex) > 0 {
		i -= len(m.NextEventIndex)
		copy(dAtA[i:], m.NextEventIndex)
		i = encodeVarintChainIndex(dAtA, i, uint64(len(m.NextEventIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PrevEventIndex) > 0 {
		i -= len(m.PrevEventIndex)
		copy(dAtA[i:], m.PrevEventIndex)
		i = encodeVarintChainIndex(dAtA, i, uint64(len(m.PrevEventIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChainIndex(dAtA []byte, offset int, v uint64) int {
	offset -= sovChainIndex(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovChainIndex(uint64(m.ChainId))
	}
	if m.CurrHeight != 0 {
		n += 1 + sovChainIndex(uint64(m.CurrHeight))
	}
	return n
}

func (m *BlockProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovChainIndex(uint64(m.ChainId))
	}
	if m.PrevBlockHeight != 0 {
		n += 1 + sovChainIndex(uint64(m.PrevBlockHeight))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovChainIndex(uint64(m.BlockHeight))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovChainIndex(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovChainIndex(uint64(l))
		}
	}
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovChainIndex(uint64(m.Index))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovChainIndex(uint64(l))
	}
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovChainIndex(uint64(l))
	}
	if m.PellEvent != nil {
		l = m.PellEvent.Size()
		n += 1 + l + sovChainIndex(uint64(l))
	}
	return n
}

func (m *EventStatusNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PrevEventIndex)
	if l > 0 {
		n += 1 + l + sovChainIndex(uint64(l))
	}
	l = len(m.NextEventIndex)
	if l > 0 {
		n += 1 + l + sovChainIndex(uint64(l))
	}
	if m.EventIndexInBlock != 0 {
		n += 1 + sovChainIndex(uint64(m.EventIndexInBlock))
	}
	if m.Status != 0 {
		n += 1 + sovChainIndex(uint64(m.Status))
	}
	return n
}

func sovChainIndex(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChainIndex(x uint64) (n int) {
	return sovChainIndex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrHeight", wireType)
			}
			m.CurrHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChainIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevBlockHeight", wireType)
			}
			m.PrevBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainIndex
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PellEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainIndex
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PellEvent == nil {
				m.PellEvent = &InboundPellEvent{}
			}
			if err := m.PellEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStatusNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStatusNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStatusNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevEventIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevEventIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEventIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextEventIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventIndexInBlock", wireType)
			}
			m.EventIndexInBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventIndexInBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= EventStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChainIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChainIndex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChainIndex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChainIndex
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChainIndex
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChainIndex
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChainIndex        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChainIndex          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChainIndex = fmt.Errorf("proto: unexpected end of group")
)
