// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xmsg/events.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// inbound tx finalized event
type EventInboundFinalized struct {
	MsgTypeUrl    string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	XmsgIndex     string `protobuf:"bytes,2,opt,name=xmsg_index,json=xmsgIndex,proto3" json:"xmsg_index,omitempty"`
	Sender        string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	TxOrgin       string `protobuf:"bytes,4,opt,name=tx_orgin,json=txOrgin,proto3" json:"tx_orgin,omitempty"`
	InTxHash      string `protobuf:"bytes,6,opt,name=in_tx_hash,json=inTxHash,proto3" json:"in_tx_hash,omitempty"`
	InBlockHeight string `protobuf:"bytes,7,opt,name=in_block_height,json=inBlockHeight,proto3" json:"in_block_height,omitempty"`
	Receiver      string `protobuf:"bytes,8,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverChain string `protobuf:"bytes,9,opt,name=receiver_chain,json=receiverChain,proto3" json:"receiver_chain,omitempty"`
	NewStatus     string `protobuf:"bytes,12,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	StatusMessage string `protobuf:"bytes,13,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	SenderChain   string `protobuf:"bytes,14,opt,name=sender_chain,json=senderChain,proto3" json:"sender_chain,omitempty"`
}

func (m *EventInboundFinalized) Reset()         { *m = EventInboundFinalized{} }
func (m *EventInboundFinalized) String() string { return proto.CompactTextString(m) }
func (*EventInboundFinalized) ProtoMessage()    {}
func (*EventInboundFinalized) Descriptor() ([]byte, []int) {
	return fileDescriptor_1823f8637d92b134, []int{0}
}
func (m *EventInboundFinalized) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventInboundFinalized) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventInboundFinalized.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventInboundFinalized) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventInboundFinalized.Merge(m, src)
}
func (m *EventInboundFinalized) XXX_Size() int {
	return m.Size()
}
func (m *EventInboundFinalized) XXX_DiscardUnknown() {
	xxx_messageInfo_EventInboundFinalized.DiscardUnknown(m)
}

var xxx_messageInfo_EventInboundFinalized proto.InternalMessageInfo

func (m *EventInboundFinalized) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventInboundFinalized) GetXmsgIndex() string {
	if m != nil {
		return m.XmsgIndex
	}
	return ""
}

func (m *EventInboundFinalized) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventInboundFinalized) GetTxOrgin() string {
	if m != nil {
		return m.TxOrgin
	}
	return ""
}

func (m *EventInboundFinalized) GetInTxHash() string {
	if m != nil {
		return m.InTxHash
	}
	return ""
}

func (m *EventInboundFinalized) GetInBlockHeight() string {
	if m != nil {
		return m.InBlockHeight
	}
	return ""
}

func (m *EventInboundFinalized) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *EventInboundFinalized) GetReceiverChain() string {
	if m != nil {
		return m.ReceiverChain
	}
	return ""
}

func (m *EventInboundFinalized) GetNewStatus() string {
	if m != nil {
		return m.NewStatus
	}
	return ""
}

func (m *EventInboundFinalized) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *EventInboundFinalized) GetSenderChain() string {
	if m != nil {
		return m.SenderChain
	}
	return ""
}

// outbound tx failure event
type EventOutboundFailure struct {
	MsgTypeUrl string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	XmsgIndex  string `protobuf:"bytes,2,opt,name=xmsg_index,json=xmsgIndex,proto3" json:"xmsg_index,omitempty"`
	OldStatus  string `protobuf:"bytes,3,opt,name=old_status,json=oldStatus,proto3" json:"old_status,omitempty"`
	NewStatus  string `protobuf:"bytes,4,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
}

func (m *EventOutboundFailure) Reset()         { *m = EventOutboundFailure{} }
func (m *EventOutboundFailure) String() string { return proto.CompactTextString(m) }
func (*EventOutboundFailure) ProtoMessage()    {}
func (*EventOutboundFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_1823f8637d92b134, []int{1}
}
func (m *EventOutboundFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOutboundFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutboundFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOutboundFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutboundFailure.Merge(m, src)
}
func (m *EventOutboundFailure) XXX_Size() int {
	return m.Size()
}
func (m *EventOutboundFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutboundFailure.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutboundFailure proto.InternalMessageInfo

func (m *EventOutboundFailure) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventOutboundFailure) GetXmsgIndex() string {
	if m != nil {
		return m.XmsgIndex
	}
	return ""
}

func (m *EventOutboundFailure) GetOldStatus() string {
	if m != nil {
		return m.OldStatus
	}
	return ""
}

func (m *EventOutboundFailure) GetNewStatus() string {
	if m != nil {
		return m.NewStatus
	}
	return ""
}

// outbound tx successful event
type EventOutboundSuccess struct {
	MsgTypeUrl string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	XmsgIndex  string `protobuf:"bytes,2,opt,name=xmsg_index,json=xmsgIndex,proto3" json:"xmsg_index,omitempty"`
	OldStatus  string `protobuf:"bytes,3,opt,name=old_status,json=oldStatus,proto3" json:"old_status,omitempty"`
	NewStatus  string `protobuf:"bytes,4,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
}

func (m *EventOutboundSuccess) Reset()         { *m = EventOutboundSuccess{} }
func (m *EventOutboundSuccess) String() string { return proto.CompactTextString(m) }
func (*EventOutboundSuccess) ProtoMessage()    {}
func (*EventOutboundSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_1823f8637d92b134, []int{2}
}
func (m *EventOutboundSuccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOutboundSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutboundSuccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOutboundSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutboundSuccess.Merge(m, src)
}
func (m *EventOutboundSuccess) XXX_Size() int {
	return m.Size()
}
func (m *EventOutboundSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutboundSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutboundSuccess proto.InternalMessageInfo

func (m *EventOutboundSuccess) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventOutboundSuccess) GetXmsgIndex() string {
	if m != nil {
		return m.XmsgIndex
	}
	return ""
}

func (m *EventOutboundSuccess) GetOldStatus() string {
	if m != nil {
		return m.OldStatus
	}
	return ""
}

func (m *EventOutboundSuccess) GetNewStatus() string {
	if m != nil {
		return m.NewStatus
	}
	return ""
}

// pell sent msg event
type EventPellSent struct {
	MsgTypeUrl          string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	XmsgIndex           string `protobuf:"bytes,2,opt,name=xmsg_index,json=xmsgIndex,proto3" json:"xmsg_index,omitempty"`
	Sender              string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	SenderChain         string `protobuf:"bytes,4,opt,name=sender_chain,json=senderChain,proto3" json:"sender_chain,omitempty"`
	InTxHash            string `protobuf:"bytes,5,opt,name=in_tx_hash,json=inTxHash,proto3" json:"in_tx_hash,omitempty"`
	Receiver            string `protobuf:"bytes,6,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverChain       string `protobuf:"bytes,7,opt,name=receiver_chain,json=receiverChain,proto3" json:"receiver_chain,omitempty"`
	PellTxOrigin        string `protobuf:"bytes,8,opt,name=pell_tx_origin,json=pellTxOrigin,proto3" json:"pell_tx_origin,omitempty"`
	PellSender          string `protobuf:"bytes,9,opt,name=pell_sender,json=pellSender,proto3" json:"pell_sender,omitempty"`
	PellReceiver        string `protobuf:"bytes,10,opt,name=pell_receiver,json=pellReceiver,proto3" json:"pell_receiver,omitempty"`
	PellReceiverChainId int64  `protobuf:"varint,11,opt,name=pell_receiver_chain_id,json=pellReceiverChainId,proto3" json:"pell_receiver_chain_id,omitempty"`
	PellMessage         string `protobuf:"bytes,12,opt,name=pell_message,json=pellMessage,proto3" json:"pell_message,omitempty"`
	PellParams          string `protobuf:"bytes,13,opt,name=pell_params,json=pellParams,proto3" json:"pell_params,omitempty"`
	NewStatus           string `protobuf:"bytes,14,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
}

func (m *EventPellSent) Reset()         { *m = EventPellSent{} }
func (m *EventPellSent) String() string { return proto.CompactTextString(m) }
func (*EventPellSent) ProtoMessage()    {}
func (*EventPellSent) Descriptor() ([]byte, []int) {
	return fileDescriptor_1823f8637d92b134, []int{3}
}
func (m *EventPellSent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPellSent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPellSent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPellSent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPellSent.Merge(m, src)
}
func (m *EventPellSent) XXX_Size() int {
	return m.Size()
}
func (m *EventPellSent) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPellSent.DiscardUnknown(m)
}

var xxx_messageInfo_EventPellSent proto.InternalMessageInfo

func (m *EventPellSent) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventPellSent) GetXmsgIndex() string {
	if m != nil {
		return m.XmsgIndex
	}
	return ""
}

func (m *EventPellSent) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventPellSent) GetSenderChain() string {
	if m != nil {
		return m.SenderChain
	}
	return ""
}

func (m *EventPellSent) GetInTxHash() string {
	if m != nil {
		return m.InTxHash
	}
	return ""
}

func (m *EventPellSent) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *EventPellSent) GetReceiverChain() string {
	if m != nil {
		return m.ReceiverChain
	}
	return ""
}

func (m *EventPellSent) GetPellTxOrigin() string {
	if m != nil {
		return m.PellTxOrigin
	}
	return ""
}

func (m *EventPellSent) GetPellSender() string {
	if m != nil {
		return m.PellSender
	}
	return ""
}

func (m *EventPellSent) GetPellReceiver() string {
	if m != nil {
		return m.PellReceiver
	}
	return ""
}

func (m *EventPellSent) GetPellReceiverChainId() int64 {
	if m != nil {
		return m.PellReceiverChainId
	}
	return 0
}

func (m *EventPellSent) GetPellMessage() string {
	if m != nil {
		return m.PellMessage
	}
	return ""
}

func (m *EventPellSent) GetPellParams() string {
	if m != nil {
		return m.PellParams
	}
	return ""
}

func (m *EventPellSent) GetNewStatus() string {
	if m != nil {
		return m.NewStatus
	}
	return ""
}

// increased xmsg gas price event
type EventXmsgGasPriceIncreased struct {
	XmsgIndex        string `protobuf:"bytes,1,opt,name=xmsg_index,json=xmsgIndex,proto3" json:"xmsg_index,omitempty"`
	GasPriceIncrease string `protobuf:"bytes,2,opt,name=gas_price_increase,json=gasPriceIncrease,proto3" json:"gas_price_increase,omitempty"`
	AdditionalFees   string `protobuf:"bytes,3,opt,name=additional_fees,json=additionalFees,proto3" json:"additional_fees,omitempty"`
}

func (m *EventXmsgGasPriceIncreased) Reset()         { *m = EventXmsgGasPriceIncreased{} }
func (m *EventXmsgGasPriceIncreased) String() string { return proto.CompactTextString(m) }
func (*EventXmsgGasPriceIncreased) ProtoMessage()    {}
func (*EventXmsgGasPriceIncreased) Descriptor() ([]byte, []int) {
	return fileDescriptor_1823f8637d92b134, []int{4}
}
func (m *EventXmsgGasPriceIncreased) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventXmsgGasPriceIncreased) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventXmsgGasPriceIncreased.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventXmsgGasPriceIncreased) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventXmsgGasPriceIncreased.Merge(m, src)
}
func (m *EventXmsgGasPriceIncreased) XXX_Size() int {
	return m.Size()
}
func (m *EventXmsgGasPriceIncreased) XXX_DiscardUnknown() {
	xxx_messageInfo_EventXmsgGasPriceIncreased.DiscardUnknown(m)
}

var xxx_messageInfo_EventXmsgGasPriceIncreased proto.InternalMessageInfo

func (m *EventXmsgGasPriceIncreased) GetXmsgIndex() string {
	if m != nil {
		return m.XmsgIndex
	}
	return ""
}

func (m *EventXmsgGasPriceIncreased) GetGasPriceIncrease() string {
	if m != nil {
		return m.GasPriceIncrease
	}
	return ""
}

func (m *EventXmsgGasPriceIncreased) GetAdditionalFees() string {
	if m != nil {
		return m.AdditionalFees
	}
	return ""
}

// chain index event - contains the current height of the chain
type EventChainIndex struct {
	ChainId    uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	CurrHeight uint64 `protobuf:"varint,2,opt,name=curr_height,json=currHeight,proto3" json:"curr_height,omitempty"`
}

func (m *EventChainIndex) Reset()         { *m = EventChainIndex{} }
func (m *EventChainIndex) String() string { return proto.CompactTextString(m) }
func (*EventChainIndex) ProtoMessage()    {}
func (*EventChainIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_1823f8637d92b134, []int{5}
}
func (m *EventChainIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChainIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChainIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChainIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChainIndex.Merge(m, src)
}
func (m *EventChainIndex) XXX_Size() int {
	return m.Size()
}
func (m *EventChainIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChainIndex.DiscardUnknown(m)
}

var xxx_messageInfo_EventChainIndex proto.InternalMessageInfo

func (m *EventChainIndex) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *EventChainIndex) GetCurrHeight() uint64 {
	if m != nil {
		return m.CurrHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*EventInboundFinalized)(nil), "xmsg.EventInboundFinalized")
	proto.RegisterType((*EventOutboundFailure)(nil), "xmsg.EventOutboundFailure")
	proto.RegisterType((*EventOutboundSuccess)(nil), "xmsg.EventOutboundSuccess")
	proto.RegisterType((*EventPellSent)(nil), "xmsg.EventPellSent")
	proto.RegisterType((*EventXmsgGasPriceIncreased)(nil), "xmsg.EventXmsgGasPriceIncreased")
	proto.RegisterType((*EventChainIndex)(nil), "xmsg.EventChainIndex")
}

func init() { proto.RegisterFile("xmsg/events.proto", fileDescriptor_1823f8637d92b134) }

var fileDescriptor_1823f8637d92b134 = []byte{
	// 661 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xcb, 0x4e, 0xdc, 0x4a,
	0x10, 0xc5, 0x30, 0x77, 0x1e, 0x35, 0x0f, 0xee, 0xf5, 0x4d, 0x90, 0x41, 0x61, 0x20, 0xe4, 0x85,
	0x94, 0x84, 0x59, 0xf0, 0x07, 0x44, 0x10, 0x66, 0x81, 0x40, 0x03, 0x91, 0xa2, 0x6c, 0x5a, 0x3d,
	0x76, 0xc5, 0xd3, 0x8a, 0xa7, 0x6d, 0x75, 0xdb, 0x60, 0xf2, 0x15, 0x51, 0xa4, 0xfc, 0x53, 0x96,
	0x2c, 0xb3, 0x8c, 0xe0, 0x07, 0xf2, 0x03, 0x91, 0xa2, 0xae, 0xb6, 0x79, 0x98, 0x48, 0x59, 0x44,
	0x51, 0x76, 0xf6, 0xa9, 0xea, 0xea, 0x53, 0x75, 0x4e, 0x35, 0xfc, 0x97, 0x4f, 0x75, 0x38, 0xc0,
	0x63, 0x94, 0xa9, 0xde, 0x48, 0x54, 0x9c, 0xc6, 0x6e, 0xcd, 0x40, 0x6b, 0xdf, 0x67, 0xe1, 0xee,
	0xb6, 0x81, 0x87, 0x72, 0x1c, 0x67, 0x32, 0xd8, 0x11, 0x92, 0x47, 0xe2, 0x3d, 0x06, 0xee, 0x2a,
	0x74, 0xa6, 0x3a, 0x64, 0xe9, 0x69, 0x82, 0x2c, 0x53, 0x91, 0xe7, 0xac, 0x3a, 0xeb, 0xad, 0x11,
	0x4c, 0x75, 0x78, 0x74, 0x9a, 0xe0, 0x2b, 0x15, 0xb9, 0xcb, 0x00, 0xa6, 0x06, 0x13, 0x32, 0xc0,
	0xdc, 0x9b, 0xa5, 0x78, 0xcb, 0x20, 0x43, 0x03, 0xb8, 0x0b, 0x50, 0xd7, 0x28, 0x03, 0x54, 0xde,
	0x1c, 0x85, 0x8a, 0x3f, 0x77, 0x11, 0x9a, 0x69, 0xce, 0x62, 0x15, 0x0a, 0xe9, 0xd5, 0x28, 0xd2,
	0x48, 0xf3, 0x7d, 0xf3, 0xeb, 0xde, 0x03, 0x10, 0x92, 0xa5, 0x39, 0x9b, 0x70, 0x3d, 0xf1, 0xea,
	0x14, 0x6c, 0x0a, 0x79, 0x94, 0xef, 0x72, 0x3d, 0x71, 0x1f, 0xc3, 0xbc, 0x90, 0x6c, 0x1c, 0xc5,
	0xfe, 0x3b, 0x36, 0x41, 0x11, 0x4e, 0x52, 0xaf, 0x41, 0x29, 0x5d, 0x21, 0xb7, 0x0c, 0xba, 0x4b,
	0xa0, 0xbb, 0x04, 0x4d, 0x85, 0x3e, 0x8a, 0x63, 0x54, 0x5e, 0xd3, 0xd6, 0x28, 0xff, 0xdd, 0x47,
	0xd0, 0x2b, 0xbf, 0x99, 0x3f, 0xe1, 0x42, 0x7a, 0x2d, 0x5b, 0xa2, 0x44, 0x5f, 0x18, 0xd0, 0xb4,
	0x26, 0xf1, 0x84, 0xe9, 0x94, 0xa7, 0x99, 0xf6, 0x3a, 0xb6, 0x35, 0x89, 0x27, 0x87, 0x04, 0x98,
	0x2a, 0x36, 0xc4, 0xa6, 0xa8, 0x35, 0x0f, 0xd1, 0xeb, 0xda, 0x2a, 0x16, 0xdd, 0xb3, 0xa0, 0x7b,
	0x1f, 0x3a, 0xb6, 0xe7, 0xe2, 0xaa, 0x1e, 0x25, 0xb5, 0x2d, 0x46, 0x17, 0xad, 0x7d, 0x72, 0xe0,
	0x0e, 0xcd, 0x7f, 0x3f, 0x4b, 0xad, 0x00, 0x5c, 0x44, 0x99, 0xc2, 0xdf, 0x1f, 0xff, 0x32, 0x40,
	0x1c, 0x05, 0x65, 0x0b, 0x56, 0x82, 0x56, 0x1c, 0x05, 0x45, 0x0b, 0x37, 0x3b, 0xac, 0x55, 0x3a,
	0xbc, 0xcd, 0xeb, 0x30, 0xf3, 0x7d, 0xd4, 0xfa, 0x6f, 0xf3, 0xfa, 0x36, 0x07, 0x5d, 0xe2, 0x75,
	0x80, 0x51, 0x74, 0x88, 0x32, 0xfd, 0x73, 0x3e, 0xad, 0xaa, 0x57, 0xbb, 0xa5, 0x5e, 0xc5, 0xaf,
	0xff, 0x54, 0xfc, 0x7a, 0xdd, 0x87, 0xf5, 0x5f, 0xfa, 0xb0, 0xf1, 0x33, 0x1f, 0x3e, 0x84, 0x5e,
	0x82, 0x51, 0xc4, 0x68, 0x61, 0x84, 0xd9, 0x18, 0x6b, 0xe8, 0x8e, 0x41, 0x8f, 0xf2, 0x7d, 0xc2,
	0xdc, 0x15, 0x68, 0x53, 0x56, 0xd1, 0x86, 0x75, 0x34, 0x24, 0x76, 0x42, 0xa6, 0x95, 0x07, 0xd0,
	0xa5, 0x84, 0x4b, 0x3a, 0x70, 0x55, 0x65, 0x54, 0x52, 0xda, 0x84, 0x85, 0x1b, 0x49, 0x96, 0x17,
	0x13, 0x81, 0xd7, 0x5e, 0x75, 0xd6, 0xe7, 0x46, 0xff, 0x5f, 0xcf, 0x26, 0x7a, 0xc3, 0xc0, 0x0c,
	0x89, 0x0e, 0x95, 0x7b, 0x60, 0x57, 0x85, 0xe8, 0x94, 0x5b, 0x50, 0xb2, 0x4b, 0xb8, 0xe2, 0x53,
	0x5d, 0x6c, 0x0a, 0xb1, 0x3b, 0x20, 0xa4, 0x22, 0x79, 0xaf, 0x2a, 0xf9, 0x47, 0x07, 0x96, 0x48,
	0xf2, 0xd7, 0x53, 0x1d, 0xbe, 0xe4, 0xfa, 0x40, 0x09, 0x1f, 0x87, 0xd2, 0x57, 0xc8, 0x35, 0x06,
	0x15, 0x75, 0x9d, 0xaa, 0xba, 0xcf, 0xc0, 0x0d, 0xb9, 0x66, 0x89, 0x39, 0xc4, 0x44, 0x71, 0xaa,
	0x30, 0xc1, 0xbf, 0x61, 0xa5, 0x9a, 0xfb, 0x04, 0xe6, 0x79, 0x10, 0x88, 0x54, 0xc4, 0x92, 0x47,
	0xec, 0x2d, 0x62, 0xe9, 0xd0, 0xde, 0x15, 0xbc, 0x83, 0xa8, 0xd7, 0xf6, 0x60, 0x9e, 0x38, 0xd9,
	0x39, 0xd0, 0x4d, 0x8b, 0xd0, 0xbc, 0x9c, 0x98, 0xa1, 0x51, 0x1b, 0x35, 0xfc, 0x62, 0x4a, 0x2b,
	0xd0, 0xf6, 0x33, 0xa5, 0xca, 0x57, 0x6b, 0x96, 0xa2, 0x60, 0x20, 0xfb, 0x64, 0x6d, 0x6d, 0x7f,
	0x3e, 0xef, 0x3b, 0x67, 0xe7, 0x7d, 0xe7, 0xeb, 0x79, 0xdf, 0xf9, 0x70, 0xd1, 0x9f, 0x39, 0xbb,
	0xe8, 0xcf, 0x7c, 0xb9, 0xe8, 0xcf, 0xbc, 0x79, 0x1a, 0x8a, 0x74, 0x92, 0x8d, 0x37, 0xfc, 0x78,
	0x3a, 0x30, 0x33, 0x7b, 0x4e, 0x35, 0xe9, 0xd3, 0x8f, 0x15, 0x0e, 0xf2, 0x01, 0x3d, 0xed, 0xc6,
	0xfe, 0x7a, 0x5c, 0xa7, 0xa7, 0x7d, 0xf3, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xfa, 0x9e,
	0x61, 0xef, 0x05, 0x00, 0x00,
}

func (m *EventInboundFinalized) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventInboundFinalized) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventInboundFinalized) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SenderChain) > 0 {
		i -= len(m.SenderChain)
		copy(dAtA[i:], m.SenderChain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SenderChain)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.StatusMessage) > 0 {
		i -= len(m.StatusMessage)
		copy(dAtA[i:], m.StatusMessage)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StatusMessage)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.NewStatus) > 0 {
		i -= len(m.NewStatus)
		copy(dAtA[i:], m.NewStatus)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewStatus)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ReceiverChain) > 0 {
		i -= len(m.ReceiverChain)
		copy(dAtA[i:], m.ReceiverChain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ReceiverChain)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.InBlockHeight) > 0 {
		i -= len(m.InBlockHeight)
		copy(dAtA[i:], m.InBlockHeight)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.InBlockHeight)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.InTxHash) > 0 {
		i -= len(m.InTxHash)
		copy(dAtA[i:], m.InTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.InTxHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TxOrgin) > 0 {
		i -= len(m.TxOrgin)
		copy(dAtA[i:], m.TxOrgin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TxOrgin)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.XmsgIndex) > 0 {
		i -= len(m.XmsgIndex)
		copy(dAtA[i:], m.XmsgIndex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.XmsgIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOutboundFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutboundFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutboundFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewStatus) > 0 {
		i -= len(m.NewStatus)
		copy(dAtA[i:], m.NewStatus)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewStatus)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OldStatus) > 0 {
		i -= len(m.OldStatus)
		copy(dAtA[i:], m.OldStatus)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldStatus)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.XmsgIndex) > 0 {
		i -= len(m.XmsgIndex)
		copy(dAtA[i:], m.XmsgIndex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.XmsgIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOutboundSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutboundSuccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutboundSuccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewStatus) > 0 {
		i -= len(m.NewStatus)
		copy(dAtA[i:], m.NewStatus)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewStatus)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OldStatus) > 0 {
		i -= len(m.OldStatus)
		copy(dAtA[i:], m.OldStatus)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldStatus)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.XmsgIndex) > 0 {
		i -= len(m.XmsgIndex)
		copy(dAtA[i:], m.XmsgIndex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.XmsgIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPellSent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPellSent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPellSent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewStatus) > 0 {
		i -= len(m.NewStatus)
		copy(dAtA[i:], m.NewStatus)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewStatus)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.PellParams) > 0 {
		i -= len(m.PellParams)
		copy(dAtA[i:], m.PellParams)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PellParams)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.PellMessage) > 0 {
		i -= len(m.PellMessage)
		copy(dAtA[i:], m.PellMessage)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PellMessage)))
		i--
		dAtA[i] = 0x62
	}
	if m.PellReceiverChainId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PellReceiverChainId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.PellReceiver) > 0 {
		i -= len(m.PellReceiver)
		copy(dAtA[i:], m.PellReceiver)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PellReceiver)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PellSender) > 0 {
		i -= len(m.PellSender)
		copy(dAtA[i:], m.PellSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PellSender)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PellTxOrigin) > 0 {
		i -= len(m.PellTxOrigin)
		copy(dAtA[i:], m.PellTxOrigin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PellTxOrigin)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ReceiverChain) > 0 {
		i -= len(m.ReceiverChain)
		copy(dAtA[i:], m.ReceiverChain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ReceiverChain)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InTxHash) > 0 {
		i -= len(m.InTxHash)
		copy(dAtA[i:], m.InTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.InTxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SenderChain) > 0 {
		i -= len(m.SenderChain)
		copy(dAtA[i:], m.SenderChain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SenderChain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.XmsgIndex) > 0 {
		i -= len(m.XmsgIndex)
		copy(dAtA[i:], m.XmsgIndex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.XmsgIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventXmsgGasPriceIncreased) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventXmsgGasPriceIncreased) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventXmsgGasPriceIncreased) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdditionalFees) > 0 {
		i -= len(m.AdditionalFees)
		copy(dAtA[i:], m.AdditionalFees)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AdditionalFees)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GasPriceIncrease) > 0 {
		i -= len(m.GasPriceIncrease)
		copy(dAtA[i:], m.GasPriceIncrease)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.GasPriceIncrease)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.XmsgIndex) > 0 {
		i -= len(m.XmsgIndex)
		copy(dAtA[i:], m.XmsgIndex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.XmsgIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChainIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChainIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChainIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CurrHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventInboundFinalized) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.XmsgIndex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.TxOrgin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.InTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.InBlockHeight)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ReceiverChain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewStatus)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.StatusMessage)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SenderChain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOutboundFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.XmsgIndex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldStatus)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewStatus)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOutboundSuccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.XmsgIndex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldStatus)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewStatus)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPellSent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.XmsgIndex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SenderChain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.InTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ReceiverChain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PellTxOrigin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PellSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PellReceiver)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.PellReceiverChainId != 0 {
		n += 1 + sovEvents(uint64(m.PellReceiverChainId))
	}
	l = len(m.PellMessage)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PellParams)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewStatus)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventXmsgGasPriceIncreased) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.XmsgIndex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.GasPriceIncrease)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.AdditionalFees)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventChainIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovEvents(uint64(m.ChainId))
	}
	if m.CurrHeight != 0 {
		n += 1 + sovEvents(uint64(m.CurrHeight))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventInboundFinalized) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventInboundFinalized: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventInboundFinalized: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XmsgIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XmsgIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOrgin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOrgin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InBlockHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InBlockHeight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOutboundFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutboundFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutboundFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XmsgIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XmsgIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOutboundSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutboundSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutboundSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XmsgIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XmsgIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPellSent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPellSent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPellSent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XmsgIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XmsgIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PellTxOrigin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PellTxOrigin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PellSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PellSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PellReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PellReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PellReceiverChainId", wireType)
			}
			m.PellReceiverChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PellReceiverChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PellMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PellMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PellParams", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PellParams = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventXmsgGasPriceIncreased) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventXmsgGasPriceIncreased: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventXmsgGasPriceIncreased: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XmsgIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XmsgIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPriceIncrease", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPriceIncrease = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalFees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalFees = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChainIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChainIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChainIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrHeight", wireType)
			}
			m.CurrHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
