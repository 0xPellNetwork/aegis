// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xmsg/xmsg.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// XmsgStatus represent the status of a xmsg
type XmsgStatus int32

const (
	// some observer sees inbound tx
	XmsgStatus_PENDING_INBOUND XmsgStatus = 0
	// super majority observer see inbound tx
	XmsgStatus_PENDING_OUTBOUND XmsgStatus = 1
	// the corresponding outbound tx is mined
	XmsgStatus_OUTBOUND_MINED XmsgStatus = 2
	// outbound cannot succeed; should revert inbound
	XmsgStatus_PENDING_REVERT XmsgStatus = 3
	// inbound reverted.
	XmsgStatus_REVERTED XmsgStatus = 4
	// inbound tx error or invalid paramters and cannot revert; just abort.
	XmsgStatus_ABORTED XmsgStatus = 5
)

var XmsgStatus_name = map[int32]string{
	0: "PENDING_INBOUND",
	1: "PENDING_OUTBOUND",
	2: "OUTBOUND_MINED",
	3: "PENDING_REVERT",
	4: "REVERTED",
	5: "ABORTED",
}

var XmsgStatus_value = map[string]int32{
	"PENDING_INBOUND":  0,
	"PENDING_OUTBOUND": 1,
	"OUTBOUND_MINED":   2,
	"PENDING_REVERT":   3,
	"REVERTED":         4,
	"ABORTED":          5,
}

func (x XmsgStatus) String() string {
	return proto.EnumName(XmsgStatus_name, int32(x))
}

func (XmsgStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f500efccd9ad016, []int{0}
}

// TxFinalizationStatus represent the status of a transaction
type TxFinalizationStatus int32

const (
	// the corresponding tx is not finalized
	TxFinalizationStatus_NOT_FINALIZED TxFinalizationStatus = 0
	// the corresponding tx is finalized but not executed yet
	TxFinalizationStatus_FINALIZED TxFinalizationStatus = 1
	// the corresponding tx is executed
	TxFinalizationStatus_EXECUTED TxFinalizationStatus = 2
)

var TxFinalizationStatus_name = map[int32]string{
	0: "NOT_FINALIZED",
	1: "FINALIZED",
	2: "EXECUTED",
}

var TxFinalizationStatus_value = map[string]int32{
	"NOT_FINALIZED": 0,
	"FINALIZED":     1,
	"EXECUTED":      2,
}

func (x TxFinalizationStatus) String() string {
	return proto.EnumName(TxFinalizationStatus_name, int32(x))
}

func (TxFinalizationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f500efccd9ad016, []int{1}
}

// InboundTxParams represent the parameters of an inbound transaction
type InboundTxParams struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// the Connector.send()
	SenderChainId int64  `protobuf:"varint,2,opt,name=sender_chain_id,json=senderChainId,proto3" json:"sender_chain_id,omitempty"`
	TxOrigin      string `protobuf:"bytes,3,opt,name=tx_origin,json=txOrigin,proto3" json:"tx_origin,omitempty"`
	// TODO: inbound_pell_event
	InboundPellTx                *InboundPellEvent    `protobuf:"bytes,4,opt,name=inbound_pell_tx,json=inboundPellTx,proto3" json:"inbound_pell_tx,omitempty"`
	InboundTxHash                string               `protobuf:"bytes,5,opt,name=inbound_tx_hash,json=inboundTxHash,proto3" json:"inbound_tx_hash,omitempty"`
	InboundTxBlockHeight         uint64               `protobuf:"varint,6,opt,name=inbound_tx_block_height,json=inboundTxBlockHeight,proto3" json:"inbound_tx_block_height,omitempty"`
	InboundTxEventIndex          uint64               `protobuf:"varint,7,opt,name=inbound_tx_event_index,json=inboundTxEventIndex,proto3" json:"inbound_tx_event_index,omitempty"`
	InboundTxBallotIndex         string               `protobuf:"bytes,8,opt,name=inbound_tx_ballot_index,json=inboundTxBallotIndex,proto3" json:"inbound_tx_ballot_index,omitempty"`
	InboundTxFinalizedPellHeight uint64               `protobuf:"varint,9,opt,name=inbound_tx_finalized_pell_height,json=inboundTxFinalizedPellHeight,proto3" json:"inbound_tx_finalized_pell_height,omitempty"`
	TxFinalizationStatus         TxFinalizationStatus `protobuf:"varint,10,opt,name=tx_finalization_status,json=txFinalizationStatus,proto3,enum=xmsg.TxFinalizationStatus" json:"tx_finalization_status,omitempty"`
}

func (m *InboundTxParams) Reset()         { *m = InboundTxParams{} }
func (m *InboundTxParams) String() string { return proto.CompactTextString(m) }
func (*InboundTxParams) ProtoMessage()    {}
func (*InboundTxParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f500efccd9ad016, []int{0}
}
func (m *InboundTxParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InboundTxParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InboundTxParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InboundTxParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InboundTxParams.Merge(m, src)
}
func (m *InboundTxParams) XXX_Size() int {
	return m.Size()
}
func (m *InboundTxParams) XXX_DiscardUnknown() {
	xxx_messageInfo_InboundTxParams.DiscardUnknown(m)
}

var xxx_messageInfo_InboundTxParams proto.InternalMessageInfo

func (m *InboundTxParams) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *InboundTxParams) GetSenderChainId() int64 {
	if m != nil {
		return m.SenderChainId
	}
	return 0
}

func (m *InboundTxParams) GetTxOrigin() string {
	if m != nil {
		return m.TxOrigin
	}
	return ""
}

func (m *InboundTxParams) GetInboundPellTx() *InboundPellEvent {
	if m != nil {
		return m.InboundPellTx
	}
	return nil
}

func (m *InboundTxParams) GetInboundTxHash() string {
	if m != nil {
		return m.InboundTxHash
	}
	return ""
}

func (m *InboundTxParams) GetInboundTxBlockHeight() uint64 {
	if m != nil {
		return m.InboundTxBlockHeight
	}
	return 0
}

func (m *InboundTxParams) GetInboundTxEventIndex() uint64 {
	if m != nil {
		return m.InboundTxEventIndex
	}
	return 0
}

func (m *InboundTxParams) GetInboundTxBallotIndex() string {
	if m != nil {
		return m.InboundTxBallotIndex
	}
	return ""
}

func (m *InboundTxParams) GetInboundTxFinalizedPellHeight() uint64 {
	if m != nil {
		return m.InboundTxFinalizedPellHeight
	}
	return 0
}

func (m *InboundTxParams) GetTxFinalizationStatus() TxFinalizationStatus {
	if m != nil {
		return m.TxFinalizationStatus
	}
	return TxFinalizationStatus_NOT_FINALIZED
}

// OutboundTxParams represent the parameters of an outbound transaction
type OutboundTxParams struct {
	Receiver                 string `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverChainId          int64  `protobuf:"varint,2,opt,name=receiver_chain_id,json=receiverChainId,proto3" json:"receiver_chain_id,omitempty"`
	OutboundTxTssNonce       uint64 `protobuf:"varint,3,opt,name=outbound_tx_tss_nonce,json=outboundTxTssNonce,proto3" json:"outbound_tx_tss_nonce,omitempty"`
	OutboundTxGasLimit       uint64 `protobuf:"varint,4,opt,name=outbound_tx_gas_limit,json=outboundTxGasLimit,proto3" json:"outbound_tx_gas_limit,omitempty"`
	OutboundTxGasPrice       string `protobuf:"bytes,5,opt,name=outbound_tx_gas_price,json=outboundTxGasPrice,proto3" json:"outbound_tx_gas_price,omitempty"`
	OutboundTxGasPriorityFee string `protobuf:"bytes,6,opt,name=outbound_tx_gas_priority_fee,json=outboundTxGasPriorityFee,proto3" json:"outbound_tx_gas_priority_fee,omitempty"`
	// the above are commands for pellclients
	// the following fields are used when the outbound tx is mined
	OutboundTxHash              string                `protobuf:"bytes,7,opt,name=outbound_tx_hash,json=outboundTxHash,proto3" json:"outbound_tx_hash,omitempty"`
	OutboundTxBallotIndex       string                `protobuf:"bytes,8,opt,name=outbound_tx_ballot_index,json=outboundTxBallotIndex,proto3" json:"outbound_tx_ballot_index,omitempty"`
	OutboundTxExternalHeight    uint64                `protobuf:"varint,9,opt,name=outbound_tx_external_height,json=outboundTxExternalHeight,proto3" json:"outbound_tx_external_height,omitempty"`
	TssPubkey                   string                `protobuf:"bytes,10,opt,name=tss_pubkey,json=tssPubkey,proto3" json:"tss_pubkey,omitempty"`
	TxFinalizationStatus        TxFinalizationStatus  `protobuf:"varint,11,opt,name=tx_finalization_status,json=txFinalizationStatus,proto3,enum=xmsg.TxFinalizationStatus" json:"tx_finalization_status,omitempty"`
	OutboundTxGasUsed           uint64                `protobuf:"varint,12,opt,name=outbound_tx_gas_used,json=outboundTxGasUsed,proto3" json:"outbound_tx_gas_used,omitempty"`
	OutboundTxEffectiveGasPrice cosmossdk_io_math.Int `protobuf:"bytes,13,opt,name=outbound_tx_effective_gas_price,json=outboundTxEffectiveGasPrice,proto3,customtype=cosmossdk.io/math.Int" json:"outbound_tx_effective_gas_price"`
	OutboundTxEffectiveGasLimit uint64                `protobuf:"varint,14,opt,name=outbound_tx_effective_gas_limit,json=outboundTxEffectiveGasLimit,proto3" json:"outbound_tx_effective_gas_limit,omitempty"`
}

func (m *OutboundTxParams) Reset()         { *m = OutboundTxParams{} }
func (m *OutboundTxParams) String() string { return proto.CompactTextString(m) }
func (*OutboundTxParams) ProtoMessage()    {}
func (*OutboundTxParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f500efccd9ad016, []int{1}
}
func (m *OutboundTxParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutboundTxParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutboundTxParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutboundTxParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutboundTxParams.Merge(m, src)
}
func (m *OutboundTxParams) XXX_Size() int {
	return m.Size()
}
func (m *OutboundTxParams) XXX_DiscardUnknown() {
	xxx_messageInfo_OutboundTxParams.DiscardUnknown(m)
}

var xxx_messageInfo_OutboundTxParams proto.InternalMessageInfo

func (m *OutboundTxParams) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *OutboundTxParams) GetReceiverChainId() int64 {
	if m != nil {
		return m.ReceiverChainId
	}
	return 0
}

func (m *OutboundTxParams) GetOutboundTxTssNonce() uint64 {
	if m != nil {
		return m.OutboundTxTssNonce
	}
	return 0
}

func (m *OutboundTxParams) GetOutboundTxGasLimit() uint64 {
	if m != nil {
		return m.OutboundTxGasLimit
	}
	return 0
}

func (m *OutboundTxParams) GetOutboundTxGasPrice() string {
	if m != nil {
		return m.OutboundTxGasPrice
	}
	return ""
}

func (m *OutboundTxParams) GetOutboundTxGasPriorityFee() string {
	if m != nil {
		return m.OutboundTxGasPriorityFee
	}
	return ""
}

func (m *OutboundTxParams) GetOutboundTxHash() string {
	if m != nil {
		return m.OutboundTxHash
	}
	return ""
}

func (m *OutboundTxParams) GetOutboundTxBallotIndex() string {
	if m != nil {
		return m.OutboundTxBallotIndex
	}
	return ""
}

func (m *OutboundTxParams) GetOutboundTxExternalHeight() uint64 {
	if m != nil {
		return m.OutboundTxExternalHeight
	}
	return 0
}

func (m *OutboundTxParams) GetTssPubkey() string {
	if m != nil {
		return m.TssPubkey
	}
	return ""
}

func (m *OutboundTxParams) GetTxFinalizationStatus() TxFinalizationStatus {
	if m != nil {
		return m.TxFinalizationStatus
	}
	return TxFinalizationStatus_NOT_FINALIZED
}

func (m *OutboundTxParams) GetOutboundTxGasUsed() uint64 {
	if m != nil {
		return m.OutboundTxGasUsed
	}
	return 0
}

func (m *OutboundTxParams) GetOutboundTxEffectiveGasLimit() uint64 {
	if m != nil {
		return m.OutboundTxEffectiveGasLimit
	}
	return 0
}

// Status represent the status of a xmsg
type Status struct {
	Status              XmsgStatus `protobuf:"varint,1,opt,name=status,proto3,enum=xmsg.XmsgStatus" json:"status,omitempty"`
	StatusMessage       string     `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	LastUpdateTimestamp int64      `protobuf:"varint,3,opt,name=last_update_timestamp,json=lastUpdateTimestamp,proto3" json:"last_update_timestamp,omitempty"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f500efccd9ad016, []int{2}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetStatus() XmsgStatus {
	if m != nil {
		return m.Status
	}
	return XmsgStatus_PENDING_INBOUND
}

func (m *Status) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *Status) GetLastUpdateTimestamp() int64 {
	if m != nil {
		return m.LastUpdateTimestamp
	}
	return 0
}

// Xmsg represent a xmsg
type Xmsg struct {
	Signer           string              `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Index            string              `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	XmsgStatus       *Status             `protobuf:"bytes,3,opt,name=xmsg_status,json=xmsgStatus,proto3" json:"xmsg_status,omitempty"`
	InboundTxParams  *InboundTxParams    `protobuf:"bytes,4,opt,name=inbound_tx_params,json=inboundTxParams,proto3" json:"inbound_tx_params,omitempty"`
	OutboundTxParams []*OutboundTxParams `protobuf:"bytes,5,rep,name=outbound_tx_params,json=outboundTxParams,proto3" json:"outbound_tx_params,omitempty"`
}

func (m *Xmsg) Reset()         { *m = Xmsg{} }
func (m *Xmsg) String() string { return proto.CompactTextString(m) }
func (*Xmsg) ProtoMessage()    {}
func (*Xmsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f500efccd9ad016, []int{3}
}
func (m *Xmsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Xmsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Xmsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Xmsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Xmsg.Merge(m, src)
}
func (m *Xmsg) XXX_Size() int {
	return m.Size()
}
func (m *Xmsg) XXX_DiscardUnknown() {
	xxx_messageInfo_Xmsg.DiscardUnknown(m)
}

var xxx_messageInfo_Xmsg proto.InternalMessageInfo

func (m *Xmsg) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *Xmsg) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Xmsg) GetXmsgStatus() *Status {
	if m != nil {
		return m.XmsgStatus
	}
	return nil
}

func (m *Xmsg) GetInboundTxParams() *InboundTxParams {
	if m != nil {
		return m.InboundTxParams
	}
	return nil
}

func (m *Xmsg) GetOutboundTxParams() []*OutboundTxParams {
	if m != nil {
		return m.OutboundTxParams
	}
	return nil
}

// AllowedXmsgSenders represents a list of builder addresses authorized to
// create Xmsgs
type AllowedXmsgSenders struct {
	AllowedSenders []string `protobuf:"bytes,1,rep,name=allowed_senders,json=allowedSenders,proto3" json:"allowed_senders,omitempty"`
}

func (m *AllowedXmsgSenders) Reset()         { *m = AllowedXmsgSenders{} }
func (m *AllowedXmsgSenders) String() string { return proto.CompactTextString(m) }
func (*AllowedXmsgSenders) ProtoMessage()    {}
func (*AllowedXmsgSenders) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f500efccd9ad016, []int{4}
}
func (m *AllowedXmsgSenders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllowedXmsgSenders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllowedXmsgSenders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllowedXmsgSenders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedXmsgSenders.Merge(m, src)
}
func (m *AllowedXmsgSenders) XXX_Size() int {
	return m.Size()
}
func (m *AllowedXmsgSenders) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedXmsgSenders.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedXmsgSenders proto.InternalMessageInfo

func (m *AllowedXmsgSenders) GetAllowedSenders() []string {
	if m != nil {
		return m.AllowedSenders
	}
	return nil
}

func init() {
	proto.RegisterEnum("xmsg.XmsgStatus", XmsgStatus_name, XmsgStatus_value)
	proto.RegisterEnum("xmsg.TxFinalizationStatus", TxFinalizationStatus_name, TxFinalizationStatus_value)
	proto.RegisterType((*InboundTxParams)(nil), "xmsg.InboundTxParams")
	proto.RegisterType((*OutboundTxParams)(nil), "xmsg.OutboundTxParams")
	proto.RegisterType((*Status)(nil), "xmsg.Status")
	proto.RegisterType((*Xmsg)(nil), "xmsg.Xmsg")
	proto.RegisterType((*AllowedXmsgSenders)(nil), "xmsg.AllowedXmsgSenders")
}

func init() { proto.RegisterFile("xmsg/xmsg.proto", fileDescriptor_3f500efccd9ad016) }

var fileDescriptor_3f500efccd9ad016 = []byte{
	// 1046 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x41, 0x6b, 0x1b, 0xc7,
	0x17, 0xf7, 0x5a, 0xb2, 0x6c, 0x3d, 0x5b, 0x96, 0x3c, 0x96, 0x9c, 0xc5, 0x4e, 0x64, 0x61, 0xf8,
	0xff, 0x2b, 0x5c, 0x6a, 0x35, 0x0e, 0xa5, 0x50, 0x48, 0xc0, 0x8e, 0xd6, 0x89, 0xc0, 0x91, 0xc4,
	0x56, 0x2e, 0x21, 0x97, 0x65, 0x2d, 0x8d, 0x57, 0x83, 0x57, 0xbb, 0x42, 0x33, 0x72, 0xd6, 0x3d,
	0x95, 0xde, 0x0b, 0x85, 0x7e, 0x83, 0xd2, 0x43, 0x8f, 0xfd, 0x18, 0x39, 0xe6, 0x58, 0x7a, 0x08,
	0xc5, 0x3e, 0xf4, 0x33, 0xf4, 0x56, 0xe6, 0xcd, 0xac, 0xb4, 0x12, 0x6a, 0x0e, 0xbd, 0x88, 0x99,
	0xf7, 0xde, 0xef, 0xbd, 0xdf, 0xbc, 0xf9, 0xed, 0x1b, 0x41, 0x3e, 0x1a, 0x70, 0xaf, 0x26, 0x7f,
	0x8e, 0x86, 0xa3, 0x50, 0x84, 0x24, 0x2d, 0xd7, 0xbb, 0x0f, 0xba, 0x21, 0x1f, 0x84, 0xbc, 0x26,
	0x9d, 0x37, 0x8f, 0x6b, 0x13, 0xf7, 0x6e, 0xd1, 0x0b, 0xbd, 0x10, 0x97, 0x35, 0xb9, 0xd2, 0xd6,
	0x12, 0x66, 0x19, 0x52, 0xdf, 0x77, 0xe8, 0x0d, 0x0d, 0x84, 0x32, 0x1f, 0xfc, 0x94, 0x86, 0x7c,
	0x23, 0xb8, 0x0c, 0xc7, 0x41, 0xaf, 0x13, 0xb5, 0xdd, 0x91, 0x3b, 0xe0, 0x64, 0x07, 0x32, 0x9c,
	0x06, 0x3d, 0x3a, 0x32, 0x8d, 0x8a, 0x51, 0xcd, 0xda, 0x7a, 0x47, 0xfe, 0x0f, 0x79, 0xb5, 0x72,
	0xba, 0x7d, 0x97, 0x05, 0x0e, 0xeb, 0x99, 0xcb, 0x15, 0xa3, 0x9a, 0xb2, 0x73, 0xca, 0xfc, 0x5c,
	0x5a, 0x1b, 0x3d, 0xb2, 0x07, 0x59, 0x11, 0x39, 0xe1, 0x88, 0x79, 0x2c, 0x30, 0x53, 0x98, 0x62,
	0x4d, 0x44, 0x2d, 0xdc, 0x93, 0x67, 0x90, 0x67, 0xaa, 0x9e, 0x83, 0x64, 0x44, 0x64, 0xa6, 0x2b,
	0x46, 0x75, 0xfd, 0x78, 0xe7, 0x08, 0x8f, 0xa8, 0xc9, 0xb4, 0xa9, 0xef, 0x5b, 0x92, 0xa7, 0x9d,
	0x63, 0x53, 0x4b, 0x27, 0x92, 0x24, 0x62, 0xbc, 0x88, 0x9c, 0xbe, 0xcb, 0xfb, 0xe6, 0x0a, 0x96,
	0x88, 0xe3, 0x3a, 0xd1, 0x4b, 0x97, 0xf7, 0xc9, 0x17, 0xf0, 0x20, 0x11, 0x77, 0xe9, 0x87, 0xdd,
	0x6b, 0xa7, 0x4f, 0x99, 0xd7, 0x17, 0x66, 0xa6, 0x62, 0x54, 0xd3, 0x76, 0x71, 0x12, 0x7f, 0x2a,
	0x9d, 0x2f, 0xd1, 0x47, 0x9e, 0xc0, 0x4e, 0x02, 0x86, 0x9d, 0x72, 0x58, 0xd0, 0xa3, 0x91, 0xb9,
	0x8a, 0xa8, 0xed, 0x09, 0x0a, 0xd9, 0x35, 0xa4, 0x6b, 0xbe, 0x96, 0xeb, 0xfb, 0x61, 0x8c, 0x5a,
	0x43, 0x6e, 0x89, 0x5a, 0xe8, 0x54, 0xb0, 0x33, 0xa8, 0x24, 0x60, 0x57, 0x2c, 0x70, 0x7d, 0xf6,
	0x2d, 0xd5, 0x7d, 0xd1, 0x5c, 0xb3, 0x58, 0xf5, 0xe1, 0x04, 0x7f, 0x16, 0x47, 0xc9, 0x76, 0x68,
	0xce, 0x6d, 0xd8, 0x99, 0xe2, 0x5d, 0xc1, 0xc2, 0xc0, 0xe1, 0xc2, 0x15, 0x63, 0x6e, 0x42, 0xc5,
	0xa8, 0x6e, 0x1e, 0xef, 0xaa, 0xce, 0x4e, 0xc0, 0x18, 0xf2, 0x35, 0x46, 0xd8, 0x45, 0xb1, 0xc0,
	0x7a, 0xf0, 0x73, 0x06, 0x0a, 0xad, 0xb1, 0x98, 0x95, 0xc5, 0x2e, 0xac, 0x8d, 0x68, 0x97, 0xb2,
	0x9b, 0x89, 0x30, 0x26, 0x7b, 0x72, 0x08, 0x5b, 0xf1, 0x7a, 0x5e, 0x1c, 0xf9, 0xd8, 0x11, 0xcb,
	0xe3, 0x31, 0x94, 0x42, 0x9d, 0x5b, 0x9e, 0x5b, 0x70, 0xee, 0x04, 0x61, 0xd0, 0xa5, 0x28, 0x95,
	0xb4, 0x4d, 0xc2, 0x49, 0xe1, 0x0e, 0xe7, 0x4d, 0xe9, 0x99, 0x87, 0x78, 0x2e, 0x77, 0x7c, 0x36,
	0x60, 0x02, 0xa5, 0x33, 0x03, 0x79, 0xe1, 0xf2, 0x73, 0xe9, 0x59, 0x04, 0x19, 0x8e, 0x58, 0x97,
	0x6a, 0xb5, 0xcc, 0x42, 0xda, 0xd2, 0x43, 0x9e, 0xc1, 0xc3, 0x05, 0x90, 0x70, 0xc4, 0xc4, 0xad,
	0x73, 0x45, 0x29, 0xea, 0x26, 0x6b, 0x9b, 0xf3, 0x48, 0x0c, 0x38, 0xa3, 0x94, 0x54, 0xa1, 0x90,
	0xc4, 0xa3, 0x36, 0x57, 0x11, 0xb3, 0x39, 0xc5, 0xa0, 0x38, 0xbf, 0x04, 0x33, 0x19, 0xb9, 0x40,
	0x31, 0xa5, 0x29, 0x22, 0x29, 0x99, 0xa7, 0xb0, 0x97, 0x04, 0xd2, 0x48, 0xd0, 0x51, 0xe0, 0xce,
	0xa9, 0x25, 0xc1, 0xd0, 0xd2, 0x01, 0x5a, 0x29, 0x8f, 0x00, 0x64, 0xbb, 0x87, 0xe3, 0xcb, 0x6b,
	0x7a, 0x8b, 0xea, 0xc8, 0xda, 0x59, 0xc1, 0x79, 0x1b, 0x0d, 0x1f, 0x11, 0xd2, 0xfa, 0x7f, 0x13,
	0x12, 0xa9, 0x41, 0x71, 0xbe, 0xa5, 0x63, 0x4e, 0x7b, 0xe6, 0x06, 0x12, 0xdd, 0x9a, 0x69, 0xe5,
	0x05, 0xa7, 0x3d, 0xd2, 0x85, 0xfd, 0x99, 0x03, 0x5e, 0x5d, 0xd1, 0xae, 0x60, 0x37, 0x34, 0x71,
	0x81, 0x39, 0x49, 0xfb, 0xf4, 0xd1, 0xbb, 0x0f, 0xfb, 0x4b, 0x7f, 0x7c, 0xd8, 0x2f, 0xa9, 0x31,
	0xc8, 0x7b, 0xd7, 0x47, 0x2c, 0xac, 0x0d, 0x5c, 0xd1, 0x3f, 0x6a, 0x04, 0xc2, 0xde, 0x4b, 0xf4,
	0x20, 0xce, 0x31, 0xb9, 0xe8, 0xfa, 0xc7, 0x8a, 0x28, 0x61, 0x6d, 0x22, 0xc1, 0x7f, 0xc9, 0x82,
	0x0a, 0x3b, 0xf8, 0xc1, 0x80, 0x8c, 0x3e, 0x66, 0x15, 0x32, 0xba, 0x51, 0x06, 0x36, 0xaa, 0xa0,
	0x1a, 0xf5, 0x7a, 0xc0, 0x3d, 0xdd, 0x1e, 0xed, 0x27, 0xff, 0x83, 0x4d, 0xb5, 0x72, 0x06, 0x94,
	0x73, 0xd7, 0xa3, 0xf8, 0x95, 0x64, 0xed, 0x9c, 0xb2, 0xbe, 0x52, 0x46, 0x72, 0x0c, 0x25, 0xdf,
	0xe5, 0xc2, 0x19, 0x0f, 0x7b, 0xae, 0xa0, 0x8e, 0x60, 0x03, 0xca, 0x85, 0x3b, 0x18, 0xe2, 0x37,
	0x92, 0xb2, 0xb7, 0xa5, 0xf3, 0x02, 0x7d, 0x9d, 0xd8, 0x75, 0xf0, 0xb7, 0x01, 0x69, 0x59, 0x11,
	0xe7, 0x37, 0xf3, 0x82, 0xc4, 0xfc, 0xc6, 0x1d, 0x29, 0xc2, 0x8a, 0x92, 0x98, 0x2a, 0xa9, 0x36,
	0xe4, 0x33, 0x58, 0x97, 0x64, 0xe3, 0x9b, 0x4e, 0xe1, 0x30, 0xde, 0x50, 0x07, 0xd0, 0xe4, 0x21,
	0x9a, 0x1c, 0x84, 0x9c, 0xc0, 0x56, 0x62, 0x68, 0x0d, 0x71, 0x34, 0xe8, 0x09, 0x5e, 0x9a, 0x99,
	0xe0, 0xf1, 0xdc, 0xb0, 0xf3, 0x6c, 0xee, 0x7d, 0xa9, 0x03, 0x49, 0xb6, 0x5f, 0xe7, 0x58, 0xa9,
	0xa4, 0xa6, 0xaf, 0xc0, 0xfc, 0xf0, 0xb1, 0x0b, 0xe1, 0x9c, 0xe5, 0xab, 0xf5, 0xef, 0xff, 0xfa,
	0xed, 0x50, 0x1f, 0xed, 0xe0, 0x29, 0x90, 0x13, 0xdf, 0x0f, 0xdf, 0xd2, 0x1e, 0xf6, 0x1c, 0x9f,
	0x23, 0x4e, 0x3e, 0x81, 0xbc, 0xab, 0xac, 0x8e, 0x7a, 0xa1, 0xe4, 0xfd, 0xa4, 0xe4, 0xf7, 0xa8,
	0xcd, 0x3a, 0xf0, 0xf0, 0x3b, 0x03, 0x60, 0x7a, 0x59, 0x64, 0x1b, 0xf2, 0x6d, 0xab, 0x59, 0x6f,
	0x34, 0x5f, 0x38, 0x8d, 0xe6, 0x69, 0xeb, 0xa2, 0x59, 0x2f, 0x2c, 0x91, 0x22, 0x14, 0x62, 0x63,
	0xeb, 0xa2, 0xa3, 0xac, 0x06, 0x21, 0xb0, 0x19, 0xef, 0x9c, 0x57, 0x8d, 0xa6, 0x55, 0x2f, 0x2c,
	0x4b, 0x5b, 0x1c, 0x69, 0x5b, 0xdf, 0x58, 0x76, 0xa7, 0x90, 0x22, 0x1b, 0xb0, 0xa6, 0xd6, 0x56,
	0xbd, 0x90, 0x26, 0xeb, 0xb0, 0x7a, 0x72, 0xda, 0xc2, 0xcd, 0xca, 0x6e, 0xfa, 0xd7, 0x5f, 0xca,
	0xc6, 0xe1, 0x39, 0x14, 0x17, 0x7d, 0x57, 0x64, 0x0b, 0x72, 0xcd, 0x56, 0xc7, 0x39, 0x6b, 0x34,
	0x4f, 0xce, 0x1b, 0x6f, 0x2c, 0xc9, 0x24, 0x07, 0xd9, 0xe9, 0xd6, 0x90, 0xa9, 0xad, 0xd7, 0xd6,
	0xf3, 0x0b, 0x99, 0x6d, 0x59, 0x65, 0x3b, 0xb5, 0xde, 0xdd, 0x95, 0x8d, 0xf7, 0x77, 0x65, 0xe3,
	0xcf, 0xbb, 0xb2, 0xf1, 0xe3, 0x7d, 0x79, 0xe9, 0xfd, 0x7d, 0x79, 0xe9, 0xf7, 0xfb, 0xf2, 0xd2,
	0x9b, 0x4f, 0x3d, 0x26, 0xfa, 0xe3, 0xcb, 0xa3, 0x6e, 0x38, 0xa8, 0x7d, 0x1e, 0xc9, 0x57, 0xa4,
	0x49, 0xc5, 0xdb, 0x70, 0x74, 0x5d, 0x73, 0xa9, 0xc7, 0x78, 0x2d, 0xc2, 0x7f, 0x1a, 0x35, 0x71,
	0x3b, 0xa4, 0xfc, 0x32, 0x83, 0x7f, 0x12, 0x9e, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x73, 0x65,
	0xc9, 0xa6, 0x83, 0x08, 0x00, 0x00,
}

func (m *InboundTxParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InboundTxParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboundTxParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxFinalizationStatus != 0 {
		i = encodeVarintXmsg(dAtA, i, uint64(m.TxFinalizationStatus))
		i--
		dAtA[i] = 0x50
	}
	if m.InboundTxFinalizedPellHeight != 0 {
		i = encodeVarintXmsg(dAtA, i, uint64(m.InboundTxFinalizedPellHeight))
		i--
		dAtA[i] = 0x48
	}
	if len(m.InboundTxBallotIndex) > 0 {
		i -= len(m.InboundTxBallotIndex)
		copy(dAtA[i:], m.InboundTxBallotIndex)
		i = encodeVarintXmsg(dAtA, i, uint64(len(m.InboundTxBallotIndex)))
		i--
		dAtA[i] = 0x42
	}
	if m.InboundTxEventIndex != 0 {
		i = encodeVarintXmsg(dAtA, i, uint64(m.InboundTxEventIndex))
		i--
		dAtA[i] = 0x38
	}
	if m.InboundTxBlockHeight != 0 {
		i = encodeVarintXmsg(dAtA, i, uint64(m.InboundTxBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.InboundTxHash) > 0 {
		i -= len(m.InboundTxHash)
		copy(dAtA[i:], m.InboundTxHash)
		i = encodeVarintXmsg(dAtA, i, uint64(len(m.InboundTxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.InboundPellTx != nil {
		{
			size, err := m.InboundPellTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintXmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TxOrigin) > 0 {
		i -= len(m.TxOrigin)
		copy(dAtA[i:], m.TxOrigin)
		i = encodeVarintXmsg(dAtA, i, uint64(len(m.TxOrigin)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SenderChainId != 0 {
		i = encodeVarintXmsg(dAtA, i, uint64(m.SenderChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintXmsg(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OutboundTxParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutboundTxParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundTxParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutboundTxEffectiveGasLimit != 0 {
		i = encodeVarintXmsg(dAtA, i, uint64(m.OutboundTxEffectiveGasLimit))
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.OutboundTxEffectiveGasPrice.Size()
		i -= size
		if _, err := m.OutboundTxEffectiveGasPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintXmsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if m.OutboundTxGasUsed != 0 {
		i = encodeVarintXmsg(dAtA, i, uint64(m.OutboundTxGasUsed))
		i--
		dAtA[i] = 0x60
	}
	if m.TxFinalizationStatus != 0 {
		i = encodeVarintXmsg(dAtA, i, uint64(m.TxFinalizationStatus))
		i--
		dAtA[i] = 0x58
	}
	if len(m.TssPubkey) > 0 {
		i -= len(m.TssPubkey)
		copy(dAtA[i:], m.TssPubkey)
		i = encodeVarintXmsg(dAtA, i, uint64(len(m.TssPubkey)))
		i--
		dAtA[i] = 0x52
	}
	if m.OutboundTxExternalHeight != 0 {
		i = encodeVarintXmsg(dAtA, i, uint64(m.OutboundTxExternalHeight))
		i--
		dAtA[i] = 0x48
	}
	if len(m.OutboundTxBallotIndex) > 0 {
		i -= len(m.OutboundTxBallotIndex)
		copy(dAtA[i:], m.OutboundTxBallotIndex)
		i = encodeVarintXmsg(dAtA, i, uint64(len(m.OutboundTxBallotIndex)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.OutboundTxHash) > 0 {
		i -= len(m.OutboundTxHash)
		copy(dAtA[i:], m.OutboundTxHash)
		i = encodeVarintXmsg(dAtA, i, uint64(len(m.OutboundTxHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OutboundTxGasPriorityFee) > 0 {
		i -= len(m.OutboundTxGasPriorityFee)
		copy(dAtA[i:], m.OutboundTxGasPriorityFee)
		i = encodeVarintXmsg(dAtA, i, uint64(len(m.OutboundTxGasPriorityFee)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OutboundTxGasPrice) > 0 {
		i -= len(m.OutboundTxGasPrice)
		copy(dAtA[i:], m.OutboundTxGasPrice)
		i = encodeVarintXmsg(dAtA, i, uint64(len(m.OutboundTxGasPrice)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OutboundTxGasLimit != 0 {
		i = encodeVarintXmsg(dAtA, i, uint64(m.OutboundTxGasLimit))
		i--
		dAtA[i] = 0x20
	}
	if m.OutboundTxTssNonce != 0 {
		i = encodeVarintXmsg(dAtA, i, uint64(m.OutboundTxTssNonce))
		i--
		dAtA[i] = 0x18
	}
	if m.ReceiverChainId != 0 {
		i = encodeVarintXmsg(dAtA, i, uint64(m.ReceiverChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintXmsg(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastUpdateTimestamp != 0 {
		i = encodeVarintXmsg(dAtA, i, uint64(m.LastUpdateTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StatusMessage) > 0 {
		i -= len(m.StatusMessage)
		copy(dAtA[i:], m.StatusMessage)
		i = encodeVarintXmsg(dAtA, i, uint64(len(m.StatusMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintXmsg(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Xmsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Xmsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Xmsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutboundTxParams) > 0 {
		for iNdEx := len(m.OutboundTxParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutboundTxParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintXmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.InboundTxParams != nil {
		{
			size, err := m.InboundTxParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintXmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.XmsgStatus != nil {
		{
			size, err := m.XmsgStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintXmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintXmsg(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintXmsg(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllowedXmsgSenders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowedXmsgSenders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowedXmsgSenders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedSenders) > 0 {
		for iNdEx := len(m.AllowedSenders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedSenders[iNdEx])
			copy(dAtA[i:], m.AllowedSenders[iNdEx])
			i = encodeVarintXmsg(dAtA, i, uint64(len(m.AllowedSenders[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintXmsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovXmsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InboundTxParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovXmsg(uint64(l))
	}
	if m.SenderChainId != 0 {
		n += 1 + sovXmsg(uint64(m.SenderChainId))
	}
	l = len(m.TxOrigin)
	if l > 0 {
		n += 1 + l + sovXmsg(uint64(l))
	}
	if m.InboundPellTx != nil {
		l = m.InboundPellTx.Size()
		n += 1 + l + sovXmsg(uint64(l))
	}
	l = len(m.InboundTxHash)
	if l > 0 {
		n += 1 + l + sovXmsg(uint64(l))
	}
	if m.InboundTxBlockHeight != 0 {
		n += 1 + sovXmsg(uint64(m.InboundTxBlockHeight))
	}
	if m.InboundTxEventIndex != 0 {
		n += 1 + sovXmsg(uint64(m.InboundTxEventIndex))
	}
	l = len(m.InboundTxBallotIndex)
	if l > 0 {
		n += 1 + l + sovXmsg(uint64(l))
	}
	if m.InboundTxFinalizedPellHeight != 0 {
		n += 1 + sovXmsg(uint64(m.InboundTxFinalizedPellHeight))
	}
	if m.TxFinalizationStatus != 0 {
		n += 1 + sovXmsg(uint64(m.TxFinalizationStatus))
	}
	return n
}

func (m *OutboundTxParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovXmsg(uint64(l))
	}
	if m.ReceiverChainId != 0 {
		n += 1 + sovXmsg(uint64(m.ReceiverChainId))
	}
	if m.OutboundTxTssNonce != 0 {
		n += 1 + sovXmsg(uint64(m.OutboundTxTssNonce))
	}
	if m.OutboundTxGasLimit != 0 {
		n += 1 + sovXmsg(uint64(m.OutboundTxGasLimit))
	}
	l = len(m.OutboundTxGasPrice)
	if l > 0 {
		n += 1 + l + sovXmsg(uint64(l))
	}
	l = len(m.OutboundTxGasPriorityFee)
	if l > 0 {
		n += 1 + l + sovXmsg(uint64(l))
	}
	l = len(m.OutboundTxHash)
	if l > 0 {
		n += 1 + l + sovXmsg(uint64(l))
	}
	l = len(m.OutboundTxBallotIndex)
	if l > 0 {
		n += 1 + l + sovXmsg(uint64(l))
	}
	if m.OutboundTxExternalHeight != 0 {
		n += 1 + sovXmsg(uint64(m.OutboundTxExternalHeight))
	}
	l = len(m.TssPubkey)
	if l > 0 {
		n += 1 + l + sovXmsg(uint64(l))
	}
	if m.TxFinalizationStatus != 0 {
		n += 1 + sovXmsg(uint64(m.TxFinalizationStatus))
	}
	if m.OutboundTxGasUsed != 0 {
		n += 1 + sovXmsg(uint64(m.OutboundTxGasUsed))
	}
	l = m.OutboundTxEffectiveGasPrice.Size()
	n += 1 + l + sovXmsg(uint64(l))
	if m.OutboundTxEffectiveGasLimit != 0 {
		n += 1 + sovXmsg(uint64(m.OutboundTxEffectiveGasLimit))
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovXmsg(uint64(m.Status))
	}
	l = len(m.StatusMessage)
	if l > 0 {
		n += 1 + l + sovXmsg(uint64(l))
	}
	if m.LastUpdateTimestamp != 0 {
		n += 1 + sovXmsg(uint64(m.LastUpdateTimestamp))
	}
	return n
}

func (m *Xmsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovXmsg(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovXmsg(uint64(l))
	}
	if m.XmsgStatus != nil {
		l = m.XmsgStatus.Size()
		n += 1 + l + sovXmsg(uint64(l))
	}
	if m.InboundTxParams != nil {
		l = m.InboundTxParams.Size()
		n += 1 + l + sovXmsg(uint64(l))
	}
	if len(m.OutboundTxParams) > 0 {
		for _, e := range m.OutboundTxParams {
			l = e.Size()
			n += 1 + l + sovXmsg(uint64(l))
		}
	}
	return n
}

func (m *AllowedXmsgSenders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllowedSenders) > 0 {
		for _, s := range m.AllowedSenders {
			l = len(s)
			n += 1 + l + sovXmsg(uint64(l))
		}
	}
	return n
}

func sovXmsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozXmsg(x uint64) (n int) {
	return sovXmsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InboundTxParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InboundTxParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InboundTxParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderChainId", wireType)
			}
			m.SenderChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOrigin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOrigin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundPellTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InboundPellTx == nil {
				m.InboundPellTx = &InboundPellEvent{}
			}
			if err := m.InboundPellTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTxBlockHeight", wireType)
			}
			m.InboundTxBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundTxBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTxEventIndex", wireType)
			}
			m.InboundTxEventIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundTxEventIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTxBallotIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundTxBallotIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTxFinalizedPellHeight", wireType)
			}
			m.InboundTxFinalizedPellHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundTxFinalizedPellHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFinalizationStatus", wireType)
			}
			m.TxFinalizationStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxFinalizationStatus |= TxFinalizationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutboundTxParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutboundTxParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutboundTxParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChainId", wireType)
			}
			m.ReceiverChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxTssNonce", wireType)
			}
			m.OutboundTxTssNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxTssNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxGasLimit", wireType)
			}
			m.OutboundTxGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxGasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTxGasPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxGasPriorityFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTxGasPriorityFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxBallotIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTxBallotIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxExternalHeight", wireType)
			}
			m.OutboundTxExternalHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxExternalHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TssPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TssPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFinalizationStatus", wireType)
			}
			m.TxFinalizationStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxFinalizationStatus |= TxFinalizationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxGasUsed", wireType)
			}
			m.OutboundTxGasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxGasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxEffectiveGasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutboundTxEffectiveGasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxEffectiveGasLimit", wireType)
			}
			m.OutboundTxEffectiveGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxEffectiveGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= XmsgStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateTimestamp", wireType)
			}
			m.LastUpdateTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdateTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Xmsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Xmsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Xmsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XmsgStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.XmsgStatus == nil {
				m.XmsgStatus = &Status{}
			}
			if err := m.XmsgStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTxParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InboundTxParams == nil {
				m.InboundTxParams = &InboundTxParams{}
			}
			if err := m.InboundTxParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTxParams = append(m.OutboundTxParams, &OutboundTxParams{})
			if err := m.OutboundTxParams[len(m.OutboundTxParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllowedXmsgSenders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowedXmsgSenders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowedXmsgSenders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedSenders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedSenders = append(m.AllowedSenders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipXmsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowXmsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthXmsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupXmsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthXmsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthXmsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowXmsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupXmsg = fmt.Errorf("proto: unexpected end of group")
)
