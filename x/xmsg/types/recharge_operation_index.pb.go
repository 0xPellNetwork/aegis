// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xmsg/recharge_operation_index.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PellTokenRechargeOperationIndex is the index of the Pell token recharge
// operation.
type PellRechargeOperationIndex struct {
	ChainId   uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	CurrIndex uint64 `protobuf:"varint,2,opt,name=curr_index,json=currIndex,proto3" json:"curr_index,omitempty"`
}

func (m *PellRechargeOperationIndex) Reset()         { *m = PellRechargeOperationIndex{} }
func (m *PellRechargeOperationIndex) String() string { return proto.CompactTextString(m) }
func (*PellRechargeOperationIndex) ProtoMessage()    {}
func (*PellRechargeOperationIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a500fa6d0e84dc, []int{0}
}
func (m *PellRechargeOperationIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PellRechargeOperationIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PellRechargeOperationIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PellRechargeOperationIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PellRechargeOperationIndex.Merge(m, src)
}
func (m *PellRechargeOperationIndex) XXX_Size() int {
	return m.Size()
}
func (m *PellRechargeOperationIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_PellRechargeOperationIndex.DiscardUnknown(m)
}

var xxx_messageInfo_PellRechargeOperationIndex proto.InternalMessageInfo

func (m *PellRechargeOperationIndex) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *PellRechargeOperationIndex) GetCurrIndex() uint64 {
	if m != nil {
		return m.CurrIndex
	}
	return 0
}

// GasTokenRechargeOperationIndex is the index of the gas token recharge
// operation.
type GasRechargeOperationIndex struct {
	ChainId   uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	CurrIndex uint64 `protobuf:"varint,2,opt,name=curr_index,json=currIndex,proto3" json:"curr_index,omitempty"`
}

func (m *GasRechargeOperationIndex) Reset()         { *m = GasRechargeOperationIndex{} }
func (m *GasRechargeOperationIndex) String() string { return proto.CompactTextString(m) }
func (*GasRechargeOperationIndex) ProtoMessage()    {}
func (*GasRechargeOperationIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a500fa6d0e84dc, []int{1}
}
func (m *GasRechargeOperationIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasRechargeOperationIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasRechargeOperationIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasRechargeOperationIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasRechargeOperationIndex.Merge(m, src)
}
func (m *GasRechargeOperationIndex) XXX_Size() int {
	return m.Size()
}
func (m *GasRechargeOperationIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_GasRechargeOperationIndex.DiscardUnknown(m)
}

var xxx_messageInfo_GasRechargeOperationIndex proto.InternalMessageInfo

func (m *GasRechargeOperationIndex) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *GasRechargeOperationIndex) GetCurrIndex() uint64 {
	if m != nil {
		return m.CurrIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*PellRechargeOperationIndex)(nil), "xmsg.PellRechargeOperationIndex")
	proto.RegisterType((*GasRechargeOperationIndex)(nil), "xmsg.GasRechargeOperationIndex")
}

func init() {
	proto.RegisterFile("xmsg/recharge_operation_index.proto", fileDescriptor_e5a500fa6d0e84dc)
}

var fileDescriptor_e5a500fa6d0e84dc = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xae, 0xc8, 0x2d, 0x4e,
	0xd7, 0x2f, 0x4a, 0x4d, 0xce, 0x48, 0x2c, 0x4a, 0x4f, 0x8d, 0xcf, 0x2f, 0x48, 0x2d, 0x4a, 0x2c,
	0xc9, 0xcc, 0xcf, 0x8b, 0xcf, 0xcc, 0x4b, 0x49, 0xad, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x01, 0x29, 0x52, 0x0a, 0xe3, 0x92, 0x0a, 0x48, 0xcd, 0xc9, 0x09, 0x82, 0xaa, 0xf5, 0x87,
	0x29, 0xf5, 0x04, 0xa9, 0x14, 0x92, 0xe4, 0xe2, 0x48, 0xce, 0x48, 0xcc, 0xcc, 0x8b, 0xcf, 0x4c,
	0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x09, 0x62, 0x07, 0xf3, 0x3d, 0x53, 0x84, 0x64, 0xb9, 0xb8,
	0x92, 0x4b, 0x8b, 0x8a, 0x20, 0x46, 0x4a, 0x30, 0x81, 0x25, 0x39, 0x41, 0x22, 0x60, 0x9d, 0x4a,
	0xa1, 0x5c, 0x92, 0xee, 0x89, 0xc5, 0xd4, 0x36, 0xd6, 0xc9, 0xf5, 0xc4, 0x23, 0x39, 0xc6, 0x0b,
	0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86,
	0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xb4, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73,
	0xf5, 0x0d, 0x2a, 0x40, 0x7e, 0xf2, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x4f, 0x4c, 0x4d,
	0xcf, 0x2c, 0xd6, 0xaf, 0xd0, 0x07, 0x07, 0x4a, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b, 0x38,
	0x08, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x99, 0xe5, 0xcb, 0x6a, 0x29, 0x01, 0x00, 0x00,
}

func (m *PellRechargeOperationIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PellRechargeOperationIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PellRechargeOperationIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrIndex != 0 {
		i = encodeVarintRechargeOperationIndex(dAtA, i, uint64(m.CurrIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintRechargeOperationIndex(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GasRechargeOperationIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasRechargeOperationIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasRechargeOperationIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrIndex != 0 {
		i = encodeVarintRechargeOperationIndex(dAtA, i, uint64(m.CurrIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintRechargeOperationIndex(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRechargeOperationIndex(dAtA []byte, offset int, v uint64) int {
	offset -= sovRechargeOperationIndex(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PellRechargeOperationIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovRechargeOperationIndex(uint64(m.ChainId))
	}
	if m.CurrIndex != 0 {
		n += 1 + sovRechargeOperationIndex(uint64(m.CurrIndex))
	}
	return n
}

func (m *GasRechargeOperationIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovRechargeOperationIndex(uint64(m.ChainId))
	}
	if m.CurrIndex != 0 {
		n += 1 + sovRechargeOperationIndex(uint64(m.CurrIndex))
	}
	return n
}

func sovRechargeOperationIndex(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRechargeOperationIndex(x uint64) (n int) {
	return sovRechargeOperationIndex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PellRechargeOperationIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRechargeOperationIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PellRechargeOperationIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PellRechargeOperationIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRechargeOperationIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrIndex", wireType)
			}
			m.CurrIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRechargeOperationIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRechargeOperationIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRechargeOperationIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasRechargeOperationIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRechargeOperationIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasRechargeOperationIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasRechargeOperationIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRechargeOperationIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrIndex", wireType)
			}
			m.CurrIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRechargeOperationIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRechargeOperationIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRechargeOperationIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRechargeOperationIndex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRechargeOperationIndex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRechargeOperationIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRechargeOperationIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRechargeOperationIndex
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRechargeOperationIndex
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRechargeOperationIndex
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRechargeOperationIndex        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRechargeOperationIndex          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRechargeOperationIndex = fmt.Errorf("proto: unexpected end of group")
)
