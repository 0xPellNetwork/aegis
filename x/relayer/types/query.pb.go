// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: relayer/query.proto

package types

import (
	context "context"
	fmt "fmt"
	chains "github.com/0xPellNetwork/aegis/pkg/chains"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryGetChainNoncesRequest is the request type for the Query/ChainNonces.
type QueryGetChainNoncesRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetChainNoncesRequest) Reset()         { *m = QueryGetChainNoncesRequest{} }
func (m *QueryGetChainNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainNoncesRequest) ProtoMessage()    {}
func (*QueryGetChainNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{0}
}
func (m *QueryGetChainNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainNoncesRequest.Merge(m, src)
}
func (m *QueryGetChainNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainNoncesRequest proto.InternalMessageInfo

func (m *QueryGetChainNoncesRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// QueryChainNoncesResponse is the response type for the Query/ChainNonces.
type QueryChainNoncesResponse struct {
	ChainNonces ChainNonces `protobuf:"bytes,1,opt,name=chain_nonces,json=chainNonces,proto3" json:"chain_nonces"`
}

func (m *QueryChainNoncesResponse) Reset()         { *m = QueryChainNoncesResponse{} }
func (m *QueryChainNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainNoncesResponse) ProtoMessage()    {}
func (*QueryChainNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{1}
}
func (m *QueryChainNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainNoncesResponse.Merge(m, src)
}
func (m *QueryChainNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainNoncesResponse proto.InternalMessageInfo

func (m *QueryChainNoncesResponse) GetChainNonces() ChainNonces {
	if m != nil {
		return m.ChainNonces
	}
	return ChainNonces{}
}

// QueryAllChainNoncesRequest is the request type for the Query/AllChainNonces.
type QueryAllChainNoncesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChainNoncesRequest) Reset()         { *m = QueryAllChainNoncesRequest{} }
func (m *QueryAllChainNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllChainNoncesRequest) ProtoMessage()    {}
func (*QueryAllChainNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{2}
}
func (m *QueryAllChainNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChainNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChainNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChainNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChainNoncesRequest.Merge(m, src)
}
func (m *QueryAllChainNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChainNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChainNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChainNoncesRequest proto.InternalMessageInfo

func (m *QueryAllChainNoncesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryChainNoncesAllResponse is the response type for the
// Query/AllChainNonces.
type QueryChainNoncesAllResponse struct {
	ChainNonces []ChainNonces       `protobuf:"bytes,1,rep,name=chain_nonces,json=chainNonces,proto3" json:"chain_nonces"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryChainNoncesAllResponse) Reset()         { *m = QueryChainNoncesAllResponse{} }
func (m *QueryChainNoncesAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainNoncesAllResponse) ProtoMessage()    {}
func (*QueryChainNoncesAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{3}
}
func (m *QueryChainNoncesAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainNoncesAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainNoncesAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainNoncesAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainNoncesAllResponse.Merge(m, src)
}
func (m *QueryChainNoncesAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainNoncesAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainNoncesAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainNoncesAllResponse proto.InternalMessageInfo

func (m *QueryChainNoncesAllResponse) GetChainNonces() []ChainNonces {
	if m != nil {
		return m.ChainNonces
	}
	return nil
}

func (m *QueryChainNoncesAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllPendingNoncesRequest is the request type for the
// Query/AllPendingNonces.
type QueryAllPendingNoncesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPendingNoncesRequest) Reset()         { *m = QueryAllPendingNoncesRequest{} }
func (m *QueryAllPendingNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingNoncesRequest) ProtoMessage()    {}
func (*QueryAllPendingNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{4}
}
func (m *QueryAllPendingNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingNoncesRequest.Merge(m, src)
}
func (m *QueryAllPendingNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingNoncesRequest proto.InternalMessageInfo

func (m *QueryAllPendingNoncesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPendingNoncesAllResponse is the response type for the
// Query/AllPendingNonces.
type QueryPendingNoncesAllResponse struct {
	PendingNonces []PendingNonces     `protobuf:"bytes,1,rep,name=pending_nonces,json=pendingNonces,proto3" json:"pending_nonces"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPendingNoncesAllResponse) Reset()         { *m = QueryPendingNoncesAllResponse{} }
func (m *QueryPendingNoncesAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingNoncesAllResponse) ProtoMessage()    {}
func (*QueryPendingNoncesAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{5}
}
func (m *QueryPendingNoncesAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingNoncesAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingNoncesAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingNoncesAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingNoncesAllResponse.Merge(m, src)
}
func (m *QueryPendingNoncesAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingNoncesAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingNoncesAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingNoncesAllResponse proto.InternalMessageInfo

func (m *QueryPendingNoncesAllResponse) GetPendingNonces() []PendingNonces {
	if m != nil {
		return m.PendingNonces
	}
	return nil
}

func (m *QueryPendingNoncesAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPendingNoncesByChainRequest is the request type for the
// Query/PendingNoncesByChain.
type QueryPendingNoncesByChainRequest struct {
	ChainId int64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryPendingNoncesByChainRequest) Reset()         { *m = QueryPendingNoncesByChainRequest{} }
func (m *QueryPendingNoncesByChainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingNoncesByChainRequest) ProtoMessage()    {}
func (*QueryPendingNoncesByChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{6}
}
func (m *QueryPendingNoncesByChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingNoncesByChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingNoncesByChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingNoncesByChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingNoncesByChainRequest.Merge(m, src)
}
func (m *QueryPendingNoncesByChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingNoncesByChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingNoncesByChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingNoncesByChainRequest proto.InternalMessageInfo

func (m *QueryPendingNoncesByChainRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// QueryPendingNoncesByChainResponse is the response type for the
// Query/PendingNoncesByChain.
type QueryPendingNoncesByChainResponse struct {
	PendingNonces PendingNonces `protobuf:"bytes,1,opt,name=pending_nonces,json=pendingNonces,proto3" json:"pending_nonces"`
}

func (m *QueryPendingNoncesByChainResponse) Reset()         { *m = QueryPendingNoncesByChainResponse{} }
func (m *QueryPendingNoncesByChainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingNoncesByChainResponse) ProtoMessage()    {}
func (*QueryPendingNoncesByChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{7}
}
func (m *QueryPendingNoncesByChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingNoncesByChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingNoncesByChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingNoncesByChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingNoncesByChainResponse.Merge(m, src)
}
func (m *QueryPendingNoncesByChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingNoncesByChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingNoncesByChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingNoncesByChainResponse proto.InternalMessageInfo

func (m *QueryPendingNoncesByChainResponse) GetPendingNonces() PendingNonces {
	if m != nil {
		return m.PendingNonces
	}
	return PendingNonces{}
}

// QueryGetTSSRequest is the request type for the Query/TSS.
type QueryGetTSSRequest struct {
}

func (m *QueryGetTSSRequest) Reset()         { *m = QueryGetTSSRequest{} }
func (m *QueryGetTSSRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTSSRequest) ProtoMessage()    {}
func (*QueryGetTSSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{8}
}
func (m *QueryGetTSSRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTSSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTSSRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTSSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTSSRequest.Merge(m, src)
}
func (m *QueryGetTSSRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTSSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTSSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTSSRequest proto.InternalMessageInfo

// QueryTSSResponse is the response type for the Query/TSS.
type QueryTSSResponse struct {
	Tss TSS `protobuf:"bytes,1,opt,name=tss,proto3" json:"tss"`
}

func (m *QueryTSSResponse) Reset()         { *m = QueryTSSResponse{} }
func (m *QueryTSSResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTSSResponse) ProtoMessage()    {}
func (*QueryTSSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{9}
}
func (m *QueryTSSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTSSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTSSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTSSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTSSResponse.Merge(m, src)
}
func (m *QueryTSSResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTSSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTSSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTSSResponse proto.InternalMessageInfo

func (m *QueryTSSResponse) GetTss() TSS {
	if m != nil {
		return m.Tss
	}
	return TSS{}
}

// QueryGetTssAddressRequest is the request type for the Query/GetTssAddress.
type QueryGetTssAddressRequest struct {
	BitcoinChainId int64 `protobuf:"varint,1,opt,name=bitcoin_chain_id,json=bitcoinChainId,proto3" json:"bitcoin_chain_id,omitempty"`
}

func (m *QueryGetTssAddressRequest) Reset()         { *m = QueryGetTssAddressRequest{} }
func (m *QueryGetTssAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTssAddressRequest) ProtoMessage()    {}
func (*QueryGetTssAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{10}
}
func (m *QueryGetTssAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTssAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTssAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTssAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTssAddressRequest.Merge(m, src)
}
func (m *QueryGetTssAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTssAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTssAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTssAddressRequest proto.InternalMessageInfo

func (m *QueryGetTssAddressRequest) GetBitcoinChainId() int64 {
	if m != nil {
		return m.BitcoinChainId
	}
	return 0
}

// QueryGetTssAddressResponse is the response type for the Query/GetTssAddress.
type QueryGetTssAddressResponse struct {
	Eth string `protobuf:"bytes,1,opt,name=eth,proto3" json:"eth,omitempty"`
}

func (m *QueryGetTssAddressResponse) Reset()         { *m = QueryGetTssAddressResponse{} }
func (m *QueryGetTssAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTssAddressResponse) ProtoMessage()    {}
func (*QueryGetTssAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{11}
}
func (m *QueryGetTssAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTssAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTssAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTssAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTssAddressResponse.Merge(m, src)
}
func (m *QueryGetTssAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTssAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTssAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTssAddressResponse proto.InternalMessageInfo

func (m *QueryGetTssAddressResponse) GetEth() string {
	if m != nil {
		return m.Eth
	}
	return ""
}

// QueryGetTssAddressByFinalizedHeightRequest is the request type for the
// Query/GetTssAddressByFinalizedHeight.
type QueryGetTssAddressByFinalizedHeightRequest struct {
	FinalizedPellHeight int64 `protobuf:"varint,1,opt,name=finalized_pell_height,json=finalizedPellHeight,proto3" json:"finalized_pell_height,omitempty"`
	BitcoinChainId      int64 `protobuf:"varint,2,opt,name=bitcoin_chain_id,json=bitcoinChainId,proto3" json:"bitcoin_chain_id,omitempty"`
}

func (m *QueryGetTssAddressByFinalizedHeightRequest) Reset() {
	*m = QueryGetTssAddressByFinalizedHeightRequest{}
}
func (m *QueryGetTssAddressByFinalizedHeightRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetTssAddressByFinalizedHeightRequest) ProtoMessage() {}
func (*QueryGetTssAddressByFinalizedHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{12}
}
func (m *QueryGetTssAddressByFinalizedHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTssAddressByFinalizedHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTssAddressByFinalizedHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTssAddressByFinalizedHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTssAddressByFinalizedHeightRequest.Merge(m, src)
}
func (m *QueryGetTssAddressByFinalizedHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTssAddressByFinalizedHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTssAddressByFinalizedHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTssAddressByFinalizedHeightRequest proto.InternalMessageInfo

func (m *QueryGetTssAddressByFinalizedHeightRequest) GetFinalizedPellHeight() int64 {
	if m != nil {
		return m.FinalizedPellHeight
	}
	return 0
}

func (m *QueryGetTssAddressByFinalizedHeightRequest) GetBitcoinChainId() int64 {
	if m != nil {
		return m.BitcoinChainId
	}
	return 0
}

// QueryGetTssAddressByFinalizedHeightResponse is the response type for the
// Query/GetTssAddressByFinalizedHeight.
type QueryGetTssAddressByFinalizedHeightResponse struct {
	Eth string `protobuf:"bytes,1,opt,name=eth,proto3" json:"eth,omitempty"`
}

func (m *QueryGetTssAddressByFinalizedHeightResponse) Reset() {
	*m = QueryGetTssAddressByFinalizedHeightResponse{}
}
func (m *QueryGetTssAddressByFinalizedHeightResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetTssAddressByFinalizedHeightResponse) ProtoMessage() {}
func (*QueryGetTssAddressByFinalizedHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{13}
}
func (m *QueryGetTssAddressByFinalizedHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTssAddressByFinalizedHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTssAddressByFinalizedHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTssAddressByFinalizedHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTssAddressByFinalizedHeightResponse.Merge(m, src)
}
func (m *QueryGetTssAddressByFinalizedHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTssAddressByFinalizedHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTssAddressByFinalizedHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTssAddressByFinalizedHeightResponse proto.InternalMessageInfo

func (m *QueryGetTssAddressByFinalizedHeightResponse) GetEth() string {
	if m != nil {
		return m.Eth
	}
	return ""
}

// QueryTssHistoryRequest is the request type for the Query/TssHistory.
type QueryTssHistoryRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTssHistoryRequest) Reset()         { *m = QueryTssHistoryRequest{} }
func (m *QueryTssHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTssHistoryRequest) ProtoMessage()    {}
func (*QueryTssHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{14}
}
func (m *QueryTssHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTssHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTssHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTssHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTssHistoryRequest.Merge(m, src)
}
func (m *QueryTssHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTssHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTssHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTssHistoryRequest proto.InternalMessageInfo

func (m *QueryTssHistoryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTssHistoryResponse is the response type for the Query/TssHistory.
type QueryTssHistoryResponse struct {
	TssList    []TSS               `protobuf:"bytes,1,rep,name=tss_list,json=tssList,proto3" json:"tss_list"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTssHistoryResponse) Reset()         { *m = QueryTssHistoryResponse{} }
func (m *QueryTssHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTssHistoryResponse) ProtoMessage()    {}
func (*QueryTssHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{15}
}
func (m *QueryTssHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTssHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTssHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTssHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTssHistoryResponse.Merge(m, src)
}
func (m *QueryTssHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTssHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTssHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTssHistoryResponse proto.InternalMessageInfo

func (m *QueryTssHistoryResponse) GetTssList() []TSS {
	if m != nil {
		return m.TssList
	}
	return nil
}

func (m *QueryTssHistoryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParamsRequest is the request type for the Query/Params.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{16}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{17}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryHasVotedRequest is the request type for the Query/HasVoted.
type QueryHasVotedRequest struct {
	BallotIdentifier string `protobuf:"bytes,1,opt,name=ballot_identifier,json=ballotIdentifier,proto3" json:"ballot_identifier,omitempty"`
	VoterAddress     string `protobuf:"bytes,2,opt,name=voter_address,json=voterAddress,proto3" json:"voter_address,omitempty"`
}

func (m *QueryHasVotedRequest) Reset()         { *m = QueryHasVotedRequest{} }
func (m *QueryHasVotedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHasVotedRequest) ProtoMessage()    {}
func (*QueryHasVotedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{18}
}
func (m *QueryHasVotedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHasVotedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHasVotedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHasVotedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHasVotedRequest.Merge(m, src)
}
func (m *QueryHasVotedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHasVotedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHasVotedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHasVotedRequest proto.InternalMessageInfo

func (m *QueryHasVotedRequest) GetBallotIdentifier() string {
	if m != nil {
		return m.BallotIdentifier
	}
	return ""
}

func (m *QueryHasVotedRequest) GetVoterAddress() string {
	if m != nil {
		return m.VoterAddress
	}
	return ""
}

// QueryHasVotedResponse is the response type for the Query/HasVoted.
type QueryHasVotedResponse struct {
	HasVoted bool `protobuf:"varint,1,opt,name=has_voted,json=hasVoted,proto3" json:"has_voted,omitempty"`
}

func (m *QueryHasVotedResponse) Reset()         { *m = QueryHasVotedResponse{} }
func (m *QueryHasVotedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHasVotedResponse) ProtoMessage()    {}
func (*QueryHasVotedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{19}
}
func (m *QueryHasVotedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHasVotedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHasVotedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHasVotedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHasVotedResponse.Merge(m, src)
}
func (m *QueryHasVotedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHasVotedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHasVotedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHasVotedResponse proto.InternalMessageInfo

func (m *QueryHasVotedResponse) GetHasVoted() bool {
	if m != nil {
		return m.HasVoted
	}
	return false
}

// QueryBallotByIdentifierRequest is the request type for the
// Query/BallotByIdentifier.
type QueryBallotByIdentifierRequest struct {
	BallotIdentifier string `protobuf:"bytes,1,opt,name=ballot_identifier,json=ballotIdentifier,proto3" json:"ballot_identifier,omitempty"`
}

func (m *QueryBallotByIdentifierRequest) Reset()         { *m = QueryBallotByIdentifierRequest{} }
func (m *QueryBallotByIdentifierRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBallotByIdentifierRequest) ProtoMessage()    {}
func (*QueryBallotByIdentifierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{20}
}
func (m *QueryBallotByIdentifierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBallotByIdentifierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBallotByIdentifierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBallotByIdentifierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBallotByIdentifierRequest.Merge(m, src)
}
func (m *QueryBallotByIdentifierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBallotByIdentifierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBallotByIdentifierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBallotByIdentifierRequest proto.InternalMessageInfo

func (m *QueryBallotByIdentifierRequest) GetBallotIdentifier() string {
	if m != nil {
		return m.BallotIdentifier
	}
	return ""
}

// QueryBallotByIdentifierResponse is the response type for the
// Query/BallotByIdentifier.
type QueryBallotByIdentifierResponse struct {
	BallotIdentifier string          `protobuf:"bytes,1,opt,name=ballot_identifier,json=ballotIdentifier,proto3" json:"ballot_identifier,omitempty"`
	Voters           []*VoterList    `protobuf:"bytes,2,rep,name=voters,proto3" json:"voters,omitempty"`
	ObservationType  ObservationType `protobuf:"varint,3,opt,name=observation_type,json=observationType,proto3,enum=relayer.ObservationType" json:"observation_type,omitempty"`
	BallotStatus     BallotStatus    `protobuf:"varint,4,opt,name=ballot_status,json=ballotStatus,proto3,enum=relayer.BallotStatus" json:"ballot_status,omitempty"`
}

func (m *QueryBallotByIdentifierResponse) Reset()         { *m = QueryBallotByIdentifierResponse{} }
func (m *QueryBallotByIdentifierResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBallotByIdentifierResponse) ProtoMessage()    {}
func (*QueryBallotByIdentifierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{21}
}
func (m *QueryBallotByIdentifierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBallotByIdentifierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBallotByIdentifierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBallotByIdentifierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBallotByIdentifierResponse.Merge(m, src)
}
func (m *QueryBallotByIdentifierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBallotByIdentifierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBallotByIdentifierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBallotByIdentifierResponse proto.InternalMessageInfo

func (m *QueryBallotByIdentifierResponse) GetBallotIdentifier() string {
	if m != nil {
		return m.BallotIdentifier
	}
	return ""
}

func (m *QueryBallotByIdentifierResponse) GetVoters() []*VoterList {
	if m != nil {
		return m.Voters
	}
	return nil
}

func (m *QueryBallotByIdentifierResponse) GetObservationType() ObservationType {
	if m != nil {
		return m.ObservationType
	}
	return ObservationType_EMPTY_OBSERVER_TYPE
}

func (m *QueryBallotByIdentifierResponse) GetBallotStatus() BallotStatus {
	if m != nil {
		return m.BallotStatus
	}
	return BallotStatus_BALLOT_FINALIZED_SUCCESS_OBSERVATION
}

// VoterList is a list of voters for a ballot.
type VoterList struct {
	VoterAddress string   `protobuf:"bytes,1,opt,name=voter_address,json=voterAddress,proto3" json:"voter_address,omitempty"`
	VoteType     VoteType `protobuf:"varint,2,opt,name=vote_type,json=voteType,proto3,enum=relayer.VoteType" json:"vote_type,omitempty"`
}

func (m *VoterList) Reset()         { *m = VoterList{} }
func (m *VoterList) String() string { return proto.CompactTextString(m) }
func (*VoterList) ProtoMessage()    {}
func (*VoterList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{22}
}
func (m *VoterList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoterList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoterList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoterList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoterList.Merge(m, src)
}
func (m *VoterList) XXX_Size() int {
	return m.Size()
}
func (m *VoterList) XXX_DiscardUnknown() {
	xxx_messageInfo_VoterList.DiscardUnknown(m)
}

var xxx_messageInfo_VoterList proto.InternalMessageInfo

func (m *VoterList) GetVoterAddress() string {
	if m != nil {
		return m.VoterAddress
	}
	return ""
}

func (m *VoterList) GetVoteType() VoteType {
	if m != nil {
		return m.VoteType
	}
	return VoteType_SUCCESS_OBSERVATION
}

// QueryObserverSet is the request type for the Query/ObserverSet.
type QueryObserverSet struct {
}

func (m *QueryObserverSet) Reset()         { *m = QueryObserverSet{} }
func (m *QueryObserverSet) String() string { return proto.CompactTextString(m) }
func (*QueryObserverSet) ProtoMessage()    {}
func (*QueryObserverSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{23}
}
func (m *QueryObserverSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryObserverSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryObserverSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryObserverSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryObserverSet.Merge(m, src)
}
func (m *QueryObserverSet) XXX_Size() int {
	return m.Size()
}
func (m *QueryObserverSet) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryObserverSet.DiscardUnknown(m)
}

var xxx_messageInfo_QueryObserverSet proto.InternalMessageInfo

// QueryObserverSetResponse is the response type for the Query/ObserverSet.
type QueryObserverSetResponse struct {
	Observers []string `protobuf:"bytes,1,rep,name=observers,proto3" json:"observers,omitempty"`
}

func (m *QueryObserverSetResponse) Reset()         { *m = QueryObserverSetResponse{} }
func (m *QueryObserverSetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryObserverSetResponse) ProtoMessage()    {}
func (*QueryObserverSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{24}
}
func (m *QueryObserverSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryObserverSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryObserverSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryObserverSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryObserverSetResponse.Merge(m, src)
}
func (m *QueryObserverSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryObserverSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryObserverSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryObserverSetResponse proto.InternalMessageInfo

func (m *QueryObserverSetResponse) GetObservers() []string {
	if m != nil {
		return m.Observers
	}
	return nil
}

// QuerySupportedChains is the request type for the Query/SupportedChains.
type QuerySupportedChains struct {
}

func (m *QuerySupportedChains) Reset()         { *m = QuerySupportedChains{} }
func (m *QuerySupportedChains) String() string { return proto.CompactTextString(m) }
func (*QuerySupportedChains) ProtoMessage()    {}
func (*QuerySupportedChains) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{25}
}
func (m *QuerySupportedChains) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySupportedChains) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySupportedChains.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySupportedChains) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySupportedChains.Merge(m, src)
}
func (m *QuerySupportedChains) XXX_Size() int {
	return m.Size()
}
func (m *QuerySupportedChains) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySupportedChains.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySupportedChains proto.InternalMessageInfo

// QuerySupportedChainsResponse is the response type for the
// Query/SupportedChains.
type QuerySupportedChainsResponse struct {
	Chains []*chains.Chain `protobuf:"bytes,1,rep,name=chains,proto3" json:"chains,omitempty"`
}

func (m *QuerySupportedChainsResponse) Reset()         { *m = QuerySupportedChainsResponse{} }
func (m *QuerySupportedChainsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySupportedChainsResponse) ProtoMessage()    {}
func (*QuerySupportedChainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{26}
}
func (m *QuerySupportedChainsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySupportedChainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySupportedChainsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySupportedChainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySupportedChainsResponse.Merge(m, src)
}
func (m *QuerySupportedChainsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySupportedChainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySupportedChainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySupportedChainsResponse proto.InternalMessageInfo

func (m *QuerySupportedChainsResponse) GetChains() []*chains.Chain {
	if m != nil {
		return m.Chains
	}
	return nil
}

// QueryGetChainParamsForChainRequest is the request type for the
// Query/GetChainParamsForChain.
type QueryGetChainParamsForChainRequest struct {
	ChainId int64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryGetChainParamsForChainRequest) Reset()         { *m = QueryGetChainParamsForChainRequest{} }
func (m *QueryGetChainParamsForChainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainParamsForChainRequest) ProtoMessage()    {}
func (*QueryGetChainParamsForChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{27}
}
func (m *QueryGetChainParamsForChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainParamsForChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainParamsForChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainParamsForChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainParamsForChainRequest.Merge(m, src)
}
func (m *QueryGetChainParamsForChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainParamsForChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainParamsForChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainParamsForChainRequest proto.InternalMessageInfo

func (m *QueryGetChainParamsForChainRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// QueryGetChainParamsForChainResponse is the response type for the
// Query/GetChainParamsForChain.
type QueryGetChainParamsForChainResponse struct {
	ChainParams *ChainParams `protobuf:"bytes,1,opt,name=chain_params,json=chainParams,proto3" json:"chain_params,omitempty"`
}

func (m *QueryGetChainParamsForChainResponse) Reset()         { *m = QueryGetChainParamsForChainResponse{} }
func (m *QueryGetChainParamsForChainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainParamsForChainResponse) ProtoMessage()    {}
func (*QueryGetChainParamsForChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{28}
}
func (m *QueryGetChainParamsForChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainParamsForChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainParamsForChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainParamsForChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainParamsForChainResponse.Merge(m, src)
}
func (m *QueryGetChainParamsForChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainParamsForChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainParamsForChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainParamsForChainResponse proto.InternalMessageInfo

func (m *QueryGetChainParamsForChainResponse) GetChainParams() *ChainParams {
	if m != nil {
		return m.ChainParams
	}
	return nil
}

// QueryGetChainParamsRequest is the request type for the Query/GetChainParams.
type QueryGetChainParamsRequest struct {
	ChainId int64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryGetChainParamsRequest) Reset()         { *m = QueryGetChainParamsRequest{} }
func (m *QueryGetChainParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainParamsRequest) ProtoMessage()    {}
func (*QueryGetChainParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{29}
}
func (m *QueryGetChainParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainParamsRequest.Merge(m, src)
}
func (m *QueryGetChainParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainParamsRequest proto.InternalMessageInfo

func (m *QueryGetChainParamsRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// QueryGetChainParamsResponse is the response type for the
// Query/GetChainParams.
type QueryGetChainParamsResponse struct {
	ChainParams *ChainParamsList `protobuf:"bytes,1,opt,name=chain_params,json=chainParams,proto3" json:"chain_params,omitempty"`
}

func (m *QueryGetChainParamsResponse) Reset()         { *m = QueryGetChainParamsResponse{} }
func (m *QueryGetChainParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainParamsResponse) ProtoMessage()    {}
func (*QueryGetChainParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{30}
}
func (m *QueryGetChainParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainParamsResponse.Merge(m, src)
}
func (m *QueryGetChainParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainParamsResponse proto.InternalMessageInfo

func (m *QueryGetChainParamsResponse) GetChainParams() *ChainParamsList {
	if m != nil {
		return m.ChainParams
	}
	return nil
}

// QueryGetNodeAccountRequest is the request type for the Query/GetNodeAccount.
type QueryGetNodeAccountRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetNodeAccountRequest) Reset()         { *m = QueryGetNodeAccountRequest{} }
func (m *QueryGetNodeAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNodeAccountRequest) ProtoMessage()    {}
func (*QueryGetNodeAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{31}
}
func (m *QueryGetNodeAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNodeAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNodeAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNodeAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNodeAccountRequest.Merge(m, src)
}
func (m *QueryGetNodeAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNodeAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNodeAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNodeAccountRequest proto.InternalMessageInfo

func (m *QueryGetNodeAccountRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// QueryNodeAccountResponse is the response type for the
// Query/GetNodeAccount.
type QueryNodeAccountResponse struct {
	NodeAccount *NodeAccount `protobuf:"bytes,1,opt,name=node_account,json=nodeAccount,proto3" json:"node_account,omitempty"`
}

func (m *QueryNodeAccountResponse) Reset()         { *m = QueryNodeAccountResponse{} }
func (m *QueryNodeAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNodeAccountResponse) ProtoMessage()    {}
func (*QueryNodeAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{32}
}
func (m *QueryNodeAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNodeAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNodeAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNodeAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNodeAccountResponse.Merge(m, src)
}
func (m *QueryNodeAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNodeAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNodeAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNodeAccountResponse proto.InternalMessageInfo

func (m *QueryNodeAccountResponse) GetNodeAccount() *NodeAccount {
	if m != nil {
		return m.NodeAccount
	}
	return nil
}

// QueryAllNodeAccountRequest is the request type for the Query/AllNodeAccount.
type QueryAllNodeAccountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNodeAccountRequest) Reset()         { *m = QueryAllNodeAccountRequest{} }
func (m *QueryAllNodeAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNodeAccountRequest) ProtoMessage()    {}
func (*QueryAllNodeAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{33}
}
func (m *QueryAllNodeAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNodeAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNodeAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNodeAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNodeAccountRequest.Merge(m, src)
}
func (m *QueryAllNodeAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNodeAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNodeAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNodeAccountRequest proto.InternalMessageInfo

func (m *QueryAllNodeAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryNodeAccountAllResponse is the response type for the
// Query/AllNodeAccount.
type QueryNodeAccountAllResponse struct {
	NodeAccount []*NodeAccount      `protobuf:"bytes,1,rep,name=node_account,json=nodeAccount,proto3" json:"node_account,omitempty"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryNodeAccountAllResponse) Reset()         { *m = QueryNodeAccountAllResponse{} }
func (m *QueryNodeAccountAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNodeAccountAllResponse) ProtoMessage()    {}
func (*QueryNodeAccountAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{34}
}
func (m *QueryNodeAccountAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNodeAccountAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNodeAccountAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNodeAccountAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNodeAccountAllResponse.Merge(m, src)
}
func (m *QueryNodeAccountAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNodeAccountAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNodeAccountAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNodeAccountAllResponse proto.InternalMessageInfo

func (m *QueryNodeAccountAllResponse) GetNodeAccount() []*NodeAccount {
	if m != nil {
		return m.NodeAccount
	}
	return nil
}

func (m *QueryNodeAccountAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetCrosschainFlagsRequest is the request type for the
// Query/GetCrosschainFlags.
type QueryGetCrosschainFlagsRequest struct {
}

func (m *QueryGetCrosschainFlagsRequest) Reset()         { *m = QueryGetCrosschainFlagsRequest{} }
func (m *QueryGetCrosschainFlagsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainFlagsRequest) ProtoMessage()    {}
func (*QueryGetCrosschainFlagsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{35}
}
func (m *QueryGetCrosschainFlagsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainFlagsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainFlagsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainFlagsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainFlagsRequest.Merge(m, src)
}
func (m *QueryGetCrosschainFlagsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainFlagsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainFlagsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainFlagsRequest proto.InternalMessageInfo

// QueryCrosschainFlagsResponse is the response type for the
// Query/GetCrosschainFlags.
type QueryCrosschainFlagsResponse struct {
	CrosschainFlags CrosschainFlags `protobuf:"bytes,1,opt,name=crosschain_flags,json=crosschainFlags,proto3" json:"crosschain_flags"`
}

func (m *QueryCrosschainFlagsResponse) Reset()         { *m = QueryCrosschainFlagsResponse{} }
func (m *QueryCrosschainFlagsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCrosschainFlagsResponse) ProtoMessage()    {}
func (*QueryCrosschainFlagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{36}
}
func (m *QueryCrosschainFlagsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCrosschainFlagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCrosschainFlagsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCrosschainFlagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCrosschainFlagsResponse.Merge(m, src)
}
func (m *QueryCrosschainFlagsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCrosschainFlagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCrosschainFlagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCrosschainFlagsResponse proto.InternalMessageInfo

func (m *QueryCrosschainFlagsResponse) GetCrosschainFlags() CrosschainFlags {
	if m != nil {
		return m.CrosschainFlags
	}
	return CrosschainFlags{}
}

// QueryGetKeygenRequest is the request type for the Query/GetKeygen.
type QueryGetKeygenRequest struct {
}

func (m *QueryGetKeygenRequest) Reset()         { *m = QueryGetKeygenRequest{} }
func (m *QueryGetKeygenRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetKeygenRequest) ProtoMessage()    {}
func (*QueryGetKeygenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{37}
}
func (m *QueryGetKeygenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKeygenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKeygenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKeygenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKeygenRequest.Merge(m, src)
}
func (m *QueryGetKeygenRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKeygenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKeygenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKeygenRequest proto.InternalMessageInfo

// QueryKeygenResponse is the response type for the Query/GetKeygen.
type QueryKeygenResponse struct {
	Keygen *Keygen `protobuf:"bytes,1,opt,name=keygen,proto3" json:"keygen,omitempty"`
}

func (m *QueryKeygenResponse) Reset()         { *m = QueryKeygenResponse{} }
func (m *QueryKeygenResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKeygenResponse) ProtoMessage()    {}
func (*QueryKeygenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{38}
}
func (m *QueryKeygenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeygenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeygenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeygenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeygenResponse.Merge(m, src)
}
func (m *QueryKeygenResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeygenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeygenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeygenResponse proto.InternalMessageInfo

func (m *QueryKeygenResponse) GetKeygen() *Keygen {
	if m != nil {
		return m.Keygen
	}
	return nil
}

// QueryShowObserverCountRequest is the request type for the
// Query/ShowObserverCount.
type QueryShowObserverCountRequest struct {
}

func (m *QueryShowObserverCountRequest) Reset()         { *m = QueryShowObserverCountRequest{} }
func (m *QueryShowObserverCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShowObserverCountRequest) ProtoMessage()    {}
func (*QueryShowObserverCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{39}
}
func (m *QueryShowObserverCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowObserverCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowObserverCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowObserverCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowObserverCountRequest.Merge(m, src)
}
func (m *QueryShowObserverCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowObserverCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowObserverCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowObserverCountRequest proto.InternalMessageInfo

// QueryShowObserverCountResponse is the response type for the
// Query/ShowObserverCount.
type QueryShowObserverCountResponse struct {
	LastObserverCount *LastRelayerCount `protobuf:"bytes,1,opt,name=last_observer_count,json=lastObserverCount,proto3" json:"last_observer_count,omitempty"`
}

func (m *QueryShowObserverCountResponse) Reset()         { *m = QueryShowObserverCountResponse{} }
func (m *QueryShowObserverCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShowObserverCountResponse) ProtoMessage()    {}
func (*QueryShowObserverCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{40}
}
func (m *QueryShowObserverCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowObserverCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowObserverCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowObserverCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowObserverCountResponse.Merge(m, src)
}
func (m *QueryShowObserverCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowObserverCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowObserverCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowObserverCountResponse proto.InternalMessageInfo

func (m *QueryShowObserverCountResponse) GetLastObserverCount() *LastRelayerCount {
	if m != nil {
		return m.LastObserverCount
	}
	return nil
}

// QueryBlameByIdentifierRequest is the request type for the
// Query/BlameByIdentifier.
type QueryBlameByIdentifierRequest struct {
	BlameIdentifier string `protobuf:"bytes,1,opt,name=blame_identifier,json=blameIdentifier,proto3" json:"blame_identifier,omitempty"`
}

func (m *QueryBlameByIdentifierRequest) Reset()         { *m = QueryBlameByIdentifierRequest{} }
func (m *QueryBlameByIdentifierRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlameByIdentifierRequest) ProtoMessage()    {}
func (*QueryBlameByIdentifierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{41}
}
func (m *QueryBlameByIdentifierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlameByIdentifierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlameByIdentifierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlameByIdentifierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlameByIdentifierRequest.Merge(m, src)
}
func (m *QueryBlameByIdentifierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlameByIdentifierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlameByIdentifierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlameByIdentifierRequest proto.InternalMessageInfo

func (m *QueryBlameByIdentifierRequest) GetBlameIdentifier() string {
	if m != nil {
		return m.BlameIdentifier
	}
	return ""
}

// QueryBlameByIdentifierResponse is the response type for the
// Query/BlameByIdentifier.
type QueryBlameByIdentifierResponse struct {
	BlameInfo *Blame `protobuf:"bytes,1,opt,name=blame_info,json=blameInfo,proto3" json:"blame_info,omitempty"`
}

func (m *QueryBlameByIdentifierResponse) Reset()         { *m = QueryBlameByIdentifierResponse{} }
func (m *QueryBlameByIdentifierResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlameByIdentifierResponse) ProtoMessage()    {}
func (*QueryBlameByIdentifierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{42}
}
func (m *QueryBlameByIdentifierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlameByIdentifierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlameByIdentifierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlameByIdentifierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlameByIdentifierResponse.Merge(m, src)
}
func (m *QueryBlameByIdentifierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlameByIdentifierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlameByIdentifierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlameByIdentifierResponse proto.InternalMessageInfo

func (m *QueryBlameByIdentifierResponse) GetBlameInfo() *Blame {
	if m != nil {
		return m.BlameInfo
	}
	return nil
}

// QueryAllBlameRecordsRequest is the request type for the
// Query/AllBlameRecords.
type QueryAllBlameRecordsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlameRecordsRequest) Reset()         { *m = QueryAllBlameRecordsRequest{} }
func (m *QueryAllBlameRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlameRecordsRequest) ProtoMessage()    {}
func (*QueryAllBlameRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{43}
}
func (m *QueryAllBlameRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlameRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlameRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlameRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlameRecordsRequest.Merge(m, src)
}
func (m *QueryAllBlameRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlameRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlameRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlameRecordsRequest proto.InternalMessageInfo

func (m *QueryAllBlameRecordsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetAllBlameRecordsResponse is the response type for the
// Query/AllBlameRecords.
type QueryGetAllBlameRecordsResponse struct {
	BlameInfo  []Blame             `protobuf:"bytes,1,rep,name=blame_info,json=blameInfo,proto3" json:"blame_info"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllBlameRecordsResponse) Reset()         { *m = QueryGetAllBlameRecordsResponse{} }
func (m *QueryGetAllBlameRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllBlameRecordsResponse) ProtoMessage()    {}
func (*QueryGetAllBlameRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{44}
}
func (m *QueryGetAllBlameRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllBlameRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllBlameRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllBlameRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllBlameRecordsResponse.Merge(m, src)
}
func (m *QueryGetAllBlameRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllBlameRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllBlameRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllBlameRecordsResponse proto.InternalMessageInfo

func (m *QueryGetAllBlameRecordsResponse) GetBlameInfo() []Blame {
	if m != nil {
		return m.BlameInfo
	}
	return nil
}

func (m *QueryGetAllBlameRecordsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBlameByChainAndNonceRequest is the request type for the
// Query/BlameByChainAndNonce.
type QueryBlameByChainAndNonceRequest struct {
	ChainId int64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce   int64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryBlameByChainAndNonceRequest) Reset()         { *m = QueryBlameByChainAndNonceRequest{} }
func (m *QueryBlameByChainAndNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlameByChainAndNonceRequest) ProtoMessage()    {}
func (*QueryBlameByChainAndNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{45}
}
func (m *QueryBlameByChainAndNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlameByChainAndNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlameByChainAndNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlameByChainAndNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlameByChainAndNonceRequest.Merge(m, src)
}
func (m *QueryBlameByChainAndNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlameByChainAndNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlameByChainAndNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlameByChainAndNonceRequest proto.InternalMessageInfo

func (m *QueryBlameByChainAndNonceRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryBlameByChainAndNonceRequest) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// QueryBlamesByChainAndNonceResponse is the response type for the
// Query/BlameByChainAndNonce.
type QueryBlamesByChainAndNonceResponse struct {
	BlameInfo []*Blame `protobuf:"bytes,1,rep,name=blame_info,json=blameInfo,proto3" json:"blame_info,omitempty"`
}

func (m *QueryBlamesByChainAndNonceResponse) Reset()         { *m = QueryBlamesByChainAndNonceResponse{} }
func (m *QueryBlamesByChainAndNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlamesByChainAndNonceResponse) ProtoMessage()    {}
func (*QueryBlamesByChainAndNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca61efb15b91bf8d, []int{46}
}
func (m *QueryBlamesByChainAndNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlamesByChainAndNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlamesByChainAndNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlamesByChainAndNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlamesByChainAndNonceResponse.Merge(m, src)
}
func (m *QueryBlamesByChainAndNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlamesByChainAndNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlamesByChainAndNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlamesByChainAndNonceResponse proto.InternalMessageInfo

func (m *QueryBlamesByChainAndNonceResponse) GetBlameInfo() []*Blame {
	if m != nil {
		return m.BlameInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetChainNoncesRequest)(nil), "relayer.QueryGetChainNoncesRequest")
	proto.RegisterType((*QueryChainNoncesResponse)(nil), "relayer.QueryChainNoncesResponse")
	proto.RegisterType((*QueryAllChainNoncesRequest)(nil), "relayer.QueryAllChainNoncesRequest")
	proto.RegisterType((*QueryChainNoncesAllResponse)(nil), "relayer.QueryChainNoncesAllResponse")
	proto.RegisterType((*QueryAllPendingNoncesRequest)(nil), "relayer.QueryAllPendingNoncesRequest")
	proto.RegisterType((*QueryPendingNoncesAllResponse)(nil), "relayer.QueryPendingNoncesAllResponse")
	proto.RegisterType((*QueryPendingNoncesByChainRequest)(nil), "relayer.QueryPendingNoncesByChainRequest")
	proto.RegisterType((*QueryPendingNoncesByChainResponse)(nil), "relayer.QueryPendingNoncesByChainResponse")
	proto.RegisterType((*QueryGetTSSRequest)(nil), "relayer.QueryGetTSSRequest")
	proto.RegisterType((*QueryTSSResponse)(nil), "relayer.QueryTSSResponse")
	proto.RegisterType((*QueryGetTssAddressRequest)(nil), "relayer.QueryGetTssAddressRequest")
	proto.RegisterType((*QueryGetTssAddressResponse)(nil), "relayer.QueryGetTssAddressResponse")
	proto.RegisterType((*QueryGetTssAddressByFinalizedHeightRequest)(nil), "relayer.QueryGetTssAddressByFinalizedHeightRequest")
	proto.RegisterType((*QueryGetTssAddressByFinalizedHeightResponse)(nil), "relayer.QueryGetTssAddressByFinalizedHeightResponse")
	proto.RegisterType((*QueryTssHistoryRequest)(nil), "relayer.QueryTssHistoryRequest")
	proto.RegisterType((*QueryTssHistoryResponse)(nil), "relayer.QueryTssHistoryResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "relayer.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "relayer.QueryParamsResponse")
	proto.RegisterType((*QueryHasVotedRequest)(nil), "relayer.QueryHasVotedRequest")
	proto.RegisterType((*QueryHasVotedResponse)(nil), "relayer.QueryHasVotedResponse")
	proto.RegisterType((*QueryBallotByIdentifierRequest)(nil), "relayer.QueryBallotByIdentifierRequest")
	proto.RegisterType((*QueryBallotByIdentifierResponse)(nil), "relayer.QueryBallotByIdentifierResponse")
	proto.RegisterType((*VoterList)(nil), "relayer.VoterList")
	proto.RegisterType((*QueryObserverSet)(nil), "relayer.QueryObserverSet")
	proto.RegisterType((*QueryObserverSetResponse)(nil), "relayer.QueryObserverSetResponse")
	proto.RegisterType((*QuerySupportedChains)(nil), "relayer.QuerySupportedChains")
	proto.RegisterType((*QuerySupportedChainsResponse)(nil), "relayer.QuerySupportedChainsResponse")
	proto.RegisterType((*QueryGetChainParamsForChainRequest)(nil), "relayer.QueryGetChainParamsForChainRequest")
	proto.RegisterType((*QueryGetChainParamsForChainResponse)(nil), "relayer.QueryGetChainParamsForChainResponse")
	proto.RegisterType((*QueryGetChainParamsRequest)(nil), "relayer.QueryGetChainParamsRequest")
	proto.RegisterType((*QueryGetChainParamsResponse)(nil), "relayer.QueryGetChainParamsResponse")
	proto.RegisterType((*QueryGetNodeAccountRequest)(nil), "relayer.QueryGetNodeAccountRequest")
	proto.RegisterType((*QueryNodeAccountResponse)(nil), "relayer.QueryNodeAccountResponse")
	proto.RegisterType((*QueryAllNodeAccountRequest)(nil), "relayer.QueryAllNodeAccountRequest")
	proto.RegisterType((*QueryNodeAccountAllResponse)(nil), "relayer.QueryNodeAccountAllResponse")
	proto.RegisterType((*QueryGetCrosschainFlagsRequest)(nil), "relayer.QueryGetCrosschainFlagsRequest")
	proto.RegisterType((*QueryCrosschainFlagsResponse)(nil), "relayer.QueryCrosschainFlagsResponse")
	proto.RegisterType((*QueryGetKeygenRequest)(nil), "relayer.QueryGetKeygenRequest")
	proto.RegisterType((*QueryKeygenResponse)(nil), "relayer.QueryKeygenResponse")
	proto.RegisterType((*QueryShowObserverCountRequest)(nil), "relayer.QueryShowObserverCountRequest")
	proto.RegisterType((*QueryShowObserverCountResponse)(nil), "relayer.QueryShowObserverCountResponse")
	proto.RegisterType((*QueryBlameByIdentifierRequest)(nil), "relayer.QueryBlameByIdentifierRequest")
	proto.RegisterType((*QueryBlameByIdentifierResponse)(nil), "relayer.QueryBlameByIdentifierResponse")
	proto.RegisterType((*QueryAllBlameRecordsRequest)(nil), "relayer.QueryAllBlameRecordsRequest")
	proto.RegisterType((*QueryGetAllBlameRecordsResponse)(nil), "relayer.QueryGetAllBlameRecordsResponse")
	proto.RegisterType((*QueryBlameByChainAndNonceRequest)(nil), "relayer.QueryBlameByChainAndNonceRequest")
	proto.RegisterType((*QueryBlamesByChainAndNonceResponse)(nil), "relayer.QueryBlamesByChainAndNonceResponse")
}

func init() { proto.RegisterFile("relayer/query.proto", fileDescriptor_ca61efb15b91bf8d) }

var fileDescriptor_ca61efb15b91bf8d = []byte{
	// 2130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x99, 0xcf, 0x6f, 0xdc, 0xc6,
	0x15, 0xc7, 0x4d, 0x6f, 0x22, 0x4b, 0x23, 0x5b, 0x3f, 0xc6, 0x92, 0x2d, 0xd1, 0xca, 0x4a, 0x1e,
	0xc9, 0x96, 0x64, 0x39, 0xcb, 0x58, 0x36, 0x1a, 0x37, 0x3f, 0x6c, 0xac, 0x94, 0xda, 0x56, 0x9b,
	0x3a, 0xea, 0xae, 0x51, 0x20, 0x29, 0x90, 0x0d, 0x77, 0x77, 0xb4, 0xcb, 0x8a, 0x26, 0x37, 0x1c,
	0xca, 0xf6, 0x56, 0xd0, 0xa5, 0x28, 0x0a, 0xb4, 0x28, 0xd0, 0x16, 0x2d, 0xd0, 0x9e, 0xda, 0x43,
	0x51, 0xa0, 0x97, 0x5c, 0x8b, 0xfe, 0x09, 0x39, 0x06, 0xc8, 0xa5, 0xa7, 0xa2, 0xb0, 0x7b, 0xee,
	0x3f, 0xd0, 0x4b, 0xc1, 0x99, 0x47, 0x2e, 0x67, 0x38, 0xa4, 0xd6, 0x81, 0x7c, 0xda, 0xe5, 0x9b,
	0x1f, 0xef, 0x33, 0x6f, 0xde, 0xcc, 0x7c, 0x39, 0x44, 0xe7, 0x03, 0xea, 0xda, 0x7d, 0x1a, 0x58,
	0x9f, 0x1f, 0xd0, 0xa0, 0x5f, 0xe9, 0x05, 0x7e, 0xe8, 0xe3, 0x33, 0x60, 0x34, 0xaf, 0xb5, 0x7c,
	0xf6, 0xd8, 0x67, 0x56, 0xd3, 0x66, 0x54, 0xd4, 0xb0, 0x9e, 0xdc, 0x68, 0xd2, 0xd0, 0xbe, 0x61,
	0xf5, 0xec, 0x8e, 0xe3, 0xd9, 0xa1, 0xe3, 0x7b, 0xa2, 0x91, 0x39, 0xd3, 0xf1, 0x3b, 0x3e, 0xff,
	0x6b, 0x45, 0xff, 0xc0, 0xba, 0xd0, 0xf1, 0xfd, 0x8e, 0x4b, 0x2d, 0xbb, 0xe7, 0x58, 0xb6, 0xe7,
	0xf9, 0x21, 0x6f, 0xc2, 0xa0, 0xf4, 0x62, 0x6f, 0xbf, 0x63, 0xb5, 0xba, 0xb6, 0xe3, 0x31, 0xf8,
	0x89, 0x3b, 0x8b, 0xb1, 0x9a, 0xb6, 0xeb, 0xfa, 0x21, 0x58, 0x13, 0xd8, 0xa6, 0x6b, 0x3f, 0xa6,
	0x60, 0x34, 0x63, 0x23, 0xef, 0xa0, 0xe1, 0xf9, 0x5e, 0x8b, 0xc6, 0xdd, 0x94, 0x93, 0xb2, 0xc0,
	0x67, 0x4c, 0x54, 0xd8, 0x73, 0xed, 0x4e, 0xc6, 0xcd, 0x3e, 0xed, 0x77, 0xa8, 0xa7, 0xf6, 0xe8,
	0xf9, 0x6d, 0xda, 0xb0, 0x5b, 0x2d, 0xff, 0xc0, 0x0b, 0xd5, 0x16, 0x3d, 0x3b, 0xb0, 0x1f, 0xc7,
	0xfd, 0x2c, 0x24, 0x56, 0xea, 0xb5, 0x1d, 0xaf, 0x23, 0x53, 0xcc, 0xc6, 0xa5, 0xf0, 0x0b, 0xe6,
	0xe9, 0xd8, 0x1c, 0x32, 0xa8, 0x49, 0x36, 0x91, 0xf9, 0x83, 0x28, 0xca, 0xf7, 0x69, 0xb8, 0x1d,
	0xc1, 0x3e, 0xe4, 0xdd, 0xd4, 0xe8, 0xe7, 0x07, 0x94, 0x85, 0x78, 0x06, 0xbd, 0xee, 0x78, 0x6d,
	0xfa, 0x6c, 0xce, 0x58, 0x32, 0xd6, 0xc6, 0x6a, 0xe2, 0x81, 0x7c, 0x8c, 0xe6, 0x78, 0x1b, 0xa9,
	0x01, 0xeb, 0xf9, 0x1e, 0xa3, 0xf8, 0x7d, 0x74, 0x36, 0x1d, 0x15, 0xde, 0x70, 0x7c, 0x73, 0xa6,
	0x12, 0x83, 0xa4, 0xda, 0x6c, 0xbd, 0xf6, 0xe5, 0xbf, 0x16, 0x4f, 0xd5, 0xc6, 0x5b, 0x03, 0x13,
	0x69, 0x03, 0x4e, 0xd5, 0x75, 0x35, 0x38, 0xf7, 0x10, 0x1a, 0x24, 0x01, 0x74, 0x7d, 0xb5, 0x22,
	0x32, 0xa6, 0x12, 0x65, 0x4c, 0x45, 0xe4, 0x14, 0x64, 0x4c, 0x65, 0xd7, 0xee, 0x50, 0x68, 0x5b,
	0x4b, 0xb5, 0x24, 0x7f, 0x35, 0xd0, 0x25, 0x75, 0x04, 0x55, 0xd7, 0x2d, 0x18, 0x44, 0xe9, 0x25,
	0x06, 0x81, 0xef, 0x4b, 0x98, 0xa7, 0x39, 0xe6, 0xea, 0xb1, 0x98, 0xc2, 0xb7, 0xc4, 0xb9, 0x87,
	0x16, 0xe2, 0x68, 0xec, 0x8a, 0x69, 0x7e, 0x35, 0xf1, 0xf8, 0xc2, 0x40, 0x6f, 0x70, 0x47, 0x92,
	0x97, 0x74, 0x44, 0xb6, 0xd1, 0x84, 0x9c, 0x68, 0x10, 0x93, 0x0b, 0x49, 0x4c, 0xa4, 0xa6, 0x10,
	0x95, 0x73, 0xbd, 0xb4, 0xf1, 0xe4, 0xe2, 0xf2, 0x3e, 0x5a, 0xca, 0xe2, 0x6e, 0x89, 0xd9, 0x8c,
	0x63, 0x33, 0x8f, 0x46, 0xc5, 0x1c, 0x3a, 0x6d, 0x1e, 0x99, 0x52, 0xed, 0x0c, 0x7f, 0xde, 0x69,
	0x93, 0x2e, 0xba, 0x5c, 0xd0, 0xbc, 0x60, 0xc4, 0xc6, 0x4b, 0x8e, 0x98, 0xcc, 0x20, 0x1c, 0xaf,
	0xae, 0x47, 0xf5, 0x3a, 0xa0, 0x91, 0xdb, 0x68, 0x8a, 0x5b, 0xb9, 0x09, 0xdc, 0xad, 0xa0, 0x52,
	0xc8, 0x62, 0x1f, 0x67, 0x13, 0x1f, 0x8f, 0xea, 0x75, 0xe8, 0x39, 0x2a, 0x26, 0xdf, 0x41, 0xf3,
	0x49, 0x7f, 0x8c, 0x55, 0xdb, 0xed, 0x80, 0xb2, 0x24, 0x1b, 0xd6, 0xd0, 0x54, 0xd3, 0x09, 0x5b,
	0xbe, 0xe3, 0x35, 0x94, 0x91, 0x4f, 0x80, 0x7d, 0x1b, 0x02, 0x50, 0x19, 0x2c, 0xfa, 0x74, 0x37,
	0x80, 0x32, 0x85, 0x4a, 0x34, 0xec, 0xc2, 0x92, 0x8f, 0xfe, 0x92, 0x5f, 0x1a, 0xe8, 0x5a, 0xb6,
	0xc1, 0x56, 0xff, 0x9e, 0xe3, 0xd9, 0xae, 0xf3, 0x13, 0xda, 0x7e, 0x40, 0x9d, 0x4e, 0x37, 0x8c,
	0x41, 0x36, 0xd1, 0xec, 0x5e, 0x5c, 0xd2, 0xe8, 0x51, 0xd7, 0x6d, 0x74, 0x79, 0x39, 0xd0, 0x9c,
	0x4f, 0x0a, 0x77, 0xa9, 0xeb, 0x8a, 0xa6, 0x5a, 0xf8, 0xd3, 0x5a, 0xf8, 0xbb, 0x68, 0x63, 0x28,
	0x96, 0xdc, 0xd1, 0x7c, 0x86, 0x2e, 0x88, 0xf0, 0x33, 0xf6, 0xc0, 0x61, 0xa1, 0x1f, 0xf4, 0x4f,
	0x7a, 0x3d, 0xfd, 0xd6, 0x40, 0x17, 0x33, 0x2e, 0x80, 0xe7, 0x4d, 0x34, 0x1a, 0x32, 0xd6, 0x70,
	0x1d, 0x16, 0xc2, 0x1a, 0xd2, 0xcd, 0xf6, 0x99, 0x90, 0xb1, 0x0f, 0x1d, 0x16, 0x9e, 0xdc, 0x9a,
	0x89, 0x53, 0x71, 0x97, 0x9f, 0x22, 0x71, 0x2a, 0x7e, 0x80, 0xce, 0x4b, 0xd6, 0x04, 0x72, 0x44,
	0x9c, 0x36, 0x10, 0x84, 0xc9, 0x41, 0xd2, 0x73, 0x33, 0x50, 0x42, 0x25, 0xd2, 0x45, 0x33, 0xbc,
	0x97, 0x07, 0x36, 0xfb, 0xa1, 0x1f, 0xd2, 0x76, 0x1c, 0xcf, 0x0d, 0x34, 0x2d, 0x4e, 0xd3, 0x86,
	0xd3, 0xa6, 0x5e, 0xe8, 0xec, 0x39, 0x34, 0x80, 0x99, 0x98, 0x12, 0x05, 0x3b, 0x89, 0x1d, 0x2f,
	0xa3, 0x73, 0x4f, 0xfc, 0x90, 0x06, 0x0d, 0x5b, 0x4c, 0x29, 0x1f, 0xec, 0x58, 0xed, 0x2c, 0x37,
	0xc2, 0x34, 0x93, 0x5b, 0x68, 0x56, 0xf1, 0x04, 0xc4, 0x97, 0xd0, 0x58, 0xd7, 0x66, 0x8d, 0xa8,
	0xb2, 0xc8, 0xfa, 0xd1, 0xda, 0x68, 0x17, 0x2a, 0x91, 0xef, 0xa3, 0x32, 0x6f, 0xb5, 0xc5, 0x7d,
	0x6e, 0xf5, 0x07, 0x5e, 0xbf, 0x09, 0x29, 0xf9, 0x9f, 0x81, 0x16, 0x73, 0xfb, 0x03, 0x9e, 0x97,
	0x1a, 0xfa, 0x35, 0x34, 0xc2, 0x47, 0x19, 0x8d, 0x39, 0xca, 0x08, 0x9c, 0x84, 0x3b, 0xe2, 0x0f,
	0xa2, 0x44, 0xa8, 0x41, 0x0d, 0xbc, 0x8d, 0xa6, 0xfc, 0x26, 0xa3, 0xc1, 0x13, 0x3e, 0xad, 0x8d,
	0xb0, 0xdf, 0xa3, 0x73, 0xa5, 0x25, 0x63, 0x6d, 0x62, 0x73, 0x2e, 0x69, 0xf5, 0xd1, 0xa0, 0xc2,
	0xa3, 0x7e, 0x8f, 0xd6, 0x26, 0x7d, 0xd9, 0x80, 0xdf, 0x41, 0xe7, 0x80, 0x8e, 0x85, 0x76, 0x78,
	0xc0, 0xe6, 0x5e, 0xe3, 0x3d, 0xcc, 0x26, 0x3d, 0x88, 0x91, 0xd5, 0x79, 0x61, 0xed, 0x6c, 0x33,
	0xf5, 0x44, 0x3e, 0x43, 0x63, 0x09, 0x55, 0x76, 0xd2, 0x8c, 0xec, 0xa4, 0xe1, 0x0a, 0x1a, 0x8b,
	0x9e, 0x05, 0xeb, 0x69, 0xee, 0x69, 0x5a, 0x1a, 0x21, 0x87, 0x1c, 0x7d, 0x02, 0xff, 0x08, 0x86,
	0xfd, 0x51, 0x0c, 0x83, 0x06, 0x75, 0x1a, 0xed, 0x99, 0x73, 0xaa, 0x2d, 0x89, 0xf5, 0x02, 0x1a,
	0xf3, 0xc1, 0x2c, 0xce, 0xa5, 0xb1, 0xda, 0xc0, 0x40, 0x2e, 0x40, 0x72, 0xd6, 0x0f, 0x7a, 0x3d,
	0x3f, 0x08, 0x69, 0x9b, 0x6f, 0x24, 0x8c, 0xec, 0xc0, 0xe1, 0xaa, 0xd8, 0x93, 0x5e, 0xd7, 0xd1,
	0x88, 0x10, 0x88, 0xb0, 0x4c, 0xa7, 0x2b, 0xbd, 0xfd, 0x4e, 0x05, 0x34, 0xa3, 0x38, 0x2b, 0xa0,
	0x02, 0xb9, 0x8b, 0x88, 0x24, 0xa2, 0xc4, 0x22, 0xb9, 0xe7, 0x07, 0xc3, 0x9e, 0x48, 0x9f, 0xa2,
	0xe5, 0xc2, 0x0e, 0x00, 0xe9, 0xed, 0x58, 0x97, 0x48, 0x8b, 0x53, 0xd1, 0x25, 0xb0, 0x94, 0x85,
	0x22, 0x11, 0x0f, 0xe4, 0x6d, 0x45, 0xe5, 0x49, 0x9b, 0x40, 0x11, 0xd8, 0x27, 0x20, 0x94, 0xd4,
	0x86, 0x00, 0xf4, 0xae, 0x16, 0x68, 0x4e, 0x07, 0xc4, 0x93, 0x58, 0x82, 0x4a, 0x49, 0xcf, 0x87,
	0x7e, 0x9b, 0x56, 0x85, 0xea, 0x2d, 0x96, 0x9e, 0x75, 0x48, 0x03, 0xa9, 0xc1, 0x20, 0x3a, 0x69,
	0xf9, 0x9c, 0x89, 0x4e, 0xba, 0xcd, 0xb8, 0x37, 0x78, 0x48, 0x8b, 0x4e, 0x0d, 0xc8, 0x49, 0x1d,
	0x0a, 0x7f, 0x8e, 0x45, 0x67, 0xca, 0x47, 0x5a, 0x62, 0x65, 0xf1, 0x4b, 0x43, 0xe1, 0x9f, 0xdc,
	0x11, 0xb1, 0x04, 0xdb, 0x64, 0x34, 0xd9, 0xc9, 0xdb, 0xcb, 0xbd, 0xe8, 0xe5, 0x25, 0x3e, 0x2e,
	0x1c, 0x58, 0x33, 0x99, 0x62, 0x18, 0xc3, 0x0e, 0x9a, 0x52, 0xdf, 0x7b, 0xb2, 0x39, 0x21, 0xb7,
	0x85, 0xa3, 0x64, 0xb2, 0x25, 0x9b, 0xc9, 0x45, 0xd8, 0xe9, 0xef, 0xd3, 0xf0, 0x7b, 0xfc, 0x55,
	0x29, 0x66, 0xb8, 0x03, 0x47, 0x56, 0x6c, 0x05, 0xd7, 0xab, 0x68, 0x44, 0xbc, 0x52, 0x65, 0x8e,
	0x2c, 0xa8, 0x08, 0xc5, 0x64, 0x11, 0xb4, 0x6e, 0xbd, 0xeb, 0x3f, 0x8d, 0x77, 0x93, 0xed, 0xd4,
	0x84, 0x93, 0x7d, 0x08, 0x83, 0xa6, 0x42, 0x32, 0xcc, 0xf3, 0xae, 0xcd, 0xc2, 0x46, 0xbc, 0xc9,
	0x34, 0xd2, 0x09, 0x37, 0x9f, 0x38, 0xfe, 0xd0, 0x66, 0x61, 0x4d, 0xfc, 0x17, 0xed, 0xa7, 0xa3,
	0x56, 0x52, 0x97, 0xe4, 0xbb, 0x40, 0xb3, 0x15, 0xbd, 0x5f, 0xea, 0x4e, 0xa6, 0x75, 0x34, 0xc5,
	0xdf, 0x3d, 0xb3, 0xe7, 0xc8, 0x24, 0xb7, 0xa7, 0xce, 0xa5, 0x8f, 0xe2, 0x63, 0x2e, 0xdb, 0x57,
	0x72, 0xae, 0x23, 0xe8, 0xcc, 0xdb, 0xf3, 0x81, 0x77, 0x62, 0xb0, 0xe9, 0x47, 0x45, 0xb5, 0x31,
	0xd1, 0xad, 0xb7, 0xe7, 0x13, 0x0a, 0x19, 0x5b, 0x75, 0x5d, 0x51, 0x46, 0x5b, 0x7e, 0xd0, 0x66,
	0xaf, 0x60, 0x65, 0x2c, 0xc6, 0x73, 0x9d, 0x71, 0x05, 0xe4, 0x37, 0x15, 0xf2, 0x52, 0x96, 0x1c,
	0x32, 0x69, 0xc0, 0x7f, 0x72, 0x2b, 0xa3, 0x0e, 0x2f, 0x1c, 0x10, 0x59, 0xbe, 0xad, 0x55, 0xbd,
	0x36, 0x57, 0xf9, 0xc7, 0xef, 0xa2, 0xd1, 0x5e, 0xc6, 0xdf, 0x21, 0x40, 0xd1, 0x8a, 0x07, 0x52,
	0x87, 0x53, 0x83, 0x77, 0xca, 0x32, 0xbd, 0xe6, 0x4c, 0x59, 0xa9, 0x70, 0xca, 0x36, 0xbf, 0x36,
	0xd1, 0xeb, 0xbc, 0x57, 0xdc, 0x41, 0x23, 0x62, 0xa3, 0xc5, 0x97, 0x92, 0xea, 0x59, 0x05, 0x68,
	0x2e, 0xe8, 0x0b, 0x85, 0x77, 0x42, 0x7e, 0xfa, 0xf5, 0x7f, 0x7e, 0x77, 0x7a, 0x01, 0x9b, 0x56,
	0xa4, 0xe3, 0xdf, 0xe4, 0x03, 0xb2, 0xe4, 0x0b, 0x09, 0xfc, 0x7b, 0x03, 0x8d, 0xc6, 0x7a, 0x0c,
	0xbf, 0x21, 0x77, 0xa7, 0x28, 0x42, 0xb3, 0x9c, 0x57, 0x0c, 0xfe, 0x76, 0xb8, 0xbf, 0x6d, 0x5c,
	0xd5, 0xf9, 0x4b, 0x04, 0x9e, 0x75, 0x98, 0xd1, 0x56, 0x47, 0xd6, 0xa1, 0x24, 0x44, 0x8e, 0xf0,
	0x17, 0x06, 0xc2, 0x59, 0x81, 0x86, 0x57, 0x65, 0x82, 0x5c, 0x49, 0x68, 0xae, 0x1d, 0x5f, 0x11,
	0xa0, 0x3f, 0xe0, 0xd0, 0x77, 0xf0, 0x7b, 0x3a, 0x68, 0x20, 0x6d, 0xf6, 0x53, 0xb0, 0x3a, 0x7e,
	0x7c, 0x80, 0xc6, 0x53, 0xe2, 0x06, 0xcf, 0xcb, 0xee, 0x53, 0x45, 0xe6, 0xe5, 0xdc, 0xa2, 0x04,
	0x69, 0x8d, 0x23, 0x11, 0xbc, 0xa4, 0x43, 0x4a, 0xb6, 0x2d, 0x46, 0x43, 0xfc, 0x33, 0x03, 0x4d,
	0x2a, 0x12, 0x48, 0x9d, 0x44, 0xa5, 0xd8, 0xbc, 0x52, 0x58, 0x9c, 0x30, 0x6c, 0x70, 0x86, 0x2b,
	0x78, 0x59, 0xc7, 0xc0, 0x14, 0x97, 0x7f, 0x37, 0xd0, 0x05, 0xbd, 0xfa, 0xc1, 0x1b, 0xb2, 0xbb,
	0x42, 0x91, 0x65, 0x5e, 0x1f, 0xae, 0x32, 0x20, 0x56, 0x39, 0xe2, 0xbb, 0xf8, 0xdb, 0x3a, 0xc4,
	0x0e, 0x0d, 0x1b, 0x69, 0x75, 0xd3, 0xd8, 0xf3, 0x03, 0x61, 0xb0, 0x0e, 0xe3, 0x95, 0x7e, 0x84,
	0x7f, 0x61, 0xa0, 0x09, 0xd9, 0x0b, 0x5e, 0x2e, 0x62, 0x88, 0x41, 0x57, 0x8a, 0x2b, 0x01, 0xe0,
	0x75, 0x0e, 0x78, 0x15, 0xaf, 0x0c, 0x03, 0x88, 0x7f, 0x6e, 0xa0, 0xf1, 0x94, 0x4c, 0xd0, 0x80,
	0x64, 0xf5, 0x8d, 0x9a, 0x4d, 0x1a, 0x65, 0x45, 0x2c, 0x4e, 0xb1, 0x8e, 0x57, 0x75, 0x14, 0x29,
	0x29, 0x62, 0x1d, 0x72, 0x95, 0x76, 0x14, 0x25, 0xd5, 0x84, 0x2c, 0x73, 0x54, 0x16, 0xad, 0xd6,
	0x52, 0x83, 0xa2, 0x57, 0x4a, 0x64, 0x95, 0xe3, 0x5c, 0xc6, 0x8b, 0xc7, 0xe0, 0xe0, 0x5f, 0x1b,
	0x68, 0x52, 0x91, 0x1b, 0xea, 0xfa, 0xcf, 0xd5, 0x3a, 0x6a, 0x96, 0xe7, 0x48, 0x9e, 0xe2, 0x19,
	0x52, 0xc5, 0x10, 0xfe, 0x31, 0x1a, 0x11, 0x72, 0x04, 0x97, 0x33, 0x1c, 0x92, 0xcc, 0x51, 0xf7,
	0x65, 0x59, 0xed, 0x14, 0xef, 0xcb, 0x42, 0xe8, 0xe0, 0x3f, 0x19, 0x68, 0x3a, 0xa3, 0x61, 0xf0,
	0x55, 0x65, 0xf1, 0xe6, 0xa8, 0x20, 0x73, 0xf5, 0xd8, 0x7a, 0x80, 0x72, 0x9b, 0xa3, 0x6c, 0xe2,
	0xb7, 0x8a, 0xb6, 0x1a, 0x8b, 0x75, 0xfd, 0xa7, 0x8a, 0x5e, 0xc2, 0x7f, 0x33, 0xd0, 0x74, 0x46,
	0xab, 0xa8, 0x80, 0x79, 0xc2, 0x48, 0x05, 0xcc, 0x15, 0x3d, 0x64, 0x8b, 0x03, 0xbe, 0x87, 0xdf,
	0xd1, 0x6e, 0xcf, 0xfc, 0x6c, 0x55, 0x77, 0x67, 0x45, 0x70, 0x1d, 0xe1, 0x3f, 0x18, 0x08, 0x67,
	0xd5, 0x09, 0x5e, 0xc9, 0x24, 0xb5, 0x46, 0x27, 0xa9, 0x27, 0x49, 0xbe, 0xca, 0x21, 0x37, 0x38,
	0xea, 0x06, 0x5e, 0xcf, 0x5b, 0xee, 0xb6, 0xeb, 0x36, 0x04, 0x5d, 0x00, 0x08, 0xff, 0x30, 0xd0,
	0xac, 0x56, 0x41, 0xe0, 0x75, 0x6d, 0x80, 0x74, 0xda, 0xc5, 0xdc, 0xd0, 0x54, 0xcd, 0x53, 0x24,
	0xe4, 0x3e, 0x87, 0xac, 0xe2, 0xbb, 0x85, 0xf1, 0x14, 0x59, 0x6f, 0x7b, 0x6d, 0x71, 0x7d, 0x9a,
	0xda, 0x32, 0xad, 0x43, 0x6e, 0x39, 0xc2, 0x7f, 0x34, 0xd0, 0x39, 0xe9, 0x16, 0x0f, 0x93, 0x4c,
	0xa4, 0x32, 0xd7, 0x9c, 0xe6, 0x72, 0x61, 0x1d, 0x60, 0xbc, 0xc3, 0x19, 0x6f, 0xe3, 0x6f, 0xe5,
	0x05, 0x32, 0x64, 0x2c, 0x96, 0x0a, 0xd6, 0xa1, 0x7a, 0xf3, 0x78, 0x84, 0xff, 0x6b, 0xa0, 0x72,
	0xf1, 0x05, 0x23, 0xbe, 0x59, 0xc0, 0x91, 0x77, 0x35, 0x6a, 0xde, 0x7a, 0xb9, 0x46, 0x30, 0x1a,
	0x9b, 0x8f, 0xe6, 0x47, 0xf8, 0xe3, 0x21, 0x46, 0xd3, 0xe8, 0xf2, 0x0b, 0x47, 0xa7, 0x65, 0xbb,
	0xd6, 0xa1, 0xf6, 0x1a, 0xf6, 0x48, 0x37, 0xe0, 0x4f, 0x51, 0xe9, 0x51, 0xbd, 0xae, 0x4a, 0x45,
	0xe9, 0xde, 0xda, 0x54, 0x24, 0x49, 0xea, 0xfa, 0x9a, 0x2c, 0x72, 0xc2, 0x79, 0x7c, 0x51, 0x47,
	0x18, 0x75, 0xfc, 0x14, 0xa1, 0xc1, 0x65, 0x28, 0x5e, 0x54, 0x7a, 0x52, 0x6f, 0x62, 0xcd, 0xa5,
	0xfc, 0x0a, 0xe0, 0xf1, 0x2a, 0xf7, 0xb8, 0x84, 0xcb, 0x3a, 0x8f, 0xe1, 0xc0, 0xd5, 0xaf, 0x0c,
	0x34, 0xa5, 0x7e, 0xd6, 0xc0, 0x57, 0x32, 0xeb, 0x56, 0xf7, 0x7d, 0xc5, 0x54, 0xb6, 0xa2, 0xbc,
	0xaf, 0x23, 0x64, 0x9d, 0xb3, 0x2c, 0xe3, 0xcb, 0x5a, 0x95, 0x2c, 0x7d, 0x03, 0xf9, 0x8b, 0x81,
	0x66, 0x74, 0xdf, 0x1d, 0xd4, 0xd5, 0x5a, 0xf0, 0x69, 0xc3, 0xbc, 0x36, 0x4c, 0x55, 0x40, 0xbb,
	0xc5, 0xd1, 0x2a, 0xf8, 0xfa, 0xb1, 0x68, 0x69, 0x51, 0x13, 0x09, 0x89, 0xd4, 0x47, 0xae, 0x3c,
	0x45, 0x23, 0x47, 0x4b, 0x11, 0x12, 0x9a, 0xaf, 0x83, 0xc5, 0x42, 0x22, 0xf5, 0x09, 0x4d, 0x12,
	0x12, 0xf2, 0x47, 0x3a, 0x8d, 0x90, 0xd0, 0xb0, 0xac, 0xe4, 0xb2, 0x0c, 0x2d, 0x24, 0x52, 0x38,
	0x5b, 0x0f, 0xbe, 0x7c, 0x5e, 0x36, 0xbe, 0x7a, 0x5e, 0x36, 0xfe, 0xfd, 0xbc, 0x6c, 0xfc, 0xe6,
	0x45, 0xf9, 0xd4, 0x57, 0x2f, 0xca, 0xa7, 0xfe, 0xf9, 0xa2, 0x7c, 0xea, 0x93, 0x4a, 0xc7, 0x09,
	0xbb, 0x07, 0xcd, 0x4a, 0xcb, 0x7f, 0x6c, 0xbd, 0xf5, 0x6c, 0x97, 0xba, 0xee, 0x43, 0x1a, 0x3e,
	0xf5, 0x83, 0x7d, 0xcb, 0xa6, 0x1d, 0x87, 0x59, 0xcf, 0x06, 0x39, 0xd9, 0xef, 0x51, 0xd6, 0x1c,
	0xe1, 0x9f, 0x5d, 0x6f, 0xfe, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x28, 0x23, 0xc0, 0x06, 0x1f,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Query if a voter has voted for a ballot
	HasVoted(ctx context.Context, in *QueryHasVotedRequest, opts ...grpc.CallOption) (*QueryHasVotedResponse, error)
	// Queries a list of VoterByIdentifier items.
	BallotByIdentifier(ctx context.Context, in *QueryBallotByIdentifierRequest, opts ...grpc.CallOption) (*QueryBallotByIdentifierResponse, error)
	// Queries a list of ObserversByChainAndType items.
	ObserverSet(ctx context.Context, in *QueryObserverSet, opts ...grpc.CallOption) (*QueryObserverSetResponse, error)
	// Queries a list of supported chains.
	SupportedChains(ctx context.Context, in *QuerySupportedChains, opts ...grpc.CallOption) (*QuerySupportedChainsResponse, error)
	// Queries a list of GetChainParamsForChain items.
	GetChainParamsForChain(ctx context.Context, in *QueryGetChainParamsForChainRequest, opts ...grpc.CallOption) (*QueryGetChainParamsForChainResponse, error)
	// Queries a list of GetChainParams items.
	GetChainParams(ctx context.Context, in *QueryGetChainParamsRequest, opts ...grpc.CallOption) (*QueryGetChainParamsResponse, error)
	// Queries a nodeAccount by index.
	NodeAccount(ctx context.Context, in *QueryGetNodeAccountRequest, opts ...grpc.CallOption) (*QueryNodeAccountResponse, error)
	// Queries a list of nodeAccount items.
	NodeAccountAll(ctx context.Context, in *QueryAllNodeAccountRequest, opts ...grpc.CallOption) (*QueryNodeAccountAllResponse, error)
	// Queries the crosschain flags.
	CrosschainFlags(ctx context.Context, in *QueryGetCrosschainFlagsRequest, opts ...grpc.CallOption) (*QueryCrosschainFlagsResponse, error)
	// Queries a keygen by index.
	Keygen(ctx context.Context, in *QueryGetKeygenRequest, opts ...grpc.CallOption) (*QueryKeygenResponse, error)
	// Queries a list of ShowObserverCount items.
	ShowObserverCount(ctx context.Context, in *QueryShowObserverCountRequest, opts ...grpc.CallOption) (*QueryShowObserverCountResponse, error)
	// Queries a list of VoterByIdentifier items.
	BlameByIdentifier(ctx context.Context, in *QueryBlameByIdentifierRequest, opts ...grpc.CallOption) (*QueryBlameByIdentifierResponse, error)
	// Queries a list of VoterByIdentifier items.
	GetAllBlameRecords(ctx context.Context, in *QueryAllBlameRecordsRequest, opts ...grpc.CallOption) (*QueryGetAllBlameRecordsResponse, error)
	// Queries a list of VoterByIdentifier items.
	BlamesByChainAndNonce(ctx context.Context, in *QueryBlameByChainAndNonceRequest, opts ...grpc.CallOption) (*QueryBlamesByChainAndNonceResponse, error)
	// Queries a list of GetTssAddress items.
	GetTssAddress(ctx context.Context, in *QueryGetTssAddressRequest, opts ...grpc.CallOption) (*QueryGetTssAddressResponse, error)
	// Queries the TSS address by finalized height.
	GetTssAddressByFinalizedHeight(ctx context.Context, in *QueryGetTssAddressByFinalizedHeightRequest, opts ...grpc.CallOption) (*QueryGetTssAddressByFinalizedHeightResponse, error)
	// Queries a tSS by index.
	TSS(ctx context.Context, in *QueryGetTSSRequest, opts ...grpc.CallOption) (*QueryTSSResponse, error)
	// Queries a list of TSS items.
	TssHistory(ctx context.Context, in *QueryTssHistoryRequest, opts ...grpc.CallOption) (*QueryTssHistoryResponse, error)
	// Queries a list of pending nonces items.
	PendingNoncesAll(ctx context.Context, in *QueryAllPendingNoncesRequest, opts ...grpc.CallOption) (*QueryPendingNoncesAllResponse, error)
	// Queries a list of pending nonces items by chain.
	PendingNoncesByChain(ctx context.Context, in *QueryPendingNoncesByChainRequest, opts ...grpc.CallOption) (*QueryPendingNoncesByChainResponse, error)
	// Queries a chainNonces by index.
	ChainNonces(ctx context.Context, in *QueryGetChainNoncesRequest, opts ...grpc.CallOption) (*QueryChainNoncesResponse, error)
	// Queries a list of chainNonces items.
	ChainNoncesAll(ctx context.Context, in *QueryAllChainNoncesRequest, opts ...grpc.CallOption) (*QueryChainNoncesAllResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HasVoted(ctx context.Context, in *QueryHasVotedRequest, opts ...grpc.CallOption) (*QueryHasVotedResponse, error) {
	out := new(QueryHasVotedResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/HasVoted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BallotByIdentifier(ctx context.Context, in *QueryBallotByIdentifierRequest, opts ...grpc.CallOption) (*QueryBallotByIdentifierResponse, error) {
	out := new(QueryBallotByIdentifierResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/BallotByIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ObserverSet(ctx context.Context, in *QueryObserverSet, opts ...grpc.CallOption) (*QueryObserverSetResponse, error) {
	out := new(QueryObserverSetResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/ObserverSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SupportedChains(ctx context.Context, in *QuerySupportedChains, opts ...grpc.CallOption) (*QuerySupportedChainsResponse, error) {
	out := new(QuerySupportedChainsResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/SupportedChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetChainParamsForChain(ctx context.Context, in *QueryGetChainParamsForChainRequest, opts ...grpc.CallOption) (*QueryGetChainParamsForChainResponse, error) {
	out := new(QueryGetChainParamsForChainResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/GetChainParamsForChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetChainParams(ctx context.Context, in *QueryGetChainParamsRequest, opts ...grpc.CallOption) (*QueryGetChainParamsResponse, error) {
	out := new(QueryGetChainParamsResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/GetChainParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeAccount(ctx context.Context, in *QueryGetNodeAccountRequest, opts ...grpc.CallOption) (*QueryNodeAccountResponse, error) {
	out := new(QueryNodeAccountResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/NodeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeAccountAll(ctx context.Context, in *QueryAllNodeAccountRequest, opts ...grpc.CallOption) (*QueryNodeAccountAllResponse, error) {
	out := new(QueryNodeAccountAllResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/NodeAccountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainFlags(ctx context.Context, in *QueryGetCrosschainFlagsRequest, opts ...grpc.CallOption) (*QueryCrosschainFlagsResponse, error) {
	out := new(QueryCrosschainFlagsResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/CrosschainFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Keygen(ctx context.Context, in *QueryGetKeygenRequest, opts ...grpc.CallOption) (*QueryKeygenResponse, error) {
	out := new(QueryKeygenResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/Keygen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowObserverCount(ctx context.Context, in *QueryShowObserverCountRequest, opts ...grpc.CallOption) (*QueryShowObserverCountResponse, error) {
	out := new(QueryShowObserverCountResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/ShowObserverCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlameByIdentifier(ctx context.Context, in *QueryBlameByIdentifierRequest, opts ...grpc.CallOption) (*QueryBlameByIdentifierResponse, error) {
	out := new(QueryBlameByIdentifierResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/BlameByIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllBlameRecords(ctx context.Context, in *QueryAllBlameRecordsRequest, opts ...grpc.CallOption) (*QueryGetAllBlameRecordsResponse, error) {
	out := new(QueryGetAllBlameRecordsResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/GetAllBlameRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlamesByChainAndNonce(ctx context.Context, in *QueryBlameByChainAndNonceRequest, opts ...grpc.CallOption) (*QueryBlamesByChainAndNonceResponse, error) {
	out := new(QueryBlamesByChainAndNonceResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/BlamesByChainAndNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTssAddress(ctx context.Context, in *QueryGetTssAddressRequest, opts ...grpc.CallOption) (*QueryGetTssAddressResponse, error) {
	out := new(QueryGetTssAddressResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/GetTssAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTssAddressByFinalizedHeight(ctx context.Context, in *QueryGetTssAddressByFinalizedHeightRequest, opts ...grpc.CallOption) (*QueryGetTssAddressByFinalizedHeightResponse, error) {
	out := new(QueryGetTssAddressByFinalizedHeightResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/GetTssAddressByFinalizedHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TSS(ctx context.Context, in *QueryGetTSSRequest, opts ...grpc.CallOption) (*QueryTSSResponse, error) {
	out := new(QueryTSSResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/TSS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TssHistory(ctx context.Context, in *QueryTssHistoryRequest, opts ...grpc.CallOption) (*QueryTssHistoryResponse, error) {
	out := new(QueryTssHistoryResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/TssHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingNoncesAll(ctx context.Context, in *QueryAllPendingNoncesRequest, opts ...grpc.CallOption) (*QueryPendingNoncesAllResponse, error) {
	out := new(QueryPendingNoncesAllResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/PendingNoncesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingNoncesByChain(ctx context.Context, in *QueryPendingNoncesByChainRequest, opts ...grpc.CallOption) (*QueryPendingNoncesByChainResponse, error) {
	out := new(QueryPendingNoncesByChainResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/PendingNoncesByChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainNonces(ctx context.Context, in *QueryGetChainNoncesRequest, opts ...grpc.CallOption) (*QueryChainNoncesResponse, error) {
	out := new(QueryChainNoncesResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/ChainNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainNoncesAll(ctx context.Context, in *QueryAllChainNoncesRequest, opts ...grpc.CallOption) (*QueryChainNoncesAllResponse, error) {
	out := new(QueryChainNoncesAllResponse)
	err := c.cc.Invoke(ctx, "/relayer.Query/ChainNoncesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Query if a voter has voted for a ballot
	HasVoted(context.Context, *QueryHasVotedRequest) (*QueryHasVotedResponse, error)
	// Queries a list of VoterByIdentifier items.
	BallotByIdentifier(context.Context, *QueryBallotByIdentifierRequest) (*QueryBallotByIdentifierResponse, error)
	// Queries a list of ObserversByChainAndType items.
	ObserverSet(context.Context, *QueryObserverSet) (*QueryObserverSetResponse, error)
	// Queries a list of supported chains.
	SupportedChains(context.Context, *QuerySupportedChains) (*QuerySupportedChainsResponse, error)
	// Queries a list of GetChainParamsForChain items.
	GetChainParamsForChain(context.Context, *QueryGetChainParamsForChainRequest) (*QueryGetChainParamsForChainResponse, error)
	// Queries a list of GetChainParams items.
	GetChainParams(context.Context, *QueryGetChainParamsRequest) (*QueryGetChainParamsResponse, error)
	// Queries a nodeAccount by index.
	NodeAccount(context.Context, *QueryGetNodeAccountRequest) (*QueryNodeAccountResponse, error)
	// Queries a list of nodeAccount items.
	NodeAccountAll(context.Context, *QueryAllNodeAccountRequest) (*QueryNodeAccountAllResponse, error)
	// Queries the crosschain flags.
	CrosschainFlags(context.Context, *QueryGetCrosschainFlagsRequest) (*QueryCrosschainFlagsResponse, error)
	// Queries a keygen by index.
	Keygen(context.Context, *QueryGetKeygenRequest) (*QueryKeygenResponse, error)
	// Queries a list of ShowObserverCount items.
	ShowObserverCount(context.Context, *QueryShowObserverCountRequest) (*QueryShowObserverCountResponse, error)
	// Queries a list of VoterByIdentifier items.
	BlameByIdentifier(context.Context, *QueryBlameByIdentifierRequest) (*QueryBlameByIdentifierResponse, error)
	// Queries a list of VoterByIdentifier items.
	GetAllBlameRecords(context.Context, *QueryAllBlameRecordsRequest) (*QueryGetAllBlameRecordsResponse, error)
	// Queries a list of VoterByIdentifier items.
	BlamesByChainAndNonce(context.Context, *QueryBlameByChainAndNonceRequest) (*QueryBlamesByChainAndNonceResponse, error)
	// Queries a list of GetTssAddress items.
	GetTssAddress(context.Context, *QueryGetTssAddressRequest) (*QueryGetTssAddressResponse, error)
	// Queries the TSS address by finalized height.
	GetTssAddressByFinalizedHeight(context.Context, *QueryGetTssAddressByFinalizedHeightRequest) (*QueryGetTssAddressByFinalizedHeightResponse, error)
	// Queries a tSS by index.
	TSS(context.Context, *QueryGetTSSRequest) (*QueryTSSResponse, error)
	// Queries a list of TSS items.
	TssHistory(context.Context, *QueryTssHistoryRequest) (*QueryTssHistoryResponse, error)
	// Queries a list of pending nonces items.
	PendingNoncesAll(context.Context, *QueryAllPendingNoncesRequest) (*QueryPendingNoncesAllResponse, error)
	// Queries a list of pending nonces items by chain.
	PendingNoncesByChain(context.Context, *QueryPendingNoncesByChainRequest) (*QueryPendingNoncesByChainResponse, error)
	// Queries a chainNonces by index.
	ChainNonces(context.Context, *QueryGetChainNoncesRequest) (*QueryChainNoncesResponse, error)
	// Queries a list of chainNonces items.
	ChainNoncesAll(context.Context, *QueryAllChainNoncesRequest) (*QueryChainNoncesAllResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) HasVoted(ctx context.Context, req *QueryHasVotedRequest) (*QueryHasVotedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasVoted not implemented")
}
func (*UnimplementedQueryServer) BallotByIdentifier(ctx context.Context, req *QueryBallotByIdentifierRequest) (*QueryBallotByIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BallotByIdentifier not implemented")
}
func (*UnimplementedQueryServer) ObserverSet(ctx context.Context, req *QueryObserverSet) (*QueryObserverSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObserverSet not implemented")
}
func (*UnimplementedQueryServer) SupportedChains(ctx context.Context, req *QuerySupportedChains) (*QuerySupportedChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupportedChains not implemented")
}
func (*UnimplementedQueryServer) GetChainParamsForChain(ctx context.Context, req *QueryGetChainParamsForChainRequest) (*QueryGetChainParamsForChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainParamsForChain not implemented")
}
func (*UnimplementedQueryServer) GetChainParams(ctx context.Context, req *QueryGetChainParamsRequest) (*QueryGetChainParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainParams not implemented")
}
func (*UnimplementedQueryServer) NodeAccount(ctx context.Context, req *QueryGetNodeAccountRequest) (*QueryNodeAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeAccount not implemented")
}
func (*UnimplementedQueryServer) NodeAccountAll(ctx context.Context, req *QueryAllNodeAccountRequest) (*QueryNodeAccountAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeAccountAll not implemented")
}
func (*UnimplementedQueryServer) CrosschainFlags(ctx context.Context, req *QueryGetCrosschainFlagsRequest) (*QueryCrosschainFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainFlags not implemented")
}
func (*UnimplementedQueryServer) Keygen(ctx context.Context, req *QueryGetKeygenRequest) (*QueryKeygenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keygen not implemented")
}
func (*UnimplementedQueryServer) ShowObserverCount(ctx context.Context, req *QueryShowObserverCountRequest) (*QueryShowObserverCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowObserverCount not implemented")
}
func (*UnimplementedQueryServer) BlameByIdentifier(ctx context.Context, req *QueryBlameByIdentifierRequest) (*QueryBlameByIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlameByIdentifier not implemented")
}
func (*UnimplementedQueryServer) GetAllBlameRecords(ctx context.Context, req *QueryAllBlameRecordsRequest) (*QueryGetAllBlameRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBlameRecords not implemented")
}
func (*UnimplementedQueryServer) BlamesByChainAndNonce(ctx context.Context, req *QueryBlameByChainAndNonceRequest) (*QueryBlamesByChainAndNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlamesByChainAndNonce not implemented")
}
func (*UnimplementedQueryServer) GetTssAddress(ctx context.Context, req *QueryGetTssAddressRequest) (*QueryGetTssAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTssAddress not implemented")
}
func (*UnimplementedQueryServer) GetTssAddressByFinalizedHeight(ctx context.Context, req *QueryGetTssAddressByFinalizedHeightRequest) (*QueryGetTssAddressByFinalizedHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTssAddressByFinalizedHeight not implemented")
}
func (*UnimplementedQueryServer) TSS(ctx context.Context, req *QueryGetTSSRequest) (*QueryTSSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TSS not implemented")
}
func (*UnimplementedQueryServer) TssHistory(ctx context.Context, req *QueryTssHistoryRequest) (*QueryTssHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TssHistory not implemented")
}
func (*UnimplementedQueryServer) PendingNoncesAll(ctx context.Context, req *QueryAllPendingNoncesRequest) (*QueryPendingNoncesAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingNoncesAll not implemented")
}
func (*UnimplementedQueryServer) PendingNoncesByChain(ctx context.Context, req *QueryPendingNoncesByChainRequest) (*QueryPendingNoncesByChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingNoncesByChain not implemented")
}
func (*UnimplementedQueryServer) ChainNonces(ctx context.Context, req *QueryGetChainNoncesRequest) (*QueryChainNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainNonces not implemented")
}
func (*UnimplementedQueryServer) ChainNoncesAll(ctx context.Context, req *QueryAllChainNoncesRequest) (*QueryChainNoncesAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainNoncesAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HasVoted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHasVotedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HasVoted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/HasVoted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HasVoted(ctx, req.(*QueryHasVotedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BallotByIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBallotByIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BallotByIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/BallotByIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BallotByIdentifier(ctx, req.(*QueryBallotByIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ObserverSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryObserverSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ObserverSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/ObserverSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ObserverSet(ctx, req.(*QueryObserverSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SupportedChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySupportedChains)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SupportedChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/SupportedChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SupportedChains(ctx, req.(*QuerySupportedChains))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetChainParamsForChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChainParamsForChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetChainParamsForChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/GetChainParamsForChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetChainParamsForChain(ctx, req.(*QueryGetChainParamsForChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetChainParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChainParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetChainParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/GetChainParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetChainParams(ctx, req.(*QueryGetChainParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNodeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/NodeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeAccount(ctx, req.(*QueryGetNodeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeAccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNodeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeAccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/NodeAccountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeAccountAll(ctx, req.(*QueryAllNodeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCrosschainFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/CrosschainFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainFlags(ctx, req.(*QueryGetCrosschainFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Keygen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetKeygenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Keygen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/Keygen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Keygen(ctx, req.(*QueryGetKeygenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowObserverCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowObserverCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowObserverCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/ShowObserverCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowObserverCount(ctx, req.(*QueryShowObserverCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlameByIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlameByIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlameByIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/BlameByIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlameByIdentifier(ctx, req.(*QueryBlameByIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllBlameRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBlameRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllBlameRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/GetAllBlameRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllBlameRecords(ctx, req.(*QueryAllBlameRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlamesByChainAndNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlameByChainAndNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlamesByChainAndNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/BlamesByChainAndNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlamesByChainAndNonce(ctx, req.(*QueryBlameByChainAndNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTssAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTssAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTssAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/GetTssAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTssAddress(ctx, req.(*QueryGetTssAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTssAddressByFinalizedHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTssAddressByFinalizedHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTssAddressByFinalizedHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/GetTssAddressByFinalizedHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTssAddressByFinalizedHeight(ctx, req.(*QueryGetTssAddressByFinalizedHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TSS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTSSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TSS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/TSS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TSS(ctx, req.(*QueryGetTSSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TssHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTssHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TssHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/TssHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TssHistory(ctx, req.(*QueryTssHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingNoncesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPendingNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingNoncesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/PendingNoncesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingNoncesAll(ctx, req.(*QueryAllPendingNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingNoncesByChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingNoncesByChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingNoncesByChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/PendingNoncesByChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingNoncesByChain(ctx, req.(*QueryPendingNoncesByChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChainNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/ChainNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainNonces(ctx, req.(*QueryGetChainNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainNoncesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllChainNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainNoncesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Query/ChainNoncesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainNoncesAll(ctx, req.(*QueryAllChainNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relayer.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "HasVoted",
			Handler:    _Query_HasVoted_Handler,
		},
		{
			MethodName: "BallotByIdentifier",
			Handler:    _Query_BallotByIdentifier_Handler,
		},
		{
			MethodName: "ObserverSet",
			Handler:    _Query_ObserverSet_Handler,
		},
		{
			MethodName: "SupportedChains",
			Handler:    _Query_SupportedChains_Handler,
		},
		{
			MethodName: "GetChainParamsForChain",
			Handler:    _Query_GetChainParamsForChain_Handler,
		},
		{
			MethodName: "GetChainParams",
			Handler:    _Query_GetChainParams_Handler,
		},
		{
			MethodName: "NodeAccount",
			Handler:    _Query_NodeAccount_Handler,
		},
		{
			MethodName: "NodeAccountAll",
			Handler:    _Query_NodeAccountAll_Handler,
		},
		{
			MethodName: "CrosschainFlags",
			Handler:    _Query_CrosschainFlags_Handler,
		},
		{
			MethodName: "Keygen",
			Handler:    _Query_Keygen_Handler,
		},
		{
			MethodName: "ShowObserverCount",
			Handler:    _Query_ShowObserverCount_Handler,
		},
		{
			MethodName: "BlameByIdentifier",
			Handler:    _Query_BlameByIdentifier_Handler,
		},
		{
			MethodName: "GetAllBlameRecords",
			Handler:    _Query_GetAllBlameRecords_Handler,
		},
		{
			MethodName: "BlamesByChainAndNonce",
			Handler:    _Query_BlamesByChainAndNonce_Handler,
		},
		{
			MethodName: "GetTssAddress",
			Handler:    _Query_GetTssAddress_Handler,
		},
		{
			MethodName: "GetTssAddressByFinalizedHeight",
			Handler:    _Query_GetTssAddressByFinalizedHeight_Handler,
		},
		{
			MethodName: "TSS",
			Handler:    _Query_TSS_Handler,
		},
		{
			MethodName: "TssHistory",
			Handler:    _Query_TssHistory_Handler,
		},
		{
			MethodName: "PendingNoncesAll",
			Handler:    _Query_PendingNoncesAll_Handler,
		},
		{
			MethodName: "PendingNoncesByChain",
			Handler:    _Query_PendingNoncesByChain_Handler,
		},
		{
			MethodName: "ChainNonces",
			Handler:    _Query_ChainNonces_Handler,
		},
		{
			MethodName: "ChainNoncesAll",
			Handler:    _Query_ChainNoncesAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relayer/query.proto",
}

func (m *QueryGetChainNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ChainNonces.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllChainNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChainNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChainNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainNoncesAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainNoncesAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainNoncesAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainNonces) > 0 {
		for iNdEx := len(m.ChainNonces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainNonces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingNoncesAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingNoncesAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingNoncesAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PendingNonces) > 0 {
		for iNdEx := len(m.PendingNonces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingNonces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingNoncesByChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingNoncesByChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingNoncesByChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingNoncesByChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingNoncesByChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingNoncesByChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PendingNonces.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTSSRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTSSRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTSSRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTSSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTSSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTSSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Tss.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTssAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTssAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTssAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BitcoinChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BitcoinChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTssAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTssAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTssAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Eth) > 0 {
		i -= len(m.Eth)
		copy(dAtA[i:], m.Eth)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Eth)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTssAddressByFinalizedHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTssAddressByFinalizedHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTssAddressByFinalizedHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BitcoinChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BitcoinChainId))
		i--
		dAtA[i] = 0x10
	}
	if m.FinalizedPellHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FinalizedPellHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTssAddressByFinalizedHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTssAddressByFinalizedHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTssAddressByFinalizedHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Eth) > 0 {
		i -= len(m.Eth)
		copy(dAtA[i:], m.Eth)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Eth)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTssHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTssHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTssHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTssHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTssHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTssHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TssList) > 0 {
		for iNdEx := len(m.TssList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TssList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryHasVotedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHasVotedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHasVotedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoterAddress) > 0 {
		i -= len(m.VoterAddress)
		copy(dAtA[i:], m.VoterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VoterAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BallotIdentifier) > 0 {
		i -= len(m.BallotIdentifier)
		copy(dAtA[i:], m.BallotIdentifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BallotIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHasVotedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHasVotedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHasVotedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HasVoted {
		i--
		if m.HasVoted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBallotByIdentifierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBallotByIdentifierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBallotByIdentifierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BallotIdentifier) > 0 {
		i -= len(m.BallotIdentifier)
		copy(dAtA[i:], m.BallotIdentifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BallotIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBallotByIdentifierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBallotByIdentifierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBallotByIdentifierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BallotStatus != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BallotStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.ObservationType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ObservationType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Voters) > 0 {
		for iNdEx := len(m.Voters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Voters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BallotIdentifier) > 0 {
		i -= len(m.BallotIdentifier)
		copy(dAtA[i:], m.BallotIdentifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BallotIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VoterList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoterList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoterList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VoteType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VoteType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.VoterAddress) > 0 {
		i -= len(m.VoterAddress)
		copy(dAtA[i:], m.VoterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VoterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryObserverSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryObserverSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryObserverSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryObserverSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryObserverSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryObserverSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Observers) > 0 {
		for iNdEx := len(m.Observers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Observers[iNdEx])
			copy(dAtA[i:], m.Observers[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Observers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySupportedChains) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySupportedChains) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySupportedChains) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySupportedChainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySupportedChainsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySupportedChainsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Chains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainParamsForChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainParamsForChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainParamsForChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainParamsForChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainParamsForChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainParamsForChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainParams != nil {
		{
			size, err := m.ChainParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainParams != nil {
		{
			size, err := m.ChainParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNodeAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNodeAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNodeAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNodeAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNodeAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNodeAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeAccount != nil {
		{
			size, err := m.NodeAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNodeAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNodeAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNodeAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNodeAccountAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNodeAccountAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNodeAccountAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeAccount) > 0 {
		for iNdEx := len(m.NodeAccount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeAccount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainFlagsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainFlagsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainFlagsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCrosschainFlagsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCrosschainFlagsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCrosschainFlagsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CrosschainFlags.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetKeygenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKeygenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKeygenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryKeygenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeygenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeygenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Keygen != nil {
		{
			size, err := m.Keygen.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowObserverCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowObserverCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowObserverCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryShowObserverCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowObserverCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowObserverCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastObserverCount != nil {
		{
			size, err := m.LastObserverCount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlameByIdentifierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlameByIdentifierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlameByIdentifierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlameIdentifier) > 0 {
		i -= len(m.BlameIdentifier)
		copy(dAtA[i:], m.BlameIdentifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlameIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlameByIdentifierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlameByIdentifierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlameByIdentifierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlameInfo != nil {
		{
			size, err := m.BlameInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBlameRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlameRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlameRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllBlameRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllBlameRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllBlameRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlameInfo) > 0 {
		for iNdEx := len(m.BlameInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlameInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlameByChainAndNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlameByChainAndNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlameByChainAndNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlamesByChainAndNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlamesByChainAndNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlamesByChainAndNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlameInfo) > 0 {
		for iNdEx := len(m.BlameInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlameInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetChainNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChainNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ChainNonces.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllChainNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChainNoncesAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainNonces) > 0 {
		for _, e := range m.ChainNonces {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPendingNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingNoncesAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingNonces) > 0 {
		for _, e := range m.PendingNonces {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingNoncesByChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryPendingNoncesByChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PendingNonces.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTSSRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTSSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tss.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTssAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BitcoinChainId != 0 {
		n += 1 + sovQuery(uint64(m.BitcoinChainId))
	}
	return n
}

func (m *QueryGetTssAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Eth)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTssAddressByFinalizedHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FinalizedPellHeight != 0 {
		n += 1 + sovQuery(uint64(m.FinalizedPellHeight))
	}
	if m.BitcoinChainId != 0 {
		n += 1 + sovQuery(uint64(m.BitcoinChainId))
	}
	return n
}

func (m *QueryGetTssAddressByFinalizedHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Eth)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTssHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTssHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TssList) > 0 {
		for _, e := range m.TssList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryHasVotedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BallotIdentifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VoterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHasVotedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HasVoted {
		n += 2
	}
	return n
}

func (m *QueryBallotByIdentifierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BallotIdentifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBallotByIdentifierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BallotIdentifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Voters) > 0 {
		for _, e := range m.Voters {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.ObservationType != 0 {
		n += 1 + sovQuery(uint64(m.ObservationType))
	}
	if m.BallotStatus != 0 {
		n += 1 + sovQuery(uint64(m.BallotStatus))
	}
	return n
}

func (m *VoterList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VoterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.VoteType != 0 {
		n += 1 + sovQuery(uint64(m.VoteType))
	}
	return n
}

func (m *QueryObserverSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryObserverSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Observers) > 0 {
		for _, s := range m.Observers {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySupportedChains) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySupportedChainsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Chains) > 0 {
		for _, e := range m.Chains {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetChainParamsForChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryGetChainParamsForChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainParams != nil {
		l = m.ChainParams.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChainParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryGetChainParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainParams != nil {
		l = m.ChainParams.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNodeAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNodeAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeAccount != nil {
		l = m.NodeAccount.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNodeAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNodeAccountAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeAccount) > 0 {
		for _, e := range m.NodeAccount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrosschainFlagsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCrosschainFlagsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CrosschainFlags.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetKeygenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryKeygenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Keygen != nil {
		l = m.Keygen.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShowObserverCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryShowObserverCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastObserverCount != nil {
		l = m.LastObserverCount.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlameByIdentifierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlameIdentifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlameByIdentifierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlameInfo != nil {
		l = m.BlameInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBlameRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllBlameRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlameInfo) > 0 {
		for _, e := range m.BlameInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlameByChainAndNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryBlamesByChainAndNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlameInfo) > 0 {
		for _, e := range m.BlameInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetChainNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainNonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChainNonces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChainNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChainNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChainNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainNoncesAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainNoncesAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainNoncesAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainNonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainNonces = append(m.ChainNonces, ChainNonces{})
			if err := m.ChainNonces[len(m.ChainNonces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingNoncesAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingNoncesAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingNoncesAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingNonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingNonces = append(m.PendingNonces, PendingNonces{})
			if err := m.PendingNonces[len(m.PendingNonces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingNoncesByChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingNoncesByChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingNoncesByChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingNoncesByChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingNoncesByChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingNoncesByChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingNonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingNonces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTSSRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTSSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTSSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTSSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTSSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTSSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTssAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTssAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTssAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitcoinChainId", wireType)
			}
			m.BitcoinChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitcoinChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTssAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTssAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTssAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Eth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTssAddressByFinalizedHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTssAddressByFinalizedHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTssAddressByFinalizedHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedPellHeight", wireType)
			}
			m.FinalizedPellHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalizedPellHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitcoinChainId", wireType)
			}
			m.BitcoinChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitcoinChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTssAddressByFinalizedHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTssAddressByFinalizedHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTssAddressByFinalizedHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Eth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTssHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTssHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTssHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTssHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTssHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTssHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TssList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TssList = append(m.TssList, TSS{})
			if err := m.TssList[len(m.TssList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHasVotedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHasVotedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHasVotedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BallotIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHasVotedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHasVotedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHasVotedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasVoted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasVoted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBallotByIdentifierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBallotByIdentifierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBallotByIdentifierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BallotIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBallotByIdentifierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBallotByIdentifierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBallotByIdentifierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BallotIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voters = append(m.Voters, &VoterList{})
			if err := m.Voters[len(m.Voters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservationType", wireType)
			}
			m.ObservationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservationType |= ObservationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotStatus", wireType)
			}
			m.BallotStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BallotStatus |= BallotStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoterList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoterList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoterList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteType", wireType)
			}
			m.VoteType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteType |= VoteType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryObserverSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryObserverSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryObserverSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryObserverSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryObserverSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryObserverSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Observers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Observers = append(m.Observers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySupportedChains) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySupportedChains: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySupportedChains: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySupportedChainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySupportedChainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySupportedChainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, &chains.Chain{})
			if err := m.Chains[len(m.Chains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainParamsForChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainParamsForChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainParamsForChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainParamsForChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainParamsForChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainParamsForChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainParams == nil {
				m.ChainParams = &ChainParams{}
			}
			if err := m.ChainParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainParams == nil {
				m.ChainParams = &ChainParamsList{}
			}
			if err := m.ChainParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNodeAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNodeAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNodeAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNodeAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNodeAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNodeAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeAccount == nil {
				m.NodeAccount = &NodeAccount{}
			}
			if err := m.NodeAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNodeAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNodeAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNodeAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNodeAccountAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNodeAccountAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNodeAccountAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAccount = append(m.NodeAccount, &NodeAccount{})
			if err := m.NodeAccount[len(m.NodeAccount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainFlagsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainFlagsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainFlagsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCrosschainFlagsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCrosschainFlagsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCrosschainFlagsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainFlags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CrosschainFlags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKeygenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKeygenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKeygenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeygenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeygenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeygenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keygen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keygen == nil {
				m.Keygen = &Keygen{}
			}
			if err := m.Keygen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowObserverCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowObserverCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowObserverCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowObserverCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowObserverCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowObserverCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObserverCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastObserverCount == nil {
				m.LastObserverCount = &LastRelayerCount{}
			}
			if err := m.LastObserverCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlameByIdentifierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlameByIdentifierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlameByIdentifierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlameIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlameIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlameByIdentifierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlameByIdentifierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlameByIdentifierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlameInfo == nil {
				m.BlameInfo = &Blame{}
			}
			if err := m.BlameInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlameRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlameRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlameRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllBlameRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllBlameRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllBlameRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlameInfo = append(m.BlameInfo, Blame{})
			if err := m.BlameInfo[len(m.BlameInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlameByChainAndNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlameByChainAndNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlameByChainAndNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlamesByChainAndNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlamesByChainAndNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlamesByChainAndNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlameInfo = append(m.BlameInfo, &Blame{})
			if err := m.BlameInfo[len(m.BlameInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
