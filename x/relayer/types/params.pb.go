// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: relayer/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	chains "github.com/pell-chain/pellcore/pkg/chains"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Deprecated(v14):Moved into the authority module
type PolicyType int32

const (
	// group1 policy type
	PolicyType_GROUP1 PolicyType = 0
	// group2 policy type
	PolicyType_GROUP2 PolicyType = 1
)

var PolicyType_name = map[int32]string{
	0: "GROUP1",
	1: "GROUP2",
}

var PolicyType_value = map[string]int32{
	"GROUP1": 0,
	"GROUP2": 1,
}

func (x PolicyType) String() string {
	return proto.EnumName(PolicyType_name, int32(x))
}

func (PolicyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ccba6a72763fc2ad, []int{0}
}

// ChainParamsList represents the list of chain parameters
type ChainParamsList struct {
	ChainParams []*ChainParams `protobuf:"bytes,1,rep,name=chain_params,json=chainParams,proto3" json:"chain_params,omitempty"`
}

func (m *ChainParamsList) Reset()         { *m = ChainParamsList{} }
func (m *ChainParamsList) String() string { return proto.CompactTextString(m) }
func (*ChainParamsList) ProtoMessage()    {}
func (*ChainParamsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccba6a72763fc2ad, []int{0}
}
func (m *ChainParamsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainParamsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainParamsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainParamsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainParamsList.Merge(m, src)
}
func (m *ChainParamsList) XXX_Size() int {
	return m.Size()
}
func (m *ChainParamsList) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainParamsList.DiscardUnknown(m)
}

var xxx_messageInfo_ChainParamsList proto.InternalMessageInfo

func (m *ChainParamsList) GetChainParams() []*ChainParams {
	if m != nil {
		return m.ChainParams
	}
	return nil
}

// ChainParams represents the parameters of a chain
type ChainParams struct {
	ChainId                                  int64                       `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ConfirmationCount                        uint64                      `protobuf:"varint,2,opt,name=confirmation_count,json=confirmationCount,proto3" json:"confirmation_count,omitempty"`
	GasPriceTicker                           uint64                      `protobuf:"varint,3,opt,name=gas_price_ticker,json=gasPriceTicker,proto3" json:"gas_price_ticker,omitempty"`
	InTxTicker                               uint64                      `protobuf:"varint,4,opt,name=in_tx_ticker,json=inTxTicker,proto3" json:"in_tx_ticker,omitempty"`
	OutTxTicker                              uint64                      `protobuf:"varint,5,opt,name=out_tx_ticker,json=outTxTicker,proto3" json:"out_tx_ticker,omitempty"`
	OutboundTxScheduleInterval               int64                       `protobuf:"varint,6,opt,name=outbound_tx_schedule_interval,json=outboundTxScheduleInterval,proto3" json:"outbound_tx_schedule_interval,omitempty"`
	OutboundTxScheduleLookahead              int64                       `protobuf:"varint,7,opt,name=outbound_tx_schedule_lookahead,json=outboundTxScheduleLookahead,proto3" json:"outbound_tx_schedule_lookahead,omitempty"`
	BallotThreshold                          cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=ballot_threshold,json=ballotThreshold,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"ballot_threshold"`
	MinObserverDelegation                    cosmossdk_io_math.LegacyDec `protobuf:"bytes,9,opt,name=min_observer_delegation,json=minObserverDelegation,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_observer_delegation"`
	IsSupported                              bool                        `protobuf:"varint,10,opt,name=is_supported,json=isSupported,proto3" json:"is_supported,omitempty"`
	StrategyManagerContractAddress           string                      `protobuf:"bytes,11,opt,name=strategy_manager_contract_address,json=strategyManagerContractAddress,proto3" json:"strategy_manager_contract_address,omitempty"`
	DelegationManagerContractAddress         string                      `protobuf:"bytes,12,opt,name=delegation_manager_contract_address,json=delegationManagerContractAddress,proto3" json:"delegation_manager_contract_address,omitempty"`
	OmniOperatorSharesManagerContractAddress string                      `protobuf:"bytes,13,opt,name=omni_operator_shares_manager_contract_address,json=omniOperatorSharesManagerContractAddress,proto3" json:"omni_operator_shares_manager_contract_address,omitempty"`
	ConnectorContractAddress                 string                      `protobuf:"bytes,14,opt,name=connector_contract_address,json=connectorContractAddress,proto3" json:"connector_contract_address,omitempty"`
	StartBlockHeight                         uint64                      `protobuf:"varint,15,opt,name=start_block_height,json=startBlockHeight,proto3" json:"start_block_height,omitempty"`
	GasLimit                                 uint64                      `protobuf:"varint,16,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	WatchPellTokenTicker                     uint64                      `protobuf:"varint,17,opt,name=watch_pell_token_ticker,json=watchPellTokenTicker,proto3" json:"watch_pell_token_ticker,omitempty"`
	WatchGasTokenTicker                      uint64                      `protobuf:"varint,18,opt,name=watch_gas_token_ticker,json=watchGasTokenTicker,proto3" json:"watch_gas_token_ticker,omitempty"`
	PellTokenRechargeThreshold               cosmossdk_io_math.Int       `protobuf:"bytes,19,opt,name=pell_token_recharge_threshold,json=pellTokenRechargeThreshold,proto3,customtype=cosmossdk.io/math.Int" json:"pell_token_recharge_threshold"`
	GasTokenRechargeThreshold                cosmossdk_io_math.Int       `protobuf:"bytes,20,opt,name=gas_token_recharge_threshold,json=gasTokenRechargeThreshold,proto3,customtype=cosmossdk.io/math.Int" json:"gas_token_recharge_threshold"`
	PellTokenRechargeAmount                  cosmossdk_io_math.Int       `protobuf:"bytes,21,opt,name=pell_token_recharge_amount,json=pellTokenRechargeAmount,proto3,customtype=cosmossdk.io/math.Int" json:"pell_token_recharge_amount"`
	GasTokenRechargeAmount                   cosmossdk_io_math.Int       `protobuf:"bytes,22,opt,name=gas_token_recharge_amount,json=gasTokenRechargeAmount,proto3,customtype=cosmossdk.io/math.Int" json:"gas_token_recharge_amount"`
	GatewayEvmContractAddress                string                      `protobuf:"bytes,23,opt,name=gateway_evm_contract_address,json=gatewayEvmContractAddress,proto3" json:"gateway_evm_contract_address,omitempty"`
	PellTokenContractAddress                 string                      `protobuf:"bytes,24,opt,name=pell_token_contract_address,json=pellTokenContractAddress,proto3" json:"pell_token_contract_address,omitempty"`
	GasSwapContractAddress                   string                      `protobuf:"bytes,25,opt,name=gas_swap_contract_address,json=gasSwapContractAddress,proto3" json:"gas_swap_contract_address,omitempty"`
	PellTokenPostInterval                    uint64                      `protobuf:"varint,26,opt,name=pell_token_post_interval,json=pellTokenPostInterval,proto3" json:"pell_token_post_interval,omitempty"`
	GasTokenPostInterval                     uint64                      `protobuf:"varint,27,opt,name=gas_token_post_interval,json=gasTokenPostInterval,proto3" json:"gas_token_post_interval,omitempty"`
	PellTokenRechargeEnabled                 bool                        `protobuf:"varint,28,opt,name=pell_token_recharge_enabled,json=pellTokenRechargeEnabled,proto3" json:"pell_token_recharge_enabled,omitempty"`
	GasTokenRechargeEnabled                  bool                        `protobuf:"varint,29,opt,name=gas_token_recharge_enabled,json=gasTokenRechargeEnabled,proto3" json:"gas_token_recharge_enabled,omitempty"`
	ChainRegistryInteractorContractAddress   string                      `protobuf:"bytes,30,opt,name=chain_registry_interactor_contract_address,json=chainRegistryInteractorContractAddress,proto3" json:"chain_registry_interactor_contract_address,omitempty"`
}

func (m *ChainParams) Reset()         { *m = ChainParams{} }
func (m *ChainParams) String() string { return proto.CompactTextString(m) }
func (*ChainParams) ProtoMessage()    {}
func (*ChainParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccba6a72763fc2ad, []int{1}
}
func (m *ChainParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainParams.Merge(m, src)
}
func (m *ChainParams) XXX_Size() int {
	return m.Size()
}
func (m *ChainParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainParams.DiscardUnknown(m)
}

var xxx_messageInfo_ChainParams proto.InternalMessageInfo

func (m *ChainParams) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ChainParams) GetConfirmationCount() uint64 {
	if m != nil {
		return m.ConfirmationCount
	}
	return 0
}

func (m *ChainParams) GetGasPriceTicker() uint64 {
	if m != nil {
		return m.GasPriceTicker
	}
	return 0
}

func (m *ChainParams) GetInTxTicker() uint64 {
	if m != nil {
		return m.InTxTicker
	}
	return 0
}

func (m *ChainParams) GetOutTxTicker() uint64 {
	if m != nil {
		return m.OutTxTicker
	}
	return 0
}

func (m *ChainParams) GetOutboundTxScheduleInterval() int64 {
	if m != nil {
		return m.OutboundTxScheduleInterval
	}
	return 0
}

func (m *ChainParams) GetOutboundTxScheduleLookahead() int64 {
	if m != nil {
		return m.OutboundTxScheduleLookahead
	}
	return 0
}

func (m *ChainParams) GetIsSupported() bool {
	if m != nil {
		return m.IsSupported
	}
	return false
}

func (m *ChainParams) GetStrategyManagerContractAddress() string {
	if m != nil {
		return m.StrategyManagerContractAddress
	}
	return ""
}

func (m *ChainParams) GetDelegationManagerContractAddress() string {
	if m != nil {
		return m.DelegationManagerContractAddress
	}
	return ""
}

func (m *ChainParams) GetOmniOperatorSharesManagerContractAddress() string {
	if m != nil {
		return m.OmniOperatorSharesManagerContractAddress
	}
	return ""
}

func (m *ChainParams) GetConnectorContractAddress() string {
	if m != nil {
		return m.ConnectorContractAddress
	}
	return ""
}

func (m *ChainParams) GetStartBlockHeight() uint64 {
	if m != nil {
		return m.StartBlockHeight
	}
	return 0
}

func (m *ChainParams) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *ChainParams) GetWatchPellTokenTicker() uint64 {
	if m != nil {
		return m.WatchPellTokenTicker
	}
	return 0
}

func (m *ChainParams) GetWatchGasTokenTicker() uint64 {
	if m != nil {
		return m.WatchGasTokenTicker
	}
	return 0
}

func (m *ChainParams) GetGatewayEvmContractAddress() string {
	if m != nil {
		return m.GatewayEvmContractAddress
	}
	return ""
}

func (m *ChainParams) GetPellTokenContractAddress() string {
	if m != nil {
		return m.PellTokenContractAddress
	}
	return ""
}

func (m *ChainParams) GetGasSwapContractAddress() string {
	if m != nil {
		return m.GasSwapContractAddress
	}
	return ""
}

func (m *ChainParams) GetPellTokenPostInterval() uint64 {
	if m != nil {
		return m.PellTokenPostInterval
	}
	return 0
}

func (m *ChainParams) GetGasTokenPostInterval() uint64 {
	if m != nil {
		return m.GasTokenPostInterval
	}
	return 0
}

func (m *ChainParams) GetPellTokenRechargeEnabled() bool {
	if m != nil {
		return m.PellTokenRechargeEnabled
	}
	return false
}

func (m *ChainParams) GetGasTokenRechargeEnabled() bool {
	if m != nil {
		return m.GasTokenRechargeEnabled
	}
	return false
}

func (m *ChainParams) GetChainRegistryInteractorContractAddress() string {
	if m != nil {
		return m.ChainRegistryInteractorContractAddress
	}
	return ""
}

// Deprecated(v13): Use ChainParamsList
type RelayerParams struct {
	Chain                *chains.Chain               `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	BallotThreshold      cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=ballot_threshold,json=ballotThreshold,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"ballot_threshold"`
	MinRelayerDelegation cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=min_relayer_delegation,json=minRelayerDelegation,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_relayer_delegation"`
	IsSupported          bool                        `protobuf:"varint,5,opt,name=is_supported,json=isSupported,proto3" json:"is_supported,omitempty"`
}

func (m *RelayerParams) Reset()         { *m = RelayerParams{} }
func (m *RelayerParams) String() string { return proto.CompactTextString(m) }
func (*RelayerParams) ProtoMessage()    {}
func (*RelayerParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccba6a72763fc2ad, []int{2}
}
func (m *RelayerParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayerParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayerParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayerParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayerParams.Merge(m, src)
}
func (m *RelayerParams) XXX_Size() int {
	return m.Size()
}
func (m *RelayerParams) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayerParams.DiscardUnknown(m)
}

var xxx_messageInfo_RelayerParams proto.InternalMessageInfo

func (m *RelayerParams) GetChain() *chains.Chain {
	if m != nil {
		return m.Chain
	}
	return nil
}

func (m *RelayerParams) GetIsSupported() bool {
	if m != nil {
		return m.IsSupported
	}
	return false
}

// Deprecated(v14):Moved into the authority module
type AdminPolicy struct {
	PolicyType PolicyType `protobuf:"varint,1,opt,name=policy_type,json=policyType,proto3,enum=relayer.PolicyType" json:"policy_type,omitempty"`
	Address    string     `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *AdminPolicy) Reset()         { *m = AdminPolicy{} }
func (m *AdminPolicy) String() string { return proto.CompactTextString(m) }
func (*AdminPolicy) ProtoMessage()    {}
func (*AdminPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccba6a72763fc2ad, []int{3}
}
func (m *AdminPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminPolicy.Merge(m, src)
}
func (m *AdminPolicy) XXX_Size() int {
	return m.Size()
}
func (m *AdminPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_AdminPolicy proto.InternalMessageInfo

func (m *AdminPolicy) GetPolicyType() PolicyType {
	if m != nil {
		return m.PolicyType
	}
	return PolicyType_GROUP1
}

func (m *AdminPolicy) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Params defines the parameters for the module.
type Params struct {
	// Deprecated(v13): Use ChainParamsList
	ObserverParams []*RelayerParams `protobuf:"bytes,1,rep,name=observer_params,json=observerParams,proto3" json:"observer_params,omitempty"`
	// Deprecated(v14):Moved into the authority module
	AdminPolicy          []*AdminPolicy `protobuf:"bytes,2,rep,name=admin_policy,json=adminPolicy,proto3" json:"admin_policy,omitempty"`
	BallotMaturityBlocks int64          `protobuf:"varint,3,opt,name=ballot_maturity_blocks,json=ballotMaturityBlocks,proto3" json:"ballot_maturity_blocks,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccba6a72763fc2ad, []int{4}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetObserverParams() []*RelayerParams {
	if m != nil {
		return m.ObserverParams
	}
	return nil
}

func (m *Params) GetAdminPolicy() []*AdminPolicy {
	if m != nil {
		return m.AdminPolicy
	}
	return nil
}

func (m *Params) GetBallotMaturityBlocks() int64 {
	if m != nil {
		return m.BallotMaturityBlocks
	}
	return 0
}

func init() {
	proto.RegisterEnum("relayer.PolicyType", PolicyType_name, PolicyType_value)
	proto.RegisterType((*ChainParamsList)(nil), "relayer.ChainParamsList")
	proto.RegisterType((*ChainParams)(nil), "relayer.ChainParams")
	proto.RegisterType((*RelayerParams)(nil), "relayer.RelayerParams")
	proto.RegisterType((*AdminPolicy)(nil), "relayer.AdminPolicy")
	proto.RegisterType((*Params)(nil), "relayer.Params")
}

func init() { proto.RegisterFile("relayer/params.proto", fileDescriptor_ccba6a72763fc2ad) }

var fileDescriptor_ccba6a72763fc2ad = []byte{
	// 1164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4b, 0x6f, 0xe3, 0x36,
	0x10, 0xb6, 0xf2, 0x0e, 0x9d, 0x87, 0xa3, 0x38, 0xb6, 0xe2, 0x6c, 0x1c, 0xaf, 0x17, 0x68, 0x8d,
	0xa0, 0xb1, 0xd1, 0x6c, 0x17, 0x41, 0x5f, 0x58, 0x24, 0xd9, 0xc5, 0x6e, 0x8a, 0xa4, 0x31, 0x14,
	0x17, 0x68, 0x53, 0xb4, 0x2a, 0x2d, 0xb1, 0x12, 0x61, 0x49, 0x14, 0x48, 0x3a, 0x89, 0xff, 0x40,
	0x0f, 0x3d, 0xf5, 0xd8, 0x63, 0x0f, 0x3d, 0xf4, 0x57, 0xf4, 0xbc, 0xc7, 0x3d, 0x16, 0x3d, 0x2c,
	0x8a, 0xe4, 0x8f, 0x14, 0x1a, 0x3d, 0xfc, 0x4c, 0x11, 0xa0, 0x27, 0x91, 0x9c, 0xef, 0xfb, 0x38,
	0xc3, 0x19, 0x71, 0x88, 0xf2, 0x9c, 0xb8, 0xb8, 0x47, 0x78, 0x23, 0xc0, 0x1c, 0x7b, 0xa2, 0x1e,
	0x70, 0x26, 0x99, 0x3a, 0x1f, 0xaf, 0x96, 0xf2, 0x36, 0xb3, 0x19, 0xac, 0x35, 0xc2, 0x51, 0x64,
	0x2e, 0x15, 0x83, 0x8e, 0xdd, 0x30, 0x1d, 0x4c, 0x7d, 0x11, 0x7f, 0x22, 0x43, 0xf5, 0x0b, 0xb4,
	0x7a, 0x1c, 0xce, 0x9b, 0x20, 0x76, 0x4a, 0x85, 0x54, 0x0f, 0xd0, 0x12, 0x40, 0x8c, 0x68, 0x03,
	0x4d, 0xa9, 0x4c, 0xd7, 0xb2, 0xfb, 0xf9, 0x7a, 0xbc, 0x43, 0x7d, 0x00, 0xaf, 0x67, 0xcd, 0xfe,
	0xa4, 0xfa, 0xf3, 0x2a, 0xca, 0x0e, 0x18, 0xd5, 0x4d, 0xb4, 0x10, 0x09, 0x51, 0x4b, 0x53, 0x2a,
	0x4a, 0x6d, 0x5a, 0x9f, 0x87, 0xf9, 0x89, 0xa5, 0xee, 0x21, 0xd5, 0x64, 0xfe, 0x8f, 0x94, 0x7b,
	0x58, 0x52, 0xe6, 0x1b, 0x26, 0xeb, 0xfa, 0x52, 0x9b, 0xaa, 0x28, 0xb5, 0x19, 0x7d, 0x6d, 0xd0,
	0x72, 0x1c, 0x1a, 0xd4, 0x1a, 0xca, 0xd9, 0x58, 0x18, 0x01, 0xa7, 0x26, 0x31, 0x24, 0x35, 0x3b,
	0x84, 0x6b, 0xd3, 0x00, 0x5e, 0xb1, 0xb1, 0x68, 0x86, 0xcb, 0x2d, 0x58, 0x55, 0x2b, 0x68, 0x89,
	0xfa, 0x86, 0xbc, 0x49, 0x50, 0x33, 0x80, 0x42, 0xd4, 0x6f, 0xdd, 0xc4, 0x88, 0x2a, 0x5a, 0x66,
	0x5d, 0x39, 0x00, 0x99, 0x05, 0x48, 0x96, 0x75, 0x65, 0x8a, 0x39, 0x44, 0xdb, 0xac, 0x2b, 0xdb,
	0xac, 0xeb, 0x5b, 0x21, 0x50, 0x98, 0x0e, 0xb1, 0xba, 0x2e, 0x31, 0xa8, 0x2f, 0x09, 0xbf, 0xc2,
	0xae, 0x36, 0x07, 0xe1, 0x94, 0x12, 0x50, 0xeb, 0xe6, 0x22, 0x86, 0x9c, 0xc4, 0x08, 0xf5, 0x18,
	0x95, 0x27, 0x4a, 0xb8, 0x8c, 0x75, 0xb0, 0x43, 0xb0, 0xa5, 0xcd, 0x83, 0xc6, 0xd6, 0xb8, 0xc6,
	0x69, 0x02, 0x51, 0xbf, 0x44, 0xb9, 0x36, 0x76, 0x5d, 0x26, 0x0d, 0xe9, 0x70, 0x22, 0x1c, 0xe6,
	0x5a, 0xda, 0x42, 0x45, 0xa9, 0x2d, 0x1e, 0x3d, 0x79, 0xf3, 0x6e, 0x27, 0xf3, 0xf7, 0xbb, 0x9d,
	0x2d, 0x93, 0x09, 0x8f, 0x09, 0x61, 0x75, 0xea, 0x94, 0x35, 0x3c, 0x2c, 0x9d, 0xfa, 0x29, 0xb1,
	0xb1, 0xd9, 0x7b, 0x41, 0x4c, 0x7d, 0x35, 0x22, 0xb7, 0x12, 0xae, 0xfa, 0x2d, 0x2a, 0x7a, 0xd4,
	0x37, 0x58, 0x5b, 0x10, 0x7e, 0x45, 0xb8, 0x61, 0x11, 0x97, 0xd8, 0x70, 0xce, 0xda, 0xe2, 0xc3,
	0x65, 0x37, 0x3c, 0xea, 0x9f, 0xc7, 0x12, 0x2f, 0x52, 0x05, 0xf5, 0x31, 0x5a, 0xa2, 0xc2, 0x10,
	0xdd, 0x20, 0x60, 0x5c, 0x12, 0x4b, 0x43, 0x15, 0xa5, 0xb6, 0xa0, 0x67, 0xa9, 0xb8, 0x48, 0x96,
	0xd4, 0x13, 0xf4, 0x58, 0x48, 0x8e, 0x25, 0xb1, 0x7b, 0x86, 0x87, 0x7d, 0x6c, 0x13, 0x6e, 0x98,
	0xcc, 0x97, 0x1c, 0x9b, 0xd2, 0xc0, 0x96, 0xc5, 0x89, 0x10, 0x5a, 0x36, 0xf4, 0x44, 0x2f, 0x27,
	0xc0, 0xb3, 0x08, 0x77, 0x1c, 0xc3, 0x0e, 0x23, 0x94, 0x7a, 0x86, 0x9e, 0xf4, 0xbd, 0xbf, 0x5f,
	0x6c, 0x09, 0xc4, 0x2a, 0x7d, 0xe8, 0x3d, 0x72, 0x06, 0xda, 0x63, 0x9e, 0x4f, 0x0d, 0x16, 0x10,
	0x8e, 0x25, 0xe3, 0x86, 0x70, 0x30, 0x27, 0xe2, 0x7e, 0xe1, 0x65, 0x10, 0xae, 0x85, 0xa4, 0xf3,
	0x98, 0x73, 0x01, 0x94, 0x7b, 0x36, 0xf8, 0x0c, 0x95, 0x4c, 0xe6, 0xfb, 0xc4, 0x0c, 0xc5, 0xc7,
	0xd4, 0x56, 0x40, 0x4d, 0x4b, 0x11, 0xa3, 0xec, 0x0f, 0x90, 0x2a, 0x24, 0xe6, 0xd2, 0x68, 0xbb,
	0xcc, 0xec, 0x18, 0x0e, 0xa1, 0xb6, 0x23, 0xb5, 0x55, 0xa8, 0xdc, 0x1c, 0x58, 0x8e, 0x42, 0xc3,
	0x6b, 0x58, 0x57, 0xb7, 0xd0, 0x62, 0xf8, 0xbb, 0xb8, 0xd4, 0xa3, 0x52, 0xcb, 0x01, 0x68, 0xc1,
	0xc6, 0xe2, 0x34, 0x9c, 0xab, 0xcf, 0x50, 0xf1, 0x1a, 0x4b, 0xd3, 0x31, 0x02, 0xe2, 0xba, 0x86,
	0x64, 0x1d, 0xe2, 0x27, 0x7f, 0xc2, 0x1a, 0x40, 0xf3, 0x60, 0x6e, 0x12, 0xd7, 0x6d, 0x85, 0xc6,
	0xf8, 0x97, 0x78, 0x8a, 0x0a, 0x11, 0x2d, 0x54, 0x1e, 0x62, 0xa9, 0xc0, 0x5a, 0x07, 0xeb, 0x2b,
	0x2c, 0x06, 0x49, 0x3f, 0xa0, 0xed, 0x81, 0x5d, 0x38, 0x31, 0x1d, 0xcc, 0x6d, 0x32, 0x50, 0xcc,
	0xeb, 0x50, 0x75, 0xdb, 0x71, 0xd5, 0x6d, 0x8c, 0x57, 0xdd, 0x89, 0x2f, 0xf5, 0x52, 0x90, 0xf8,
	0xa2, 0xc7, 0x0a, 0xfd, 0x8a, 0xfe, 0x1e, 0x3d, 0xea, 0x3b, 0x34, 0x61, 0x83, 0xfc, 0x43, 0x36,
	0xd8, 0xb4, 0x63, 0xb7, 0xc7, 0xf5, 0x2f, 0x51, 0x69, 0x52, 0x04, 0xd8, 0x83, 0x0b, 0x6b, 0xe3,
	0x21, 0xea, 0xc5, 0x31, 0xf7, 0x0f, 0x81, 0xad, 0x7e, 0x8d, 0x36, 0x27, 0xf8, 0x1e, 0x4b, 0x17,
	0x1e, 0x22, 0x5d, 0x18, 0x75, 0x3c, 0x56, 0x7e, 0x1e, 0x9e, 0x8a, 0x24, 0xd7, 0xb8, 0x67, 0x90,
	0x2b, 0x6f, 0xbc, 0xdc, 0x8a, 0x50, 0x6e, 0x9b, 0x31, 0xe6, 0xe5, 0x95, 0x37, 0x5a, 0x6f, 0x9f,
	0xa3, 0xad, 0x81, 0xb0, 0xc7, 0xf8, 0x5a, 0x54, 0xae, 0x69, 0x60, 0xa3, 0xf4, 0x8f, 0xa3, 0xc8,
	0xc4, 0x35, 0x0e, 0xc6, 0xc9, 0x9b, 0x40, 0x0e, 0x5d, 0xbf, 0xb8, 0xc6, 0xc1, 0x28, 0xf5, 0x00,
	0x69, 0x03, 0x3b, 0x07, 0x4c, 0xc8, 0xfe, 0xad, 0x5b, 0x82, 0x4a, 0xdb, 0x48, 0xb7, 0x6d, 0x32,
	0x21, 0xd3, 0x0b, 0xf7, 0x19, 0x2a, 0xf6, 0x4f, 0x73, 0x98, 0xb7, 0x15, 0xd5, 0x75, 0x72, 0x58,
	0x43, 0xb4, 0xe1, 0x48, 0xd3, 0x2c, 0x10, 0x1f, 0xb7, 0x5d, 0x62, 0x69, 0x8f, 0xe0, 0x12, 0xd3,
	0xc6, 0x52, 0xf8, 0x32, 0xb2, 0xab, 0x9f, 0xa2, 0xd2, 0x84, 0x1c, 0x26, 0xec, 0x6d, 0x60, 0x17,
	0x47, 0xb3, 0x94, 0x90, 0x2f, 0xd1, 0x6e, 0xd4, 0x20, 0x39, 0xb1, 0xa9, 0x90, 0xbc, 0x17, 0xb9,
	0x8c, 0x27, 0xdf, 0x11, 0x65, 0x38, 0xb7, 0xf7, 0x80, 0xa1, 0xc7, 0x84, 0x93, 0x14, 0x3f, 0x72,
	0x8e, 0xd5, 0x9f, 0xa6, 0xd0, 0xb2, 0x1e, 0x75, 0xec, 0xb8, 0x1d, 0xbf, 0x8f, 0x66, 0x81, 0x0b,
	0xbd, 0x38, 0xbb, 0xbf, 0x56, 0x0f, 0x3a, 0x76, 0x3d, 0x7e, 0x0c, 0x40, 0xdb, 0xd6, 0x23, 0xfb,
	0xc4, 0xae, 0x33, 0xfd, 0x3f, 0xba, 0xce, 0x37, 0xa8, 0xe0, 0x41, 0x90, 0xe0, 0xcd, 0x60, 0xd3,
	0x99, 0x79, 0xb8, 0x6a, 0xde, 0x0b, 0xa3, 0x06, 0x85, 0xff, 0xe8, 0x39, 0xb3, 0x63, 0x3d, 0xa7,
	0xfa, 0x1d, 0xca, 0x1e, 0x5a, 0x1e, 0xf5, 0x9b, 0xcc, 0xa5, 0x66, 0x4f, 0xfd, 0x08, 0x65, 0x03,
	0x18, 0x19, 0xb2, 0x17, 0x10, 0x38, 0x8b, 0x95, 0xfd, 0xf5, 0xf4, 0x71, 0x13, 0xa1, 0x5a, 0xbd,
	0x80, 0xe8, 0x28, 0x48, 0xc7, 0xaa, 0x86, 0xe6, 0x93, 0x34, 0x4c, 0x41, 0x1a, 0x92, 0x69, 0xf5,
	0x4f, 0x05, 0xcd, 0xc5, 0x07, 0xfc, 0x1c, 0xad, 0xa6, 0x9d, 0x75, 0xe8, 0xed, 0x54, 0x48, 0xe5,
	0x87, 0x32, 0xa2, 0xaf, 0x24, 0xf0, 0x58, 0xe0, 0x00, 0x2d, 0xe1, 0xd0, 0x55, 0x23, 0xda, 0x59,
	0x9b, 0x1a, 0x79, 0x79, 0x0d, 0xc4, 0xa1, 0x67, 0xf1, 0x50, 0x50, 0x85, 0x38, 0x63, 0x1e, 0x96,
	0x5d, 0x4e, 0x65, 0x2f, 0x6a, 0x14, 0x02, 0xf2, 0x36, 0xad, 0xe7, 0x23, 0xeb, 0x59, 0x6c, 0x84,
	0x5e, 0x21, 0x3e, 0x99, 0xf9, 0xf5, 0xb7, 0x9d, 0xcc, 0xee, 0x2e, 0x42, 0xfd, 0xa0, 0x55, 0x84,
	0xe6, 0x5e, 0xe9, 0xe7, 0x5f, 0x35, 0x3f, 0xcc, 0x65, 0xd2, 0xf1, 0x7e, 0x4e, 0x29, 0xcd, 0xfc,
	0xf1, 0x7b, 0x59, 0x39, 0x7a, 0xfd, 0xe6, 0xb6, 0xac, 0xbc, 0xbd, 0x2d, 0x2b, 0xff, 0xdc, 0x96,
	0x95, 0x5f, 0xee, 0xca, 0x99, 0xb7, 0x77, 0xe5, 0xcc, 0x5f, 0x77, 0xe5, 0xcc, 0x65, 0xdd, 0xa6,
	0xd2, 0xe9, 0xb6, 0xeb, 0x26, 0xf3, 0x1a, 0xe1, 0xcf, 0xb2, 0x07, 0xa5, 0x04, 0x43, 0x93, 0x71,
	0xd2, 0xb8, 0x69, 0x24, 0xcf, 0xd6, 0xf0, 0xd8, 0x45, 0x7b, 0x0e, 0x9e, 0x9f, 0x4f, 0xff, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0xbc, 0x03, 0x3b, 0x96, 0xce, 0x0a, 0x00, 0x00,
}

func (m *ChainParamsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainParamsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainParamsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainParams) > 0 {
		for iNdEx := len(m.ChainParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChainParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainRegistryInteractorContractAddress) > 0 {
		i -= len(m.ChainRegistryInteractorContractAddress)
		copy(dAtA[i:], m.ChainRegistryInteractorContractAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ChainRegistryInteractorContractAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.GasTokenRechargeEnabled {
		i--
		if m.GasTokenRechargeEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.PellTokenRechargeEnabled {
		i--
		if m.PellTokenRechargeEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.GasTokenPostInterval != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.GasTokenPostInterval))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.PellTokenPostInterval != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.PellTokenPostInterval))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if len(m.GasSwapContractAddress) > 0 {
		i -= len(m.GasSwapContractAddress)
		copy(dAtA[i:], m.GasSwapContractAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.GasSwapContractAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.PellTokenContractAddress) > 0 {
		i -= len(m.PellTokenContractAddress)
		copy(dAtA[i:], m.PellTokenContractAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.PellTokenContractAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.GatewayEvmContractAddress) > 0 {
		i -= len(m.GatewayEvmContractAddress)
		copy(dAtA[i:], m.GatewayEvmContractAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.GatewayEvmContractAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	{
		size := m.GasTokenRechargeAmount.Size()
		i -= size
		if _, err := m.GasTokenRechargeAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	{
		size := m.PellTokenRechargeAmount.Size()
		i -= size
		if _, err := m.PellTokenRechargeAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	{
		size := m.GasTokenRechargeThreshold.Size()
		i -= size
		if _, err := m.GasTokenRechargeThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	{
		size := m.PellTokenRechargeThreshold.Size()
		i -= size
		if _, err := m.PellTokenRechargeThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	if m.WatchGasTokenTicker != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.WatchGasTokenTicker))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.WatchPellTokenTicker != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.WatchPellTokenTicker))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.GasLimit != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.StartBlockHeight != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.StartBlockHeight))
		i--
		dAtA[i] = 0x78
	}
	if len(m.ConnectorContractAddress) > 0 {
		i -= len(m.ConnectorContractAddress)
		copy(dAtA[i:], m.ConnectorContractAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ConnectorContractAddress)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.OmniOperatorSharesManagerContractAddress) > 0 {
		i -= len(m.OmniOperatorSharesManagerContractAddress)
		copy(dAtA[i:], m.OmniOperatorSharesManagerContractAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.OmniOperatorSharesManagerContractAddress)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.DelegationManagerContractAddress) > 0 {
		i -= len(m.DelegationManagerContractAddress)
		copy(dAtA[i:], m.DelegationManagerContractAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.DelegationManagerContractAddress)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.StrategyManagerContractAddress) > 0 {
		i -= len(m.StrategyManagerContractAddress)
		copy(dAtA[i:], m.StrategyManagerContractAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.StrategyManagerContractAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if m.IsSupported {
		i--
		if m.IsSupported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	{
		size := m.MinObserverDelegation.Size()
		i -= size
		if _, err := m.MinObserverDelegation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.BallotThreshold.Size()
		i -= size
		if _, err := m.BallotThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.OutboundTxScheduleLookahead != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.OutboundTxScheduleLookahead))
		i--
		dAtA[i] = 0x38
	}
	if m.OutboundTxScheduleInterval != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.OutboundTxScheduleInterval))
		i--
		dAtA[i] = 0x30
	}
	if m.OutTxTicker != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.OutTxTicker))
		i--
		dAtA[i] = 0x28
	}
	if m.InTxTicker != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.InTxTicker))
		i--
		dAtA[i] = 0x20
	}
	if m.GasPriceTicker != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.GasPriceTicker))
		i--
		dAtA[i] = 0x18
	}
	if m.ConfirmationCount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ConfirmationCount))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RelayerParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayerParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayerParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSupported {
		i--
		if m.IsSupported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.MinRelayerDelegation.Size()
		i -= size
		if _, err := m.MinRelayerDelegation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.BallotThreshold.Size()
		i -= size
		if _, err := m.BallotThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Chain != nil {
		{
			size, err := m.Chain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.PolicyType != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.PolicyType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BallotMaturityBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BallotMaturityBlocks))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AdminPolicy) > 0 {
		for iNdEx := len(m.AdminPolicy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdminPolicy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ObserverParams) > 0 {
		for iNdEx := len(m.ObserverParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ObserverParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainParamsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainParams) > 0 {
		for _, e := range m.ChainParams {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *ChainParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovParams(uint64(m.ChainId))
	}
	if m.ConfirmationCount != 0 {
		n += 1 + sovParams(uint64(m.ConfirmationCount))
	}
	if m.GasPriceTicker != 0 {
		n += 1 + sovParams(uint64(m.GasPriceTicker))
	}
	if m.InTxTicker != 0 {
		n += 1 + sovParams(uint64(m.InTxTicker))
	}
	if m.OutTxTicker != 0 {
		n += 1 + sovParams(uint64(m.OutTxTicker))
	}
	if m.OutboundTxScheduleInterval != 0 {
		n += 1 + sovParams(uint64(m.OutboundTxScheduleInterval))
	}
	if m.OutboundTxScheduleLookahead != 0 {
		n += 1 + sovParams(uint64(m.OutboundTxScheduleLookahead))
	}
	l = m.BallotThreshold.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinObserverDelegation.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.IsSupported {
		n += 2
	}
	l = len(m.StrategyManagerContractAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.DelegationManagerContractAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.OmniOperatorSharesManagerContractAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ConnectorContractAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.StartBlockHeight != 0 {
		n += 1 + sovParams(uint64(m.StartBlockHeight))
	}
	if m.GasLimit != 0 {
		n += 2 + sovParams(uint64(m.GasLimit))
	}
	if m.WatchPellTokenTicker != 0 {
		n += 2 + sovParams(uint64(m.WatchPellTokenTicker))
	}
	if m.WatchGasTokenTicker != 0 {
		n += 2 + sovParams(uint64(m.WatchGasTokenTicker))
	}
	l = m.PellTokenRechargeThreshold.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.GasTokenRechargeThreshold.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.PellTokenRechargeAmount.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.GasTokenRechargeAmount.Size()
	n += 2 + l + sovParams(uint64(l))
	l = len(m.GatewayEvmContractAddress)
	if l > 0 {
		n += 2 + l + sovParams(uint64(l))
	}
	l = len(m.PellTokenContractAddress)
	if l > 0 {
		n += 2 + l + sovParams(uint64(l))
	}
	l = len(m.GasSwapContractAddress)
	if l > 0 {
		n += 2 + l + sovParams(uint64(l))
	}
	if m.PellTokenPostInterval != 0 {
		n += 2 + sovParams(uint64(m.PellTokenPostInterval))
	}
	if m.GasTokenPostInterval != 0 {
		n += 2 + sovParams(uint64(m.GasTokenPostInterval))
	}
	if m.PellTokenRechargeEnabled {
		n += 3
	}
	if m.GasTokenRechargeEnabled {
		n += 3
	}
	l = len(m.ChainRegistryInteractorContractAddress)
	if l > 0 {
		n += 2 + l + sovParams(uint64(l))
	}
	return n
}

func (m *RelayerParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chain != nil {
		l = m.Chain.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.BallotThreshold.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinRelayerDelegation.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.IsSupported {
		n += 2
	}
	return n
}

func (m *AdminPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyType != 0 {
		n += 1 + sovParams(uint64(m.PolicyType))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ObserverParams) > 0 {
		for _, e := range m.ObserverParams {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.AdminPolicy) > 0 {
		for _, e := range m.AdminPolicy {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.BallotMaturityBlocks != 0 {
		n += 1 + sovParams(uint64(m.BallotMaturityBlocks))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainParamsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainParamsList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainParamsList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainParams = append(m.ChainParams, &ChainParams{})
			if err := m.ChainParams[len(m.ChainParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmationCount", wireType)
			}
			m.ConfirmationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfirmationCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPriceTicker", wireType)
			}
			m.GasPriceTicker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPriceTicker |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxTicker", wireType)
			}
			m.InTxTicker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InTxTicker |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxTicker", wireType)
			}
			m.OutTxTicker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutTxTicker |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxScheduleInterval", wireType)
			}
			m.OutboundTxScheduleInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxScheduleInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxScheduleLookahead", wireType)
			}
			m.OutboundTxScheduleLookahead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxScheduleLookahead |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BallotThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinObserverDelegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinObserverDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSupported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSupported = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyManagerContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrategyManagerContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationManagerContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationManagerContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OmniOperatorSharesManagerContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OmniOperatorSharesManagerContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectorContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectorContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlockHeight", wireType)
			}
			m.StartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchPellTokenTicker", wireType)
			}
			m.WatchPellTokenTicker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchPellTokenTicker |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchGasTokenTicker", wireType)
			}
			m.WatchGasTokenTicker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchGasTokenTicker |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PellTokenRechargeThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PellTokenRechargeThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTokenRechargeThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasTokenRechargeThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PellTokenRechargeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PellTokenRechargeAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTokenRechargeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasTokenRechargeAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayEvmContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayEvmContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PellTokenContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PellTokenContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasSwapContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasSwapContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PellTokenPostInterval", wireType)
			}
			m.PellTokenPostInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PellTokenPostInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTokenPostInterval", wireType)
			}
			m.GasTokenPostInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasTokenPostInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PellTokenRechargeEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PellTokenRechargeEnabled = bool(v != 0)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTokenRechargeEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GasTokenRechargeEnabled = bool(v != 0)
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRegistryInteractorContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainRegistryInteractorContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayerParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayerParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayerParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chain == nil {
				m.Chain = &chains.Chain{}
			}
			if err := m.Chain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BallotThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRelayerDelegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinRelayerDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSupported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSupported = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyType", wireType)
			}
			m.PolicyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicyType |= PolicyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObserverParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObserverParams = append(m.ObserverParams, &RelayerParams{})
			if err := m.ObserverParams[len(m.ObserverParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminPolicy = append(m.AdminPolicy, &AdminPolicy{})
			if err := m.AdminPolicy[len(m.AdminPolicy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotMaturityBlocks", wireType)
			}
			m.BallotMaturityBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BallotMaturityBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
