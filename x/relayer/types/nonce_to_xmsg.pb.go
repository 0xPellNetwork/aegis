// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: relayer/nonce_to_xmsg.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// store key is tss+chainid+nonce
type NonceToXmsg struct {
	ChainId   int64  `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce     int64  `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XmsgIndex string `protobuf:"bytes,3,opt,name=xmsg_index,json=xmsgIndex,proto3" json:"xmsg_index,omitempty"`
	Tss       string `protobuf:"bytes,4,opt,name=tss,proto3" json:"tss,omitempty"`
}

func (m *NonceToXmsg) Reset()         { *m = NonceToXmsg{} }
func (m *NonceToXmsg) String() string { return proto.CompactTextString(m) }
func (*NonceToXmsg) ProtoMessage()    {}
func (*NonceToXmsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_83c75d913751d02f, []int{0}
}
func (m *NonceToXmsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NonceToXmsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NonceToXmsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NonceToXmsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NonceToXmsg.Merge(m, src)
}
func (m *NonceToXmsg) XXX_Size() int {
	return m.Size()
}
func (m *NonceToXmsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NonceToXmsg.DiscardUnknown(m)
}

var xxx_messageInfo_NonceToXmsg proto.InternalMessageInfo

func (m *NonceToXmsg) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *NonceToXmsg) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *NonceToXmsg) GetXmsgIndex() string {
	if m != nil {
		return m.XmsgIndex
	}
	return ""
}

func (m *NonceToXmsg) GetTss() string {
	if m != nil {
		return m.Tss
	}
	return ""
}

func init() {
	proto.RegisterType((*NonceToXmsg)(nil), "relayer.NonceToXmsg")
}

func init() { proto.RegisterFile("relayer/nonce_to_xmsg.proto", fileDescriptor_83c75d913751d02f) }

var fileDescriptor_83c75d913751d02f = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x4a, 0xcd, 0x49,
	0xac, 0x4c, 0x2d, 0xd2, 0xcf, 0xcb, 0xcf, 0x4b, 0x4e, 0x8d, 0x2f, 0xc9, 0x8f, 0xaf, 0xc8, 0x2d,
	0x4e, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x4a, 0x2a, 0xe5, 0x73, 0x71, 0xfb,
	0x81, 0xe4, 0x43, 0xf2, 0x23, 0x72, 0x8b, 0xd3, 0x85, 0x24, 0xb9, 0x38, 0x92, 0x33, 0x12, 0x33,
	0xf3, 0xe2, 0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0xd8, 0xc1, 0x7c, 0xcf, 0x14,
	0x21, 0x11, 0x2e, 0x56, 0xb0, 0x49, 0x12, 0x4c, 0x60, 0x71, 0x08, 0x47, 0x48, 0x96, 0x8b, 0x0b,
	0x64, 0x6c, 0x7c, 0x66, 0x5e, 0x4a, 0x6a, 0x85, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x27,
	0x48, 0xc4, 0x13, 0x24, 0x20, 0x24, 0xc0, 0xc5, 0x5c, 0x52, 0x5c, 0x2c, 0xc1, 0x02, 0x16, 0x07,
	0x31, 0x9d, 0x3c, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6,
	0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x2f, 0x3d,
	0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0xdf, 0xa0, 0x22, 0x20, 0x35, 0x27, 0xc7,
	0x2f, 0xb5, 0xa4, 0x3c, 0xbf, 0x28, 0x5b, 0x3f, 0x31, 0x35, 0x3d, 0xb3, 0x58, 0xbf, 0x42, 0x1f,
	0xe6, 0xa3, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0, 0x57, 0x8c, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x5e, 0x2e, 0xf3, 0xc0, 0xe9, 0x00, 0x00, 0x00,
}

func (m *NonceToXmsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NonceToXmsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NonceToXmsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tss) > 0 {
		i -= len(m.Tss)
		copy(dAtA[i:], m.Tss)
		i = encodeVarintNonceToXmsg(dAtA, i, uint64(len(m.Tss)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.XmsgIndex) > 0 {
		i -= len(m.XmsgIndex)
		copy(dAtA[i:], m.XmsgIndex)
		i = encodeVarintNonceToXmsg(dAtA, i, uint64(len(m.XmsgIndex)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Nonce != 0 {
		i = encodeVarintNonceToXmsg(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintNonceToXmsg(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNonceToXmsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovNonceToXmsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NonceToXmsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovNonceToXmsg(uint64(m.ChainId))
	}
	if m.Nonce != 0 {
		n += 1 + sovNonceToXmsg(uint64(m.Nonce))
	}
	l = len(m.XmsgIndex)
	if l > 0 {
		n += 1 + l + sovNonceToXmsg(uint64(l))
	}
	l = len(m.Tss)
	if l > 0 {
		n += 1 + l + sovNonceToXmsg(uint64(l))
	}
	return n
}

func sovNonceToXmsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNonceToXmsg(x uint64) (n int) {
	return sovNonceToXmsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NonceToXmsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNonceToXmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NonceToXmsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NonceToXmsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNonceToXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNonceToXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XmsgIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNonceToXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNonceToXmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNonceToXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XmsgIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNonceToXmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNonceToXmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNonceToXmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tss = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNonceToXmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNonceToXmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNonceToXmsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNonceToXmsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNonceToXmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNonceToXmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNonceToXmsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNonceToXmsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNonceToXmsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNonceToXmsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNonceToXmsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNonceToXmsg = fmt.Errorf("proto: unexpected end of group")
)
