// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: relayer/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	chains "github.com/pell-chain/pellcore/pkg/chains"
	proofs "github.com/pell-chain/pellcore/pkg/proofs"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateObserver represents the message to update an observer
type MsgUpdateObserver struct {
	Signer             string              `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	OldObserverAddress string              `protobuf:"bytes,2,opt,name=old_observer_address,json=oldObserverAddress,proto3" json:"old_observer_address,omitempty"`
	NewObserverAddress string              `protobuf:"bytes,3,opt,name=new_observer_address,json=newObserverAddress,proto3" json:"new_observer_address,omitempty"`
	UpdateReason       RelayerUpdateReason `protobuf:"varint,4,opt,name=update_reason,json=updateReason,proto3,enum=relayer.RelayerUpdateReason" json:"update_reason,omitempty"`
}

func (m *MsgUpdateObserver) Reset()         { *m = MsgUpdateObserver{} }
func (m *MsgUpdateObserver) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateObserver) ProtoMessage()    {}
func (*MsgUpdateObserver) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{0}
}
func (m *MsgUpdateObserver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateObserver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateObserver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateObserver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateObserver.Merge(m, src)
}
func (m *MsgUpdateObserver) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateObserver) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateObserver.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateObserver proto.InternalMessageInfo

func (m *MsgUpdateObserver) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateObserver) GetOldObserverAddress() string {
	if m != nil {
		return m.OldObserverAddress
	}
	return ""
}

func (m *MsgUpdateObserver) GetNewObserverAddress() string {
	if m != nil {
		return m.NewObserverAddress
	}
	return ""
}

func (m *MsgUpdateObserver) GetUpdateReason() RelayerUpdateReason {
	if m != nil {
		return m.UpdateReason
	}
	return RelayerUpdateReason_UNDEFINED
}

// MsgUpdateObserverResponse represents the response to update an observer
type MsgUpdateObserverResponse struct {
}

func (m *MsgUpdateObserverResponse) Reset()         { *m = MsgUpdateObserverResponse{} }
func (m *MsgUpdateObserverResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateObserverResponse) ProtoMessage()    {}
func (*MsgUpdateObserverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{1}
}
func (m *MsgUpdateObserverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateObserverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateObserverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateObserverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateObserverResponse.Merge(m, src)
}
func (m *MsgUpdateObserverResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateObserverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateObserverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateObserverResponse proto.InternalMessageInfo

// MsgVoteBlockHeader represents the message to vote for a block header
type MsgVoteBlockHeader struct {
	ChainId   int64             `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	BlockHash []byte            `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Height    int64             `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Header    proofs.HeaderData `protobuf:"bytes,4,opt,name=header,proto3" json:"header"`
	Signer    string            `protobuf:"bytes,5,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgVoteBlockHeader) Reset()         { *m = MsgVoteBlockHeader{} }
func (m *MsgVoteBlockHeader) String() string { return proto.CompactTextString(m) }
func (*MsgVoteBlockHeader) ProtoMessage()    {}
func (*MsgVoteBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{2}
}
func (m *MsgVoteBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteBlockHeader.Merge(m, src)
}
func (m *MsgVoteBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteBlockHeader proto.InternalMessageInfo

func (m *MsgVoteBlockHeader) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgVoteBlockHeader) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *MsgVoteBlockHeader) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MsgVoteBlockHeader) GetHeader() proofs.HeaderData {
	if m != nil {
		return m.Header
	}
	return proofs.HeaderData{}
}

func (m *MsgVoteBlockHeader) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgVoteBlockHeaderResponse represents the response to vote for a block header
type MsgVoteBlockHeaderResponse struct {
	BallotCreated bool `protobuf:"varint,1,opt,name=ballot_created,json=ballotCreated,proto3" json:"ballot_created,omitempty"`
	VoteFinalized bool `protobuf:"varint,2,opt,name=vote_finalized,json=voteFinalized,proto3" json:"vote_finalized,omitempty"`
}

func (m *MsgVoteBlockHeaderResponse) Reset()         { *m = MsgVoteBlockHeaderResponse{} }
func (m *MsgVoteBlockHeaderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteBlockHeaderResponse) ProtoMessage()    {}
func (*MsgVoteBlockHeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{3}
}
func (m *MsgVoteBlockHeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteBlockHeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteBlockHeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteBlockHeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteBlockHeaderResponse.Merge(m, src)
}
func (m *MsgVoteBlockHeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteBlockHeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteBlockHeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteBlockHeaderResponse proto.InternalMessageInfo

func (m *MsgVoteBlockHeaderResponse) GetBallotCreated() bool {
	if m != nil {
		return m.BallotCreated
	}
	return false
}

func (m *MsgVoteBlockHeaderResponse) GetVoteFinalized() bool {
	if m != nil {
		return m.VoteFinalized
	}
	return false
}

// MsgUpsertChainParams represents the message to upsert chain parameters
type MsgUpsertChainParams struct {
	Signer      string       `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	ChainParams *ChainParams `protobuf:"bytes,2,opt,name=chain_params,json=chainParams,proto3" json:"chain_params,omitempty"`
}

func (m *MsgUpsertChainParams) Reset()         { *m = MsgUpsertChainParams{} }
func (m *MsgUpsertChainParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpsertChainParams) ProtoMessage()    {}
func (*MsgUpsertChainParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{4}
}
func (m *MsgUpsertChainParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpsertChainParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpsertChainParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpsertChainParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpsertChainParams.Merge(m, src)
}
func (m *MsgUpsertChainParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpsertChainParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpsertChainParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpsertChainParams proto.InternalMessageInfo

func (m *MsgUpsertChainParams) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpsertChainParams) GetChainParams() *ChainParams {
	if m != nil {
		return m.ChainParams
	}
	return nil
}

// MsgUpsertChainParamsResponse represents the response to upsert chain
// parameters
type MsgUpsertChainParamsResponse struct {
}

func (m *MsgUpsertChainParamsResponse) Reset()         { *m = MsgUpsertChainParamsResponse{} }
func (m *MsgUpsertChainParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpsertChainParamsResponse) ProtoMessage()    {}
func (*MsgUpsertChainParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{5}
}
func (m *MsgUpsertChainParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpsertChainParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpsertChainParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpsertChainParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpsertChainParamsResponse.Merge(m, src)
}
func (m *MsgUpsertChainParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpsertChainParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpsertChainParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpsertChainParamsResponse proto.InternalMessageInfo

// MsgRemoveChainParams represents the message to remove chain parameters
type MsgRemoveChainParams struct {
	Signer  string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	ChainId int64  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *MsgRemoveChainParams) Reset()         { *m = MsgRemoveChainParams{} }
func (m *MsgRemoveChainParams) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveChainParams) ProtoMessage()    {}
func (*MsgRemoveChainParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{6}
}
func (m *MsgRemoveChainParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveChainParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveChainParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveChainParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveChainParams.Merge(m, src)
}
func (m *MsgRemoveChainParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveChainParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveChainParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveChainParams proto.InternalMessageInfo

func (m *MsgRemoveChainParams) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRemoveChainParams) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// MsgRemoveChainParamsResponse represents the response to remove chain
// parameters
type MsgRemoveChainParamsResponse struct {
}

func (m *MsgRemoveChainParamsResponse) Reset()         { *m = MsgRemoveChainParamsResponse{} }
func (m *MsgRemoveChainParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveChainParamsResponse) ProtoMessage()    {}
func (*MsgRemoveChainParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{7}
}
func (m *MsgRemoveChainParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveChainParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveChainParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveChainParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveChainParamsResponse.Merge(m, src)
}
func (m *MsgRemoveChainParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveChainParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveChainParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveChainParamsResponse proto.InternalMessageInfo

// MsgAddObserver represents the message to add an observer
type MsgAddObserver struct {
	Signer                  string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	ObserverAddress         string `protobuf:"bytes,2,opt,name=observer_address,json=observerAddress,proto3" json:"observer_address,omitempty"`
	PellclientGranteePubkey string `protobuf:"bytes,3,opt,name=pellclient_grantee_pubkey,json=pellclientGranteePubkey,proto3" json:"pellclient_grantee_pubkey,omitempty"`
	AddNodeAccountOnly      bool   `protobuf:"varint,4,opt,name=add_node_account_only,json=addNodeAccountOnly,proto3" json:"add_node_account_only,omitempty"`
}

func (m *MsgAddObserver) Reset()         { *m = MsgAddObserver{} }
func (m *MsgAddObserver) String() string { return proto.CompactTextString(m) }
func (*MsgAddObserver) ProtoMessage()    {}
func (*MsgAddObserver) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{8}
}
func (m *MsgAddObserver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddObserver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddObserver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddObserver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddObserver.Merge(m, src)
}
func (m *MsgAddObserver) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddObserver) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddObserver.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddObserver proto.InternalMessageInfo

func (m *MsgAddObserver) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgAddObserver) GetObserverAddress() string {
	if m != nil {
		return m.ObserverAddress
	}
	return ""
}

func (m *MsgAddObserver) GetPellclientGranteePubkey() string {
	if m != nil {
		return m.PellclientGranteePubkey
	}
	return ""
}

func (m *MsgAddObserver) GetAddNodeAccountOnly() bool {
	if m != nil {
		return m.AddNodeAccountOnly
	}
	return false
}

// MsgAddObserverResponse represents the response to add an observer
type MsgAddObserverResponse struct {
}

func (m *MsgAddObserverResponse) Reset()         { *m = MsgAddObserverResponse{} }
func (m *MsgAddObserverResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddObserverResponse) ProtoMessage()    {}
func (*MsgAddObserverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{9}
}
func (m *MsgAddObserverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddObserverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddObserverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddObserverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddObserverResponse.Merge(m, src)
}
func (m *MsgAddObserverResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddObserverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddObserverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddObserverResponse proto.InternalMessageInfo

// MsgAddBlameVote represents the message to add a blame vote
type MsgAddBlameVote struct {
	ChainId   int64  `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	BlameInfo Blame  `protobuf:"bytes,2,opt,name=blame_info,json=blameInfo,proto3" json:"blame_info"`
	Signer    string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgAddBlameVote) Reset()         { *m = MsgAddBlameVote{} }
func (m *MsgAddBlameVote) String() string { return proto.CompactTextString(m) }
func (*MsgAddBlameVote) ProtoMessage()    {}
func (*MsgAddBlameVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{10}
}
func (m *MsgAddBlameVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddBlameVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddBlameVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddBlameVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddBlameVote.Merge(m, src)
}
func (m *MsgAddBlameVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddBlameVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddBlameVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddBlameVote proto.InternalMessageInfo

func (m *MsgAddBlameVote) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgAddBlameVote) GetBlameInfo() Blame {
	if m != nil {
		return m.BlameInfo
	}
	return Blame{}
}

func (m *MsgAddBlameVote) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgAddBlameVoteResponse represents the response to add a blame vote
type MsgAddBlameVoteResponse struct {
}

func (m *MsgAddBlameVoteResponse) Reset()         { *m = MsgAddBlameVoteResponse{} }
func (m *MsgAddBlameVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddBlameVoteResponse) ProtoMessage()    {}
func (*MsgAddBlameVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{11}
}
func (m *MsgAddBlameVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddBlameVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddBlameVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddBlameVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddBlameVoteResponse.Merge(m, src)
}
func (m *MsgAddBlameVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddBlameVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddBlameVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddBlameVoteResponse proto.InternalMessageInfo

// MsgUpsertCrosschainFlags represents the message to upsert crosschain flags
type MsgUpsertCrosschainFlags struct {
	Signer                       string                        `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	IsInboundEnabled             bool                          `protobuf:"varint,2,opt,name=is_inbound_enabled,json=isInboundEnabled,proto3" json:"is_inbound_enabled,omitempty"`
	IsOutboundEnabled            bool                          `protobuf:"varint,3,opt,name=is_outbound_enabled,json=isOutboundEnabled,proto3" json:"is_outbound_enabled,omitempty"`
	GasPriceIncreaseFlags        *GasPriceIncreaseFlags        `protobuf:"bytes,4,opt,name=gas_price_increase_flags,json=gasPriceIncreaseFlags,proto3" json:"gas_price_increase_flags,omitempty"`
	BlockHeaderVerificationFlags *BlockHeaderVerificationFlags `protobuf:"bytes,5,opt,name=block_header_verification_flags,json=blockHeaderVerificationFlags,proto3" json:"block_header_verification_flags,omitempty"`
}

func (m *MsgUpsertCrosschainFlags) Reset()         { *m = MsgUpsertCrosschainFlags{} }
func (m *MsgUpsertCrosschainFlags) String() string { return proto.CompactTextString(m) }
func (*MsgUpsertCrosschainFlags) ProtoMessage()    {}
func (*MsgUpsertCrosschainFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{12}
}
func (m *MsgUpsertCrosschainFlags) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpsertCrosschainFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpsertCrosschainFlags.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpsertCrosschainFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpsertCrosschainFlags.Merge(m, src)
}
func (m *MsgUpsertCrosschainFlags) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpsertCrosschainFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpsertCrosschainFlags.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpsertCrosschainFlags proto.InternalMessageInfo

func (m *MsgUpsertCrosschainFlags) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpsertCrosschainFlags) GetIsInboundEnabled() bool {
	if m != nil {
		return m.IsInboundEnabled
	}
	return false
}

func (m *MsgUpsertCrosschainFlags) GetIsOutboundEnabled() bool {
	if m != nil {
		return m.IsOutboundEnabled
	}
	return false
}

func (m *MsgUpsertCrosschainFlags) GetGasPriceIncreaseFlags() *GasPriceIncreaseFlags {
	if m != nil {
		return m.GasPriceIncreaseFlags
	}
	return nil
}

func (m *MsgUpsertCrosschainFlags) GetBlockHeaderVerificationFlags() *BlockHeaderVerificationFlags {
	if m != nil {
		return m.BlockHeaderVerificationFlags
	}
	return nil
}

// MsgUpsertCrosschainFlagsResponse represents the response to upsert crosschain
// flags
type MsgUpsertCrosschainFlagsResponse struct {
}

func (m *MsgUpsertCrosschainFlagsResponse) Reset()         { *m = MsgUpsertCrosschainFlagsResponse{} }
func (m *MsgUpsertCrosschainFlagsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpsertCrosschainFlagsResponse) ProtoMessage()    {}
func (*MsgUpsertCrosschainFlagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{13}
}
func (m *MsgUpsertCrosschainFlagsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpsertCrosschainFlagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpsertCrosschainFlagsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpsertCrosschainFlagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpsertCrosschainFlagsResponse.Merge(m, src)
}
func (m *MsgUpsertCrosschainFlagsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpsertCrosschainFlagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpsertCrosschainFlagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpsertCrosschainFlagsResponse proto.InternalMessageInfo

// MsgUpdateKeygen represents the message to update keygen
type MsgUpdateKeygen struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Block  int64  `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *MsgUpdateKeygen) Reset()         { *m = MsgUpdateKeygen{} }
func (m *MsgUpdateKeygen) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateKeygen) ProtoMessage()    {}
func (*MsgUpdateKeygen) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{14}
}
func (m *MsgUpdateKeygen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateKeygen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateKeygen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateKeygen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateKeygen.Merge(m, src)
}
func (m *MsgUpdateKeygen) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateKeygen) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateKeygen.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateKeygen proto.InternalMessageInfo

func (m *MsgUpdateKeygen) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateKeygen) GetBlock() int64 {
	if m != nil {
		return m.Block
	}
	return 0
}

// MsgUpdateKeygenResponse represents the response to update keygen
type MsgUpdateKeygenResponse struct {
}

func (m *MsgUpdateKeygenResponse) Reset()         { *m = MsgUpdateKeygenResponse{} }
func (m *MsgUpdateKeygenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateKeygenResponse) ProtoMessage()    {}
func (*MsgUpdateKeygenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{15}
}
func (m *MsgUpdateKeygenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateKeygenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateKeygenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateKeygenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateKeygenResponse.Merge(m, src)
}
func (m *MsgUpdateKeygenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateKeygenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateKeygenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateKeygenResponse proto.InternalMessageInfo

// MsgResetChainNonces represents the message to reset chain nonces
type MsgResetChainNonces struct {
	Signer         string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	ChainId        int64  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ChainNonceLow  int64  `protobuf:"varint,3,opt,name=chain_nonce_low,json=chainNonceLow,proto3" json:"chain_nonce_low,omitempty"`
	ChainNonceHigh int64  `protobuf:"varint,4,opt,name=chain_nonce_high,json=chainNonceHigh,proto3" json:"chain_nonce_high,omitempty"`
}

func (m *MsgResetChainNonces) Reset()         { *m = MsgResetChainNonces{} }
func (m *MsgResetChainNonces) String() string { return proto.CompactTextString(m) }
func (*MsgResetChainNonces) ProtoMessage()    {}
func (*MsgResetChainNonces) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{16}
}
func (m *MsgResetChainNonces) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgResetChainNonces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgResetChainNonces.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgResetChainNonces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgResetChainNonces.Merge(m, src)
}
func (m *MsgResetChainNonces) XXX_Size() int {
	return m.Size()
}
func (m *MsgResetChainNonces) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgResetChainNonces.DiscardUnknown(m)
}

var xxx_messageInfo_MsgResetChainNonces proto.InternalMessageInfo

func (m *MsgResetChainNonces) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgResetChainNonces) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgResetChainNonces) GetChainNonceLow() int64 {
	if m != nil {
		return m.ChainNonceLow
	}
	return 0
}

func (m *MsgResetChainNonces) GetChainNonceHigh() int64 {
	if m != nil {
		return m.ChainNonceHigh
	}
	return 0
}

// MsgResetChainNoncesResponse represents the response to reset chain nonces
type MsgResetChainNoncesResponse struct {
}

func (m *MsgResetChainNoncesResponse) Reset()         { *m = MsgResetChainNoncesResponse{} }
func (m *MsgResetChainNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgResetChainNoncesResponse) ProtoMessage()    {}
func (*MsgResetChainNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{17}
}
func (m *MsgResetChainNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgResetChainNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgResetChainNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgResetChainNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgResetChainNoncesResponse.Merge(m, src)
}
func (m *MsgResetChainNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgResetChainNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgResetChainNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgResetChainNoncesResponse proto.InternalMessageInfo

// MsgVoteTSS represents the message to vote for TSS
type MsgVoteTSS struct {
	TssPubkey        string               `protobuf:"bytes,1,opt,name=tss_pubkey,json=tssPubkey,proto3" json:"tss_pubkey,omitempty"`
	KeygenPellHeight int64                `protobuf:"varint,2,opt,name=keygen_pell_height,json=keygenPellHeight,proto3" json:"keygen_pell_height,omitempty"`
	Status           chains.ReceiveStatus `protobuf:"varint,3,opt,name=status,proto3,enum=pkg.chains.ReceiveStatus" json:"status,omitempty"`
	Signer           string               `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgVoteTSS) Reset()         { *m = MsgVoteTSS{} }
func (m *MsgVoteTSS) String() string { return proto.CompactTextString(m) }
func (*MsgVoteTSS) ProtoMessage()    {}
func (*MsgVoteTSS) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{18}
}
func (m *MsgVoteTSS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteTSS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteTSS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteTSS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteTSS.Merge(m, src)
}
func (m *MsgVoteTSS) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteTSS) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteTSS.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteTSS proto.InternalMessageInfo

func (m *MsgVoteTSS) GetTssPubkey() string {
	if m != nil {
		return m.TssPubkey
	}
	return ""
}

func (m *MsgVoteTSS) GetKeygenPellHeight() int64 {
	if m != nil {
		return m.KeygenPellHeight
	}
	return 0
}

func (m *MsgVoteTSS) GetStatus() chains.ReceiveStatus {
	if m != nil {
		return m.Status
	}
	return chains.ReceiveStatus_CREATED
}

func (m *MsgVoteTSS) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgVoteTSSResponse represents the response to vote for TSS
type MsgVoteTSSResponse struct {
	BallotCreated bool `protobuf:"varint,1,opt,name=ballot_created,json=ballotCreated,proto3" json:"ballot_created,omitempty"`
	VoteFinalized bool `protobuf:"varint,2,opt,name=vote_finalized,json=voteFinalized,proto3" json:"vote_finalized,omitempty"`
	KeygenSuccess bool `protobuf:"varint,3,opt,name=keygen_success,json=keygenSuccess,proto3" json:"keygen_success,omitempty"`
}

func (m *MsgVoteTSSResponse) Reset()         { *m = MsgVoteTSSResponse{} }
func (m *MsgVoteTSSResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteTSSResponse) ProtoMessage()    {}
func (*MsgVoteTSSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{19}
}
func (m *MsgVoteTSSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteTSSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteTSSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteTSSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteTSSResponse.Merge(m, src)
}
func (m *MsgVoteTSSResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteTSSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteTSSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteTSSResponse proto.InternalMessageInfo

func (m *MsgVoteTSSResponse) GetBallotCreated() bool {
	if m != nil {
		return m.BallotCreated
	}
	return false
}

func (m *MsgVoteTSSResponse) GetVoteFinalized() bool {
	if m != nil {
		return m.VoteFinalized
	}
	return false
}

func (m *MsgVoteTSSResponse) GetKeygenSuccess() bool {
	if m != nil {
		return m.KeygenSuccess
	}
	return false
}

// TODO: remove this after the upgrade
// MsgDeleteBallot represents the message to delete a ballot
type MsgDeleteBallot struct {
	Signer      string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	BallotIndex string `protobuf:"bytes,2,opt,name=ballot_index,json=ballotIndex,proto3" json:"ballot_index,omitempty"`
}

func (m *MsgDeleteBallot) Reset()         { *m = MsgDeleteBallot{} }
func (m *MsgDeleteBallot) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteBallot) ProtoMessage()    {}
func (*MsgDeleteBallot) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{20}
}
func (m *MsgDeleteBallot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteBallot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteBallot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteBallot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteBallot.Merge(m, src)
}
func (m *MsgDeleteBallot) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteBallot) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteBallot.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteBallot proto.InternalMessageInfo

func (m *MsgDeleteBallot) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgDeleteBallot) GetBallotIndex() string {
	if m != nil {
		return m.BallotIndex
	}
	return ""
}

// TODO: remove this after the upgrade
// MsgDeleteBallotResponse represents the response to delete a ballot
type MsgDeleteBallotResponse struct {
}

func (m *MsgDeleteBallotResponse) Reset()         { *m = MsgDeleteBallotResponse{} }
func (m *MsgDeleteBallotResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteBallotResponse) ProtoMessage()    {}
func (*MsgDeleteBallotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5bacb8239055328, []int{21}
}
func (m *MsgDeleteBallotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteBallotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteBallotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteBallotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteBallotResponse.Merge(m, src)
}
func (m *MsgDeleteBallotResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteBallotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteBallotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteBallotResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateObserver)(nil), "relayer.MsgUpdateObserver")
	proto.RegisterType((*MsgUpdateObserverResponse)(nil), "relayer.MsgUpdateObserverResponse")
	proto.RegisterType((*MsgVoteBlockHeader)(nil), "relayer.MsgVoteBlockHeader")
	proto.RegisterType((*MsgVoteBlockHeaderResponse)(nil), "relayer.MsgVoteBlockHeaderResponse")
	proto.RegisterType((*MsgUpsertChainParams)(nil), "relayer.MsgUpsertChainParams")
	proto.RegisterType((*MsgUpsertChainParamsResponse)(nil), "relayer.MsgUpsertChainParamsResponse")
	proto.RegisterType((*MsgRemoveChainParams)(nil), "relayer.MsgRemoveChainParams")
	proto.RegisterType((*MsgRemoveChainParamsResponse)(nil), "relayer.MsgRemoveChainParamsResponse")
	proto.RegisterType((*MsgAddObserver)(nil), "relayer.MsgAddObserver")
	proto.RegisterType((*MsgAddObserverResponse)(nil), "relayer.MsgAddObserverResponse")
	proto.RegisterType((*MsgAddBlameVote)(nil), "relayer.MsgAddBlameVote")
	proto.RegisterType((*MsgAddBlameVoteResponse)(nil), "relayer.MsgAddBlameVoteResponse")
	proto.RegisterType((*MsgUpsertCrosschainFlags)(nil), "relayer.MsgUpsertCrosschainFlags")
	proto.RegisterType((*MsgUpsertCrosschainFlagsResponse)(nil), "relayer.MsgUpsertCrosschainFlagsResponse")
	proto.RegisterType((*MsgUpdateKeygen)(nil), "relayer.MsgUpdateKeygen")
	proto.RegisterType((*MsgUpdateKeygenResponse)(nil), "relayer.MsgUpdateKeygenResponse")
	proto.RegisterType((*MsgResetChainNonces)(nil), "relayer.MsgResetChainNonces")
	proto.RegisterType((*MsgResetChainNoncesResponse)(nil), "relayer.MsgResetChainNoncesResponse")
	proto.RegisterType((*MsgVoteTSS)(nil), "relayer.MsgVoteTSS")
	proto.RegisterType((*MsgVoteTSSResponse)(nil), "relayer.MsgVoteTSSResponse")
	proto.RegisterType((*MsgDeleteBallot)(nil), "relayer.MsgDeleteBallot")
	proto.RegisterType((*MsgDeleteBallotResponse)(nil), "relayer.MsgDeleteBallotResponse")
}

func init() { proto.RegisterFile("relayer/tx.proto", fileDescriptor_d5bacb8239055328) }

var fileDescriptor_d5bacb8239055328 = []byte{
	// 1286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcd, 0x4e, 0xe3, 0x56,
	0x14, 0xc6, 0x84, 0xe1, 0xe7, 0x06, 0x42, 0x30, 0x01, 0x82, 0x81, 0xc0, 0xa4, 0xa5, 0x62, 0xaa,
	0x69, 0x52, 0x32, 0x95, 0x2a, 0x4d, 0x57, 0x30, 0xd3, 0x01, 0xda, 0x61, 0x40, 0x0e, 0xa5, 0x9a,
	0x6e, 0xac, 0x1b, 0xfb, 0xc4, 0x71, 0x71, 0x7c, 0x23, 0x5f, 0x27, 0x90, 0x2e, 0xbb, 0xa8, 0x54,
	0x75, 0xd3, 0xb7, 0xe8, 0xb6, 0x7d, 0x84, 0xee, 0x66, 0xd7, 0x59, 0x76, 0xd5, 0x56, 0x50, 0xa9,
	0xaf, 0x51, 0xdd, 0x1f, 0x1b, 0x3b, 0x89, 0x99, 0xaa, 0xd2, 0xac, 0x1c, 0x9f, 0xef, 0xbb, 0xe7,
	0x9e, 0xff, 0xe3, 0xa0, 0xbc, 0x0f, 0x2e, 0xee, 0x83, 0x5f, 0x0d, 0xae, 0x2a, 0x1d, 0x9f, 0x04,
	0x44, 0x9d, 0x92, 0x12, 0x6d, 0xc5, 0x24, 0xb4, 0x4d, 0x68, 0xb5, 0x4d, 0xed, 0x6a, 0x6f, 0x97,
	0x3d, 0x04, 0x43, 0x2b, 0xd8, 0xc4, 0x26, 0xfc, 0x67, 0x95, 0xfd, 0x92, 0xd2, 0x95, 0xce, 0x85,
	0x5d, 0x35, 0x5b, 0xd8, 0xf1, 0xa8, 0x7c, 0xc4, 0x81, 0x8e, 0x4f, 0x48, 0x93, 0xca, 0x87, 0x04,
	0x16, 0xc3, 0xbb, 0x1b, 0x2e, 0x6e, 0x83, 0x14, 0x96, 0x42, 0xa1, 0xe9, 0x13, 0x4a, 0xb9, 0x22,
	0xa3, 0xe9, 0x62, 0x3b, 0x3c, 0x54, 0x08, 0xf1, 0x0e, 0xf6, 0x71, 0x3b, 0x94, 0x2e, 0x85, 0x52,
	0xf9, 0x14, 0xe2, 0xf2, 0x9f, 0x0a, 0x5a, 0x38, 0xa6, 0xf6, 0x17, 0x1d, 0x0b, 0x07, 0x70, 0xd2,
	0xa0, 0xe0, 0xf7, 0xc0, 0x57, 0x97, 0xd1, 0x24, 0x75, 0x6c, 0x0f, 0xfc, 0xa2, 0xb2, 0xa5, 0xec,
	0xcc, 0xe8, 0xf2, 0x4d, 0xfd, 0x10, 0x15, 0x88, 0x6b, 0x19, 0x44, 0xf2, 0x0c, 0x6c, 0x59, 0x3e,
	0x50, 0x5a, 0x1c, 0xe7, 0x2c, 0x95, 0xb8, 0x56, 0xa8, 0x62, 0x4f, 0x20, 0xec, 0x84, 0x07, 0x97,
	0xc3, 0x27, 0x32, 0xe2, 0x84, 0x07, 0x97, 0x83, 0x27, 0xf6, 0xd0, 0x5c, 0x97, 0x5b, 0x63, 0xf8,
	0x80, 0x29, 0xf1, 0x8a, 0x13, 0x5b, 0xca, 0x4e, 0xae, 0xb6, 0x5e, 0x09, 0x0d, 0xd7, 0xc5, 0x53,
	0x98, 0xac, 0x73, 0x8e, 0x3e, 0xdb, 0x8d, 0xbd, 0x3d, 0xce, 0x7e, 0xfb, 0xcf, 0xcf, 0xef, 0x4b,
	0x9b, 0xcb, 0x6b, 0x68, 0x75, 0xc8, 0x41, 0x1d, 0x68, 0x87, 0x78, 0x14, 0xca, 0xbf, 0x2a, 0x48,
	0x3d, 0xa6, 0xf6, 0x39, 0x09, 0x60, 0xdf, 0x25, 0xe6, 0xc5, 0x21, 0x60, 0x0b, 0x7c, 0x75, 0x15,
	0x4d, 0x8b, 0xb8, 0x3a, 0x16, 0x8f, 0x40, 0x46, 0x9f, 0xe2, 0xef, 0x47, 0x96, 0xba, 0x81, 0x50,
	0x83, 0x31, 0x8d, 0x16, 0xa6, 0x2d, 0xee, 0xf8, 0xac, 0x3e, 0xc3, 0x25, 0x87, 0x98, 0xb6, 0x58,
	0xe4, 0x5a, 0xe0, 0xd8, 0xad, 0x80, 0x7b, 0x98, 0xd1, 0xe5, 0x9b, 0xfa, 0x11, 0x93, 0x33, 0xdd,
	0xdc, 0x9d, 0x6c, 0x6d, 0xb9, 0xd2, 0xb9, 0xe0, 0xd5, 0xc2, 0x92, 0x2d, 0x6e, 0x7d, 0x8a, 0x03,
	0xbc, 0x3f, 0xf1, 0xea, 0x8f, 0xcd, 0x31, 0x5d, 0x72, 0x63, 0x79, 0xb8, 0x17, 0xcf, 0x43, 0xd2,
	0xc1, 0xaf, 0x91, 0x36, 0xec, 0x42, 0xe8, 0xa1, 0xba, 0x8d, 0x72, 0x0d, 0xec, 0xba, 0x24, 0x30,
	0x4c, 0x1f, 0x70, 0x00, 0xc2, 0xa1, 0x69, 0x7d, 0x4e, 0x48, 0x9f, 0x08, 0x21, 0xa3, 0xf5, 0x48,
	0x00, 0x46, 0xd3, 0xf1, 0xb0, 0xeb, 0x7c, 0x03, 0x16, 0x77, 0x6d, 0x5a, 0x9f, 0x63, 0xd2, 0x67,
	0xa1, 0xb0, 0x1c, 0xa0, 0x02, 0x0f, 0x26, 0x05, 0x3f, 0x78, 0xc2, 0x22, 0x72, 0xca, 0x6b, 0x2c,
	0xb5, 0x60, 0x3e, 0x46, 0xb3, 0x22, 0x90, 0xa2, 0x16, 0xb9, 0xd2, 0x6c, 0xad, 0x10, 0xe5, 0x32,
	0xa6, 0x43, 0xcf, 0x9a, 0xb7, 0x2f, 0x49, 0x0f, 0x4b, 0x68, 0x7d, 0xd4, 0xad, 0x51, 0x16, 0xcf,
	0xb9, 0x55, 0x3a, 0xb4, 0x49, 0x0f, 0xfe, 0x8b, 0x55, 0xf1, 0xf4, 0x8e, 0x27, 0xd2, 0x3b, 0xea,
	0xde, 0x21, 0xbd, 0xd1, 0xbd, 0xbf, 0x29, 0x28, 0x77, 0x4c, 0xed, 0x3d, 0xcb, 0x7a, 0x63, 0xe7,
	0x3c, 0x40, 0xf9, 0x94, 0xae, 0x99, 0x27, 0x03, 0x0d, 0xf0, 0x18, 0xad, 0x76, 0xc0, 0x75, 0x4d,
	0xd7, 0x01, 0x2f, 0x30, 0x6c, 0x1f, 0x7b, 0x01, 0x80, 0xd1, 0xe9, 0x36, 0x2e, 0xa0, 0x2f, 0xfb,
	0x66, 0xe5, 0x96, 0x70, 0x20, 0xf0, 0x53, 0x0e, 0xab, 0xbb, 0x68, 0x09, 0x5b, 0x96, 0xe1, 0x11,
	0x0b, 0x0c, 0x6c, 0x9a, 0xa4, 0xeb, 0x05, 0x06, 0xf1, 0xdc, 0x3e, 0xaf, 0xba, 0x69, 0x5d, 0xc5,
	0x96, 0xf5, 0x82, 0x58, 0xb0, 0x27, 0xa0, 0x13, 0xcf, 0xed, 0x27, 0x3d, 0x2e, 0xa2, 0xe5, 0xa4,
	0x43, 0x91, 0xaf, 0xdf, 0x29, 0x68, 0x5e, 0x40, 0xfb, 0x6c, 0x16, 0xb1, 0x72, 0xbb, 0xab, 0x4d,
	0x1e, 0xb1, 0x36, 0xc1, 0x6d, 0x30, 0x1c, 0xaf, 0x49, 0x64, 0xda, 0x73, 0x51, 0xda, 0xb9, 0x0a,
	0x59, 0xeb, 0x33, 0x9c, 0x77, 0xe4, 0x35, 0x49, 0x2c, 0x78, 0x99, 0xf4, 0x72, 0x5f, 0x45, 0x2b,
	0x03, 0x76, 0x44, 0x36, 0xfe, 0x3d, 0x8e, 0x8a, 0xb7, 0x85, 0x12, 0x4d, 0xc7, 0x67, 0x6c, 0x38,
	0xa6, 0x66, 0xe6, 0x21, 0x52, 0x1d, 0x6a, 0x38, 0x5e, 0x83, 0x74, 0x3d, 0xcb, 0x00, 0x0f, 0x37,
	0xdc, 0xa8, 0xfa, 0xf3, 0x0e, 0x3d, 0x12, 0xc0, 0xa7, 0x42, 0xae, 0x56, 0xd0, 0xa2, 0x43, 0x0d,
	0xd2, 0x0d, 0x92, 0xf4, 0x0c, 0xa7, 0x2f, 0x38, 0xf4, 0x44, 0x22, 0x21, 0xff, 0x4b, 0x54, 0xb4,
	0x31, 0x35, 0x3a, 0xbe, 0x63, 0xb2, 0x58, 0xb0, 0x1e, 0xa4, 0x20, 0xc6, 0xb5, 0x9c, 0x04, 0xa5,
	0x28, 0x2a, 0x07, 0x98, 0x9e, 0x32, 0xde, 0x91, 0xa4, 0x71, 0xbb, 0xf5, 0x25, 0x7b, 0x94, 0x58,
	0x75, 0xd1, 0xa6, 0x9c, 0x43, 0xbc, 0xdf, 0x8d, 0x1e, 0xf8, 0x4e, 0xd3, 0x31, 0x71, 0xe0, 0x10,
	0xb9, 0x0e, 0xf8, 0xcc, 0xc8, 0xd6, 0xb6, 0x63, 0x51, 0x8f, 0xc6, 0xc3, 0x79, 0x8c, 0x2d, 0xae,
	0x59, 0x6f, 0xdc, 0x81, 0x26, 0x33, 0x50, 0x46, 0x5b, 0x69, 0x51, 0x8e, 0x52, 0xf1, 0x9c, 0x57,
	0x8b, 0x98, 0xba, 0x9f, 0x43, 0xdf, 0x06, 0x2f, 0x35, 0x01, 0x05, 0x74, 0x8f, 0xdf, 0x2d, 0x5b,
	0x51, 0xbc, 0x8c, 0xca, 0x79, 0x5c, 0x5b, 0x74, 0xd1, 0x4f, 0x0a, 0x5a, 0xe4, 0x4d, 0x4a, 0x41,
	0xcc, 0x86, 0x17, 0xc4, 0x33, 0xe1, 0xff, 0xf4, 0xbe, 0xfa, 0x1e, 0x9a, 0x17, 0x90, 0xc7, 0x54,
	0x18, 0x2e, 0xb9, 0x94, 0x43, 0x7c, 0xce, 0x8c, 0x14, 0x3f, 0x27, 0x97, 0xea, 0x0e, 0xca, 0xc7,
	0x79, 0x2d, 0xc7, 0x6e, 0xf1, 0x5c, 0x66, 0xf4, 0xdc, 0x2d, 0xf1, 0xd0, 0xb1, 0x5b, 0x49, 0x27,
	0x36, 0xd0, 0xda, 0x08, 0x43, 0x23, 0x47, 0x7e, 0x51, 0x10, 0x92, 0x73, 0xfc, 0xac, 0x5e, 0x67,
	0x7b, 0x26, 0xa0, 0x34, 0x6c, 0x7b, 0xe1, 0xc3, 0x4c, 0x40, 0xa9, 0x6c, 0xf4, 0x87, 0x48, 0xbd,
	0xe0, 0x81, 0x30, 0xd8, 0x28, 0x30, 0xe4, 0xce, 0x11, 0x0e, 0xe5, 0x05, 0x72, 0x0a, 0xae, 0x7b,
	0x28, 0xb6, 0xcf, 0x2e, 0x9a, 0xa4, 0x01, 0x0e, 0xba, 0x62, 0xef, 0xe6, 0x6a, 0xab, 0x7c, 0xfb,
	0xc8, 0x6f, 0x10, 0x1d, 0x4c, 0x70, 0x7a, 0x50, 0xe7, 0x04, 0x5d, 0x12, 0x63, 0xf1, 0x9b, 0x48,
	0xef, 0xc5, 0xef, 0x6f, 0xd7, 0xe7, 0x59, 0xbd, 0xfe, 0x76, 0x76, 0x0e, 0xa3, 0x49, 0x57, 0x69,
	0xd7, 0x34, 0xc3, 0x8f, 0x87, 0x69, 0x7d, 0x4e, 0x48, 0xeb, 0x42, 0x58, 0x7e, 0xc9, 0x2b, 0xee,
	0x29, 0xb8, 0x10, 0xc0, 0x3e, 0xbf, 0x27, 0xb5, 0x06, 0xee, 0xa3, 0x59, 0x69, 0x9f, 0xe3, 0x59,
	0x70, 0x25, 0x07, 0x71, 0x56, 0xc8, 0x8e, 0x98, 0x68, 0x54, 0xf9, 0xc5, 0x55, 0x87, 0xae, 0xd6,
	0x7e, 0x98, 0x42, 0x99, 0x63, 0x6a, 0xab, 0x07, 0x28, 0x1b, 0x5f, 0x03, 0x2b, 0x51, 0xd3, 0x25,
	0xc7, 0xa9, 0xb6, 0x99, 0x02, 0x44, 0xb1, 0x3b, 0x45, 0xb9, 0x81, 0x8f, 0x31, 0x2d, 0x7e, 0x24,
	0x89, 0x69, 0xe5, 0x74, 0x2c, 0xd2, 0xf8, 0x12, 0x2d, 0x0c, 0x2f, 0xec, 0x8d, 0xe4, 0xc1, 0x01,
	0x58, 0xdb, 0xbe, 0x13, 0x8e, 0xab, 0x1e, 0xde, 0xba, 0x09, 0xd5, 0x43, 0x70, 0x52, 0x75, 0xea,
	0x6e, 0x55, 0x3f, 0x43, 0xb3, 0x89, 0x5d, 0x53, 0x1c, 0x08, 0x5c, 0x84, 0x68, 0x5b, 0x69, 0x48,
	0xa4, 0x0b, 0xd0, 0xd2, 0xe8, 0x9d, 0x70, 0x7f, 0x84, 0x9b, 0x49, 0x8a, 0xf6, 0xe0, 0x8d, 0x94,
	0xb8, 0xc9, 0x89, 0x81, 0x57, 0x1c, 0x4e, 0x8e, 0x40, 0x92, 0x26, 0x8f, 0x1a, 0x6b, 0xea, 0x39,
	0xca, 0x0f, 0x8d, 0xb4, 0xf5, 0x64, 0xe4, 0x92, 0xa8, 0xf6, 0xee, 0x5d, 0x68, 0xa4, 0xb7, 0x8e,
	0xe6, 0x07, 0x3f, 0x76, 0xd7, 0xe2, 0x07, 0x07, 0x40, 0xed, 0x9d, 0x3b, 0xc0, 0x48, 0xe9, 0x27,
	0x68, 0x2a, 0x1c, 0x5b, 0x8b, 0x83, 0xfc, 0xb3, 0x7a, 0x5d, 0x5b, 0x1b, 0x21, 0x8c, 0x47, 0x2d,
	0xd1, 0xb4, 0x89, 0xa8, 0xc5, 0x91, 0x64, 0xd4, 0x46, 0x75, 0xe3, 0xfe, 0xe1, 0xab, 0xeb, 0x92,
	0xf2, 0xfa, 0xba, 0xa4, 0xfc, 0x75, 0x5d, 0x52, 0x7e, 0xbc, 0x29, 0x8d, 0xbd, 0xbe, 0x29, 0x8d,
	0xfd, 0x7e, 0x53, 0x1a, 0xfb, 0xaa, 0x62, 0x3b, 0x41, 0xab, 0xdb, 0xa8, 0x98, 0xa4, 0x5d, 0x65,
	0x13, 0xf3, 0x03, 0x9e, 0x3f, 0xfe, 0xd3, 0x24, 0x3e, 0x54, 0xaf, 0xaa, 0xd1, 0xdf, 0xbc, 0x7e,
	0x07, 0x68, 0x63, 0x92, 0xff, 0x3d, 0x7a, 0xf4, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x22, 0x57,
	0xed, 0x9e, 0xfe, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// AddObserver adds an observer
	AddObserver(ctx context.Context, in *MsgAddObserver, opts ...grpc.CallOption) (*MsgAddObserverResponse, error)
	// UpdateObserver updates an observer
	UpdateObserver(ctx context.Context, in *MsgUpdateObserver, opts ...grpc.CallOption) (*MsgUpdateObserverResponse, error)
	// UpsertChainParams upserts chain parameters
	UpsertChainParams(ctx context.Context, in *MsgUpsertChainParams, opts ...grpc.CallOption) (*MsgUpsertChainParamsResponse, error)
	// RemoveChainParams removes chain parameters
	RemoveChainParams(ctx context.Context, in *MsgRemoveChainParams, opts ...grpc.CallOption) (*MsgRemoveChainParamsResponse, error)
	// AddBlameVote adds a blame vote
	AddBlameVote(ctx context.Context, in *MsgAddBlameVote, opts ...grpc.CallOption) (*MsgAddBlameVoteResponse, error)
	// UpsertCrosschainFlags upserts crosschain flags
	UpsertCrosschainFlags(ctx context.Context, in *MsgUpsertCrosschainFlags, opts ...grpc.CallOption) (*MsgUpsertCrosschainFlagsResponse, error)
	// UpdateKeygen updates keygen
	UpdateKeygen(ctx context.Context, in *MsgUpdateKeygen, opts ...grpc.CallOption) (*MsgUpdateKeygenResponse, error)
	// ResetChainNonces resets chain nonces
	ResetChainNonces(ctx context.Context, in *MsgResetChainNonces, opts ...grpc.CallOption) (*MsgResetChainNoncesResponse, error)
	// VoteBlockHeader votes for a block header
	VoteBlockHeader(ctx context.Context, in *MsgVoteBlockHeader, opts ...grpc.CallOption) (*MsgVoteBlockHeaderResponse, error)
	// VoteTSS votes for TSS
	VoteTSS(ctx context.Context, in *MsgVoteTSS, opts ...grpc.CallOption) (*MsgVoteTSSResponse, error)
	// DeleteBallot deletes a ballot
	// NOTE: This is a temporary maintenance-only operation that will be removed
	// after the next upgrade
	DeleteBallot(ctx context.Context, in *MsgDeleteBallot, opts ...grpc.CallOption) (*MsgDeleteBallotResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddObserver(ctx context.Context, in *MsgAddObserver, opts ...grpc.CallOption) (*MsgAddObserverResponse, error) {
	out := new(MsgAddObserverResponse)
	err := c.cc.Invoke(ctx, "/relayer.Msg/AddObserver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateObserver(ctx context.Context, in *MsgUpdateObserver, opts ...grpc.CallOption) (*MsgUpdateObserverResponse, error) {
	out := new(MsgUpdateObserverResponse)
	err := c.cc.Invoke(ctx, "/relayer.Msg/UpdateObserver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpsertChainParams(ctx context.Context, in *MsgUpsertChainParams, opts ...grpc.CallOption) (*MsgUpsertChainParamsResponse, error) {
	out := new(MsgUpsertChainParamsResponse)
	err := c.cc.Invoke(ctx, "/relayer.Msg/UpsertChainParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveChainParams(ctx context.Context, in *MsgRemoveChainParams, opts ...grpc.CallOption) (*MsgRemoveChainParamsResponse, error) {
	out := new(MsgRemoveChainParamsResponse)
	err := c.cc.Invoke(ctx, "/relayer.Msg/RemoveChainParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddBlameVote(ctx context.Context, in *MsgAddBlameVote, opts ...grpc.CallOption) (*MsgAddBlameVoteResponse, error) {
	out := new(MsgAddBlameVoteResponse)
	err := c.cc.Invoke(ctx, "/relayer.Msg/AddBlameVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpsertCrosschainFlags(ctx context.Context, in *MsgUpsertCrosschainFlags, opts ...grpc.CallOption) (*MsgUpsertCrosschainFlagsResponse, error) {
	out := new(MsgUpsertCrosschainFlagsResponse)
	err := c.cc.Invoke(ctx, "/relayer.Msg/UpsertCrosschainFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateKeygen(ctx context.Context, in *MsgUpdateKeygen, opts ...grpc.CallOption) (*MsgUpdateKeygenResponse, error) {
	out := new(MsgUpdateKeygenResponse)
	err := c.cc.Invoke(ctx, "/relayer.Msg/UpdateKeygen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ResetChainNonces(ctx context.Context, in *MsgResetChainNonces, opts ...grpc.CallOption) (*MsgResetChainNoncesResponse, error) {
	out := new(MsgResetChainNoncesResponse)
	err := c.cc.Invoke(ctx, "/relayer.Msg/ResetChainNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteBlockHeader(ctx context.Context, in *MsgVoteBlockHeader, opts ...grpc.CallOption) (*MsgVoteBlockHeaderResponse, error) {
	out := new(MsgVoteBlockHeaderResponse)
	err := c.cc.Invoke(ctx, "/relayer.Msg/VoteBlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteTSS(ctx context.Context, in *MsgVoteTSS, opts ...grpc.CallOption) (*MsgVoteTSSResponse, error) {
	out := new(MsgVoteTSSResponse)
	err := c.cc.Invoke(ctx, "/relayer.Msg/VoteTSS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteBallot(ctx context.Context, in *MsgDeleteBallot, opts ...grpc.CallOption) (*MsgDeleteBallotResponse, error) {
	out := new(MsgDeleteBallotResponse)
	err := c.cc.Invoke(ctx, "/relayer.Msg/DeleteBallot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// AddObserver adds an observer
	AddObserver(context.Context, *MsgAddObserver) (*MsgAddObserverResponse, error)
	// UpdateObserver updates an observer
	UpdateObserver(context.Context, *MsgUpdateObserver) (*MsgUpdateObserverResponse, error)
	// UpsertChainParams upserts chain parameters
	UpsertChainParams(context.Context, *MsgUpsertChainParams) (*MsgUpsertChainParamsResponse, error)
	// RemoveChainParams removes chain parameters
	RemoveChainParams(context.Context, *MsgRemoveChainParams) (*MsgRemoveChainParamsResponse, error)
	// AddBlameVote adds a blame vote
	AddBlameVote(context.Context, *MsgAddBlameVote) (*MsgAddBlameVoteResponse, error)
	// UpsertCrosschainFlags upserts crosschain flags
	UpsertCrosschainFlags(context.Context, *MsgUpsertCrosschainFlags) (*MsgUpsertCrosschainFlagsResponse, error)
	// UpdateKeygen updates keygen
	UpdateKeygen(context.Context, *MsgUpdateKeygen) (*MsgUpdateKeygenResponse, error)
	// ResetChainNonces resets chain nonces
	ResetChainNonces(context.Context, *MsgResetChainNonces) (*MsgResetChainNoncesResponse, error)
	// VoteBlockHeader votes for a block header
	VoteBlockHeader(context.Context, *MsgVoteBlockHeader) (*MsgVoteBlockHeaderResponse, error)
	// VoteTSS votes for TSS
	VoteTSS(context.Context, *MsgVoteTSS) (*MsgVoteTSSResponse, error)
	// DeleteBallot deletes a ballot
	// NOTE: This is a temporary maintenance-only operation that will be removed
	// after the next upgrade
	DeleteBallot(context.Context, *MsgDeleteBallot) (*MsgDeleteBallotResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddObserver(ctx context.Context, req *MsgAddObserver) (*MsgAddObserverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddObserver not implemented")
}
func (*UnimplementedMsgServer) UpdateObserver(ctx context.Context, req *MsgUpdateObserver) (*MsgUpdateObserverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObserver not implemented")
}
func (*UnimplementedMsgServer) UpsertChainParams(ctx context.Context, req *MsgUpsertChainParams) (*MsgUpsertChainParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertChainParams not implemented")
}
func (*UnimplementedMsgServer) RemoveChainParams(ctx context.Context, req *MsgRemoveChainParams) (*MsgRemoveChainParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveChainParams not implemented")
}
func (*UnimplementedMsgServer) AddBlameVote(ctx context.Context, req *MsgAddBlameVote) (*MsgAddBlameVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlameVote not implemented")
}
func (*UnimplementedMsgServer) UpsertCrosschainFlags(ctx context.Context, req *MsgUpsertCrosschainFlags) (*MsgUpsertCrosschainFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCrosschainFlags not implemented")
}
func (*UnimplementedMsgServer) UpdateKeygen(ctx context.Context, req *MsgUpdateKeygen) (*MsgUpdateKeygenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeygen not implemented")
}
func (*UnimplementedMsgServer) ResetChainNonces(ctx context.Context, req *MsgResetChainNonces) (*MsgResetChainNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetChainNonces not implemented")
}
func (*UnimplementedMsgServer) VoteBlockHeader(ctx context.Context, req *MsgVoteBlockHeader) (*MsgVoteBlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBlockHeader not implemented")
}
func (*UnimplementedMsgServer) VoteTSS(ctx context.Context, req *MsgVoteTSS) (*MsgVoteTSSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTSS not implemented")
}
func (*UnimplementedMsgServer) DeleteBallot(ctx context.Context, req *MsgDeleteBallot) (*MsgDeleteBallotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBallot not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddObserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddObserver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddObserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Msg/AddObserver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddObserver(ctx, req.(*MsgAddObserver))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateObserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateObserver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateObserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Msg/UpdateObserver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateObserver(ctx, req.(*MsgUpdateObserver))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpsertChainParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpsertChainParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpsertChainParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Msg/UpsertChainParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpsertChainParams(ctx, req.(*MsgUpsertChainParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveChainParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveChainParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveChainParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Msg/RemoveChainParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveChainParams(ctx, req.(*MsgRemoveChainParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddBlameVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddBlameVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddBlameVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Msg/AddBlameVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddBlameVote(ctx, req.(*MsgAddBlameVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpsertCrosschainFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpsertCrosschainFlags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpsertCrosschainFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Msg/UpsertCrosschainFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpsertCrosschainFlags(ctx, req.(*MsgUpsertCrosschainFlags))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateKeygen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateKeygen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateKeygen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Msg/UpdateKeygen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateKeygen(ctx, req.(*MsgUpdateKeygen))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ResetChainNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgResetChainNonces)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ResetChainNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Msg/ResetChainNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ResetChainNonces(ctx, req.(*MsgResetChainNonces))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteBlockHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Msg/VoteBlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteBlockHeader(ctx, req.(*MsgVoteBlockHeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteTSS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteTSS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteTSS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Msg/VoteTSS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteTSS(ctx, req.(*MsgVoteTSS))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteBallot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteBallot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteBallot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.Msg/DeleteBallot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteBallot(ctx, req.(*MsgDeleteBallot))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relayer.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddObserver",
			Handler:    _Msg_AddObserver_Handler,
		},
		{
			MethodName: "UpdateObserver",
			Handler:    _Msg_UpdateObserver_Handler,
		},
		{
			MethodName: "UpsertChainParams",
			Handler:    _Msg_UpsertChainParams_Handler,
		},
		{
			MethodName: "RemoveChainParams",
			Handler:    _Msg_RemoveChainParams_Handler,
		},
		{
			MethodName: "AddBlameVote",
			Handler:    _Msg_AddBlameVote_Handler,
		},
		{
			MethodName: "UpsertCrosschainFlags",
			Handler:    _Msg_UpsertCrosschainFlags_Handler,
		},
		{
			MethodName: "UpdateKeygen",
			Handler:    _Msg_UpdateKeygen_Handler,
		},
		{
			MethodName: "ResetChainNonces",
			Handler:    _Msg_ResetChainNonces_Handler,
		},
		{
			MethodName: "VoteBlockHeader",
			Handler:    _Msg_VoteBlockHeader_Handler,
		},
		{
			MethodName: "VoteTSS",
			Handler:    _Msg_VoteTSS_Handler,
		},
		{
			MethodName: "DeleteBallot",
			Handler:    _Msg_DeleteBallot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relayer/tx.proto",
}

func (m *MsgUpdateObserver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateObserver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateObserver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateReason != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UpdateReason))
		i--
		dAtA[i] = 0x20
	}
	if len(m.NewObserverAddress) > 0 {
		i -= len(m.NewObserverAddress)
		copy(dAtA[i:], m.NewObserverAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewObserverAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OldObserverAddress) > 0 {
		i -= len(m.OldObserverAddress)
		copy(dAtA[i:], m.OldObserverAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OldObserverAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateObserverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateObserverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateObserverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Height != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteBlockHeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteBlockHeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteBlockHeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VoteFinalized {
		i--
		if m.VoteFinalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BallotCreated {
		i--
		if m.BallotCreated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpsertChainParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpsertChainParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpsertChainParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainParams != nil {
		{
			size, err := m.ChainParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpsertChainParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpsertChainParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpsertChainParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveChainParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveChainParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveChainParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveChainParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveChainParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveChainParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddObserver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddObserver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddObserver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddNodeAccountOnly {
		i--
		if m.AddNodeAccountOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.PellclientGranteePubkey) > 0 {
		i -= len(m.PellclientGranteePubkey)
		copy(dAtA[i:], m.PellclientGranteePubkey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PellclientGranteePubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ObserverAddress) > 0 {
		i -= len(m.ObserverAddress)
		copy(dAtA[i:], m.ObserverAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObserverAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddObserverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddObserverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddObserverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddBlameVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddBlameVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddBlameVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.BlameInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddBlameVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddBlameVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddBlameVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpsertCrosschainFlags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpsertCrosschainFlags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpsertCrosschainFlags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeaderVerificationFlags != nil {
		{
			size, err := m.BlockHeaderVerificationFlags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.GasPriceIncreaseFlags != nil {
		{
			size, err := m.GasPriceIncreaseFlags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IsOutboundEnabled {
		i--
		if m.IsOutboundEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsInboundEnabled {
		i--
		if m.IsInboundEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpsertCrosschainFlagsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpsertCrosschainFlagsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpsertCrosschainFlagsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateKeygen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateKeygen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateKeygen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateKeygenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateKeygenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateKeygenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgResetChainNonces) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgResetChainNonces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgResetChainNonces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainNonceHigh != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainNonceHigh))
		i--
		dAtA[i] = 0x20
	}
	if m.ChainNonceLow != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainNonceLow))
		i--
		dAtA[i] = 0x18
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgResetChainNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgResetChainNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgResetChainNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteTSS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteTSS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteTSS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.KeygenPellHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.KeygenPellHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TssPubkey) > 0 {
		i -= len(m.TssPubkey)
		copy(dAtA[i:], m.TssPubkey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TssPubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteTSSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteTSSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteTSSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeygenSuccess {
		i--
		if m.KeygenSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.VoteFinalized {
		i--
		if m.VoteFinalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BallotCreated {
		i--
		if m.BallotCreated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteBallot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteBallot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteBallot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BallotIndex) > 0 {
		i -= len(m.BallotIndex)
		copy(dAtA[i:], m.BallotIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BallotIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteBallotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteBallotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteBallotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateObserver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OldObserverAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewObserverAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.UpdateReason != 0 {
		n += 1 + sovTx(uint64(m.UpdateReason))
	}
	return n
}

func (m *MsgUpdateObserverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovTx(uint64(m.Height))
	}
	l = m.Header.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVoteBlockHeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BallotCreated {
		n += 2
	}
	if m.VoteFinalized {
		n += 2
	}
	return n
}

func (m *MsgUpsertChainParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainParams != nil {
		l = m.ChainParams.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpsertChainParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveChainParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	return n
}

func (m *MsgRemoveChainParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddObserver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ObserverAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PellclientGranteePubkey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AddNodeAccountOnly {
		n += 2
	}
	return n
}

func (m *MsgAddObserverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddBlameVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = m.BlameInfo.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddBlameVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpsertCrosschainFlags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IsInboundEnabled {
		n += 2
	}
	if m.IsOutboundEnabled {
		n += 2
	}
	if m.GasPriceIncreaseFlags != nil {
		l = m.GasPriceIncreaseFlags.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BlockHeaderVerificationFlags != nil {
		l = m.BlockHeaderVerificationFlags.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpsertCrosschainFlagsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateKeygen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Block != 0 {
		n += 1 + sovTx(uint64(m.Block))
	}
	return n
}

func (m *MsgUpdateKeygenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgResetChainNonces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	if m.ChainNonceLow != 0 {
		n += 1 + sovTx(uint64(m.ChainNonceLow))
	}
	if m.ChainNonceHigh != 0 {
		n += 1 + sovTx(uint64(m.ChainNonceHigh))
	}
	return n
}

func (m *MsgResetChainNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteTSS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TssPubkey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.KeygenPellHeight != 0 {
		n += 1 + sovTx(uint64(m.KeygenPellHeight))
	}
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVoteTSSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BallotCreated {
		n += 2
	}
	if m.VoteFinalized {
		n += 2
	}
	if m.KeygenSuccess {
		n += 2
	}
	return n
}

func (m *MsgDeleteBallot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BallotIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteBallotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateObserver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateObserver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateObserver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldObserverAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldObserverAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewObserverAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewObserverAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateReason", wireType)
			}
			m.UpdateReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateReason |= RelayerUpdateReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateObserverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateObserverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateObserverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteBlockHeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteBlockHeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteBlockHeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotCreated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BallotCreated = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteFinalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VoteFinalized = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpsertChainParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpsertChainParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpsertChainParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainParams == nil {
				m.ChainParams = &ChainParams{}
			}
			if err := m.ChainParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpsertChainParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpsertChainParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpsertChainParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveChainParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveChainParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveChainParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveChainParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveChainParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveChainParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddObserver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddObserver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddObserver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObserverAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObserverAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PellclientGranteePubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PellclientGranteePubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddNodeAccountOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddNodeAccountOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddObserverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddObserverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddObserverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddBlameVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddBlameVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddBlameVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlameInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddBlameVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddBlameVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddBlameVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpsertCrosschainFlags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpsertCrosschainFlags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpsertCrosschainFlags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInboundEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInboundEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOutboundEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOutboundEnabled = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPriceIncreaseFlags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GasPriceIncreaseFlags == nil {
				m.GasPriceIncreaseFlags = &GasPriceIncreaseFlags{}
			}
			if err := m.GasPriceIncreaseFlags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeaderVerificationFlags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockHeaderVerificationFlags == nil {
				m.BlockHeaderVerificationFlags = &BlockHeaderVerificationFlags{}
			}
			if err := m.BlockHeaderVerificationFlags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpsertCrosschainFlagsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpsertCrosschainFlagsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpsertCrosschainFlagsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateKeygen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateKeygen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateKeygen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateKeygenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateKeygenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateKeygenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgResetChainNonces) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgResetChainNonces: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgResetChainNonces: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainNonceLow", wireType)
			}
			m.ChainNonceLow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainNonceLow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainNonceHigh", wireType)
			}
			m.ChainNonceHigh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainNonceHigh |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgResetChainNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgResetChainNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgResetChainNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteTSS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteTSS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteTSS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TssPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TssPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeygenPellHeight", wireType)
			}
			m.KeygenPellHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeygenPellHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= chains.ReceiveStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteTSSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteTSSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteTSSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotCreated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BallotCreated = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteFinalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VoteFinalized = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeygenSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeygenSuccess = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteBallot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteBallot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteBallot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BallotIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteBallotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteBallotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteBallotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
