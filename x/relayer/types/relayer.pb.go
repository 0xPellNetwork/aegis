// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: relayer/relayer.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	chains "github.com/pell-chain/pellcore/pkg/chains"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// observation type
type ObservationType int32

const (
	// EMPTY_OBSERVER_TYPE is the default value for the observer type
	ObservationType_EMPTY_OBSERVER_TYPE ObservationType = 0
	// IN_BOUND_TX is the observer type for inbound transactions
	ObservationType_IN_BOUND_TX ObservationType = 1
	// OUT_BOUND_TX is the observer type for outbound transactions
	ObservationType_OUT_BOUND_TX ObservationType = 2
	// TSS_KEY_GEN is the observer type for TSS key generation
	ObservationType_TSS_KEY_GEN ObservationType = 3
	// TSS_KEY_SIGN is the observer type for TSS key signing
	ObservationType_TSS_KEY_SIGN ObservationType = 4
	// IN_BOUND_BLOCK is the observer type for inbound blocks
	ObservationType_IN_BOUND_BLOCK ObservationType = 5
	// PELL_TOKEN_RECHARGE is the observer type for Pell token recharge
	ObservationType_PELL_TOKEN_RECHARGE ObservationType = 6
	// GAS_TOKEN_RECHARGE is the observer type for gas token recharge
	ObservationType_GAS_TOKEN_RECHARGE ObservationType = 7
)

var ObservationType_name = map[int32]string{
	0: "EMPTY_OBSERVER_TYPE",
	1: "IN_BOUND_TX",
	2: "OUT_BOUND_TX",
	3: "TSS_KEY_GEN",
	4: "TSS_KEY_SIGN",
	5: "IN_BOUND_BLOCK",
	6: "PELL_TOKEN_RECHARGE",
	7: "GAS_TOKEN_RECHARGE",
}

var ObservationType_value = map[string]int32{
	"EMPTY_OBSERVER_TYPE": 0,
	"IN_BOUND_TX":         1,
	"OUT_BOUND_TX":        2,
	"TSS_KEY_GEN":         3,
	"TSS_KEY_SIGN":        4,
	"IN_BOUND_BLOCK":      5,
	"PELL_TOKEN_RECHARGE": 6,
	"GAS_TOKEN_RECHARGE":  7,
}

func (x ObservationType) String() string {
	return proto.EnumName(ObservationType_name, int32(x))
}

func (ObservationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66800904a3ba52be, []int{0}
}

// relayer update reason
type RelayerUpdateReason int32

const (
	// UNDEFINED is the default value for the relayer update reason
	RelayerUpdateReason_UNDEFINED RelayerUpdateReason = 0
	// TOMBSTONED is the relayer update reason for tombstoned relayers
	RelayerUpdateReason_TOMBSTONED RelayerUpdateReason = 1
	// ADMIN_UPDATE is the relayer update reason for admin updates
	RelayerUpdateReason_ADMIN_UPDATE RelayerUpdateReason = 2
)

var RelayerUpdateReason_name = map[int32]string{
	0: "UNDEFINED",
	1: "TOMBSTONED",
	2: "ADMIN_UPDATE",
}

var RelayerUpdateReason_value = map[string]int32{
	"UNDEFINED":    0,
	"TOMBSTONED":   1,
	"ADMIN_UPDATE": 2,
}

func (x RelayerUpdateReason) String() string {
	return proto.EnumName(RelayerUpdateReason_name, int32(x))
}

func (RelayerUpdateReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66800904a3ba52be, []int{1}
}

// RelayerMapper is the mapper for relayers
type RelayerMapper struct {
	// index is the index of the relayer mapper
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	// relayer_chain is the chain of the relayer mapper
	RelayerChain *chains.Chain `protobuf:"bytes,2,opt,name=relayer_chain,json=relayerChain,proto3" json:"relayer_chain,omitempty"`
	// relayer_list is the list of relayers
	RelayerList []string `protobuf:"bytes,3,rep,name=relayer_list,json=relayerList,proto3" json:"relayer_list,omitempty"`
}

func (m *RelayerMapper) Reset()         { *m = RelayerMapper{} }
func (m *RelayerMapper) String() string { return proto.CompactTextString(m) }
func (*RelayerMapper) ProtoMessage()    {}
func (*RelayerMapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_66800904a3ba52be, []int{0}
}
func (m *RelayerMapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayerMapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayerMapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayerMapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayerMapper.Merge(m, src)
}
func (m *RelayerMapper) XXX_Size() int {
	return m.Size()
}
func (m *RelayerMapper) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayerMapper.DiscardUnknown(m)
}

var xxx_messageInfo_RelayerMapper proto.InternalMessageInfo

func (m *RelayerMapper) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *RelayerMapper) GetRelayerChain() *chains.Chain {
	if m != nil {
		return m.RelayerChain
	}
	return nil
}

func (m *RelayerMapper) GetRelayerList() []string {
	if m != nil {
		return m.RelayerList
	}
	return nil
}

// RelayerSet is the set of relayers
type RelayerSet struct {
	RelayerList []string `protobuf:"bytes,1,rep,name=relayer_list,json=relayerList,proto3" json:"relayer_list,omitempty"`
}

func (m *RelayerSet) Reset()         { *m = RelayerSet{} }
func (m *RelayerSet) String() string { return proto.CompactTextString(m) }
func (*RelayerSet) ProtoMessage()    {}
func (*RelayerSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_66800904a3ba52be, []int{1}
}
func (m *RelayerSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayerSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayerSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayerSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayerSet.Merge(m, src)
}
func (m *RelayerSet) XXX_Size() int {
	return m.Size()
}
func (m *RelayerSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayerSet.DiscardUnknown(m)
}

var xxx_messageInfo_RelayerSet proto.InternalMessageInfo

func (m *RelayerSet) GetRelayerList() []string {
	if m != nil {
		return m.RelayerList
	}
	return nil
}

// LastRelayerCount is the last relayer count
type LastRelayerCount struct {
	// count is the count of the last relayer
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// last_change_height is the last change height of the relayer
	LastChangeHeight int64 `protobuf:"varint,2,opt,name=last_change_height,json=lastChangeHeight,proto3" json:"last_change_height,omitempty"`
}

func (m *LastRelayerCount) Reset()         { *m = LastRelayerCount{} }
func (m *LastRelayerCount) String() string { return proto.CompactTextString(m) }
func (*LastRelayerCount) ProtoMessage()    {}
func (*LastRelayerCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_66800904a3ba52be, []int{2}
}
func (m *LastRelayerCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastRelayerCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastRelayerCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastRelayerCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastRelayerCount.Merge(m, src)
}
func (m *LastRelayerCount) XXX_Size() int {
	return m.Size()
}
func (m *LastRelayerCount) XXX_DiscardUnknown() {
	xxx_messageInfo_LastRelayerCount.DiscardUnknown(m)
}

var xxx_messageInfo_LastRelayerCount proto.InternalMessageInfo

func (m *LastRelayerCount) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *LastRelayerCount) GetLastChangeHeight() int64 {
	if m != nil {
		return m.LastChangeHeight
	}
	return 0
}

func init() {
	proto.RegisterEnum("relayer.ObservationType", ObservationType_name, ObservationType_value)
	proto.RegisterEnum("relayer.RelayerUpdateReason", RelayerUpdateReason_name, RelayerUpdateReason_value)
	proto.RegisterType((*RelayerMapper)(nil), "relayer.RelayerMapper")
	proto.RegisterType((*RelayerSet)(nil), "relayer.RelayerSet")
	proto.RegisterType((*LastRelayerCount)(nil), "relayer.LastRelayerCount")
}

func init() { proto.RegisterFile("relayer/relayer.proto", fileDescriptor_66800904a3ba52be) }

var fileDescriptor_66800904a3ba52be = []byte{
	// 492 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0xcb, 0x6e, 0xda, 0x40,
	0x14, 0x65, 0x02, 0x49, 0xc4, 0x10, 0x92, 0xe9, 0x24, 0x6d, 0x10, 0x0b, 0x8b, 0x66, 0x85, 0xa2,
	0x16, 0x4b, 0xad, 0xd4, 0x3d, 0x8f, 0x29, 0x20, 0x8c, 0x8d, 0xc6, 0x26, 0x2a, 0xdd, 0x8c, 0x0c,
	0x19, 0x19, 0x2b, 0xae, 0x6d, 0xd9, 0x93, 0x2a, 0xec, 0xfa, 0x09, 0xfd, 0x88, 0x2e, 0xfa, 0x0f,
	0xfd, 0x81, 0x2e, 0xb3, 0xec, 0xb2, 0x82, 0x1f, 0xa9, 0x66, 0x3c, 0xb4, 0x52, 0xb3, 0xba, 0xf7,
	0x9c, 0x73, 0xcf, 0x9d, 0x23, 0xfb, 0xc2, 0xe7, 0x19, 0x8f, 0xfc, 0x0d, 0xcf, 0x4c, 0x5d, 0x3b,
	0x69, 0x96, 0x88, 0x04, 0x1f, 0x6b, 0xd8, 0xbc, 0x08, 0x92, 0x20, 0x51, 0x9c, 0x29, 0xbb, 0x42,
	0x6e, 0x5e, 0xa6, 0x77, 0x81, 0xb9, 0x5a, 0xfb, 0x61, 0x9c, 0xeb, 0x52, 0x08, 0x57, 0x5f, 0x00,
	0xac, 0xd3, 0xc2, 0x3a, 0xf5, 0xd3, 0x94, 0x67, 0xf8, 0x02, 0x1e, 0x86, 0xf1, 0x2d, 0x7f, 0x68,
	0x80, 0x16, 0x68, 0x57, 0x69, 0x01, 0xf0, 0x3b, 0x58, 0xd7, 0x2f, 0x30, 0xe5, 0x6f, 0x1c, 0xb4,
	0x40, 0xbb, 0xf6, 0xe6, 0x59, 0x27, 0xbd, 0x0b, 0x3a, 0x7a, 0x63, 0x5f, 0x16, 0x7a, 0xa2, 0xe7,
	0x14, 0xc2, 0x2f, 0xe1, 0x1e, 0xb3, 0x28, 0xcc, 0x45, 0xa3, 0xdc, 0x2a, 0xb7, 0xab, 0xb4, 0xa6,
	0x39, 0x2b, 0xcc, 0xc5, 0x95, 0x09, 0xa1, 0x4e, 0xe0, 0x72, 0xf1, 0xc4, 0x00, 0x9e, 0x1a, 0x6e,
	0x20, 0xb2, 0xfc, 0x5c, 0x68, 0x53, 0x3f, 0xb9, 0x8f, 0x85, 0x4c, 0xbd, 0x92, 0x8d, 0x4a, 0x5d,
	0xa1, 0x05, 0xc0, 0xaf, 0x20, 0x8e, 0xfc, 0x5c, 0xc8, 0xc8, 0x71, 0xc0, 0xd9, 0x9a, 0x87, 0xc1,
	0x5a, 0xa8, 0xe8, 0x65, 0x8a, 0xa4, 0xd2, 0x57, 0xc2, 0x48, 0xf1, 0xd7, 0x3f, 0x00, 0x3c, 0x73,
	0x96, 0x39, 0xcf, 0x3e, 0xfb, 0x22, 0x4c, 0x62, 0x6f, 0x93, 0x72, 0x7c, 0x09, 0xcf, 0xc9, 0x74,
	0xe6, 0x2d, 0x98, 0xd3, 0x73, 0x09, 0xbd, 0x21, 0x94, 0x79, 0x8b, 0x19, 0x41, 0x25, 0x7c, 0x06,
	0x6b, 0x63, 0x9b, 0xf5, 0x9c, 0xb9, 0x3d, 0x60, 0xde, 0x07, 0x04, 0x30, 0x82, 0x27, 0xce, 0xdc,
	0xfb, 0xc7, 0x1c, 0xc8, 0x11, 0xcf, 0x75, 0xd9, 0x84, 0x2c, 0xd8, 0x90, 0xd8, 0xa8, 0x2c, 0x47,
	0xf6, 0x84, 0x3b, 0x1e, 0xda, 0xa8, 0x82, 0x31, 0x3c, 0xfd, 0xbb, 0xa5, 0x67, 0x39, 0xfd, 0x09,
	0x3a, 0x94, 0x4f, 0xce, 0x88, 0x65, 0x31, 0xcf, 0x99, 0x10, 0x9b, 0x51, 0xd2, 0x1f, 0x75, 0xe9,
	0x90, 0xa0, 0x23, 0xfc, 0x02, 0xe2, 0x61, 0xd7, 0xfd, 0x9f, 0x3f, 0x6e, 0x56, 0xbe, 0x7f, 0x33,
	0xc0, 0xb5, 0x05, 0xcf, 0xf5, 0x17, 0x99, 0xa7, 0xb7, 0xbe, 0xe0, 0x94, 0xfb, 0x79, 0x12, 0xe3,
	0x3a, 0xac, 0xce, 0xed, 0x01, 0x79, 0x3f, 0xb6, 0xc9, 0x00, 0x95, 0xf0, 0x29, 0x84, 0x9e, 0x33,
	0xed, 0xb9, 0x9e, 0x23, 0xb1, 0x4a, 0xdd, 0x1d, 0x4c, 0xc7, 0x36, 0x9b, 0xcf, 0x06, 0x5d, 0x8f,
	0xa0, 0x83, 0x62, 0x5b, 0x6f, 0xf4, 0x73, 0x6b, 0x80, 0xc7, 0xad, 0x01, 0x7e, 0x6f, 0x0d, 0xf0,
	0x75, 0x67, 0x94, 0x1e, 0x77, 0x46, 0xe9, 0xd7, 0xce, 0x28, 0x7d, 0xec, 0x04, 0xa1, 0x58, 0xdf,
	0x2f, 0x3b, 0xab, 0xe4, 0x93, 0x99, 0xf2, 0x28, 0x7a, 0xad, 0xfe, 0xbe, 0x6a, 0x57, 0x49, 0xc6,
	0xcd, 0x87, 0xfd, 0x65, 0x9a, 0x62, 0x93, 0xf2, 0x7c, 0x79, 0xa4, 0x0e, 0xed, 0xed, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x4d, 0x48, 0xe6, 0x79, 0xb9, 0x02, 0x00, 0x00,
}

func (m *RelayerMapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayerMapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayerMapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RelayerList) > 0 {
		for iNdEx := len(m.RelayerList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RelayerList[iNdEx])
			copy(dAtA[i:], m.RelayerList[iNdEx])
			i = encodeVarintRelayer(dAtA, i, uint64(len(m.RelayerList[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.RelayerChain != nil {
		{
			size, err := m.RelayerChain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelayer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintRelayer(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelayerSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayerSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayerSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RelayerList) > 0 {
		for iNdEx := len(m.RelayerList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RelayerList[iNdEx])
			copy(dAtA[i:], m.RelayerList[iNdEx])
			i = encodeVarintRelayer(dAtA, i, uint64(len(m.RelayerList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LastRelayerCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastRelayerCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastRelayerCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastChangeHeight != 0 {
		i = encodeVarintRelayer(dAtA, i, uint64(m.LastChangeHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Count != 0 {
		i = encodeVarintRelayer(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRelayer(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelayer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RelayerMapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovRelayer(uint64(l))
	}
	if m.RelayerChain != nil {
		l = m.RelayerChain.Size()
		n += 1 + l + sovRelayer(uint64(l))
	}
	if len(m.RelayerList) > 0 {
		for _, s := range m.RelayerList {
			l = len(s)
			n += 1 + l + sovRelayer(uint64(l))
		}
	}
	return n
}

func (m *RelayerSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RelayerList) > 0 {
		for _, s := range m.RelayerList {
			l = len(s)
			n += 1 + l + sovRelayer(uint64(l))
		}
	}
	return n
}

func (m *LastRelayerCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovRelayer(uint64(m.Count))
	}
	if m.LastChangeHeight != 0 {
		n += 1 + sovRelayer(uint64(m.LastChangeHeight))
	}
	return n
}

func sovRelayer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelayer(x uint64) (n int) {
	return sovRelayer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RelayerMapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayerMapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayerMapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelayerChain == nil {
				m.RelayerChain = &chains.Chain{}
			}
			if err := m.RelayerChain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerList = append(m.RelayerList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayerSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayerSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayerSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerList = append(m.RelayerList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastRelayerCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastRelayerCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastRelayerCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastChangeHeight", wireType)
			}
			m.LastChangeHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastChangeHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelayer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelayer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelayer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelayer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelayer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelayer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelayer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelayer = fmt.Errorf("proto: unexpected end of group")
)
