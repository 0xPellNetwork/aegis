// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pevm/events.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// deploy pell system contract event
type EventSystemContractsDeployed struct {
	MsgTypeUrl             string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	SystemContract         string `protobuf:"bytes,2,opt,name=system_contract,json=systemContract,proto3" json:"system_contract,omitempty"`
	Connector              string `protobuf:"bytes,3,opt,name=connector,proto3" json:"connector,omitempty"`
	EmptyContract          string `protobuf:"bytes,4,opt,name=empty_contract,json=emptyContract,proto3" json:"empty_contract,omitempty"`
	ProxyAdmin             string `protobuf:"bytes,5,opt,name=proxy_admin,json=proxyAdmin,proto3" json:"proxy_admin,omitempty"`
	DelegationManagerProxy string `protobuf:"bytes,6,opt,name=delegation_manager_proxy,json=delegationManagerProxy,proto3" json:"delegation_manager_proxy,omitempty"`
	StrategyManagerProxy   string `protobuf:"bytes,7,opt,name=strategy_manager_proxy,json=strategyManagerProxy,proto3" json:"strategy_manager_proxy,omitempty"`
	SlasherProxy           string `protobuf:"bytes,8,opt,name=slasher_proxy,json=slasherProxy,proto3" json:"slasher_proxy,omitempty"`
	DelegationManagerImpl  string `protobuf:"bytes,9,opt,name=delegation_manager_impl,json=delegationManagerImpl,proto3" json:"delegation_manager_impl,omitempty"`
	StrategyManagerImpl    string `protobuf:"bytes,10,opt,name=strategy_manager_impl,json=strategyManagerImpl,proto3" json:"strategy_manager_impl,omitempty"`
	SlasherImpl            string `protobuf:"bytes,11,opt,name=slasher_impl,json=slasherImpl,proto3" json:"slasher_impl,omitempty"`
	DvsDirectory           string `protobuf:"bytes,12,opt,name=dvs_directory,json=dvsDirectory,proto3" json:"dvs_directory,omitempty"`
	DvsDirectoryProxy      string `protobuf:"bytes,13,opt,name=dvs_directory_proxy,json=dvsDirectoryProxy,proto3" json:"dvs_directory_proxy,omitempty"`
	RegistryRouter         string `protobuf:"bytes,14,opt,name=registry_router,json=registryRouter,proto3" json:"registry_router,omitempty"`
	RegistryRouterFactory  string `protobuf:"bytes,15,opt,name=registry_router_factory,json=registryRouterFactory,proto3" json:"registry_router_factory,omitempty"`
	Signer                 string `protobuf:"bytes,16,opt,name=signer,proto3" json:"signer,omitempty"`
	WrappedPell            string `protobuf:"bytes,17,opt,name=wrapped_pell,json=wrappedPell,proto3" json:"wrapped_pell,omitempty"`
	Gateway                string `protobuf:"bytes,18,opt,name=gateway,proto3" json:"gateway,omitempty"`
	GasSwap                string `protobuf:"bytes,19,opt,name=gas_swap,json=gasSwap,proto3" json:"gas_swap,omitempty"`
	StakeRegistryRouter    string `protobuf:"bytes,20,opt,name=stake_registry_router,json=stakeRegistryRouter,proto3" json:"stake_registry_router,omitempty"`
}

func (m *EventSystemContractsDeployed) Reset()         { *m = EventSystemContractsDeployed{} }
func (m *EventSystemContractsDeployed) String() string { return proto.CompactTextString(m) }
func (*EventSystemContractsDeployed) ProtoMessage()    {}
func (*EventSystemContractsDeployed) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6864a2489819d13, []int{0}
}
func (m *EventSystemContractsDeployed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSystemContractsDeployed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSystemContractsDeployed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSystemContractsDeployed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSystemContractsDeployed.Merge(m, src)
}
func (m *EventSystemContractsDeployed) XXX_Size() int {
	return m.Size()
}
func (m *EventSystemContractsDeployed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSystemContractsDeployed.DiscardUnknown(m)
}

var xxx_messageInfo_EventSystemContractsDeployed proto.InternalMessageInfo

func (m *EventSystemContractsDeployed) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetSystemContract() string {
	if m != nil {
		return m.SystemContract
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetConnector() string {
	if m != nil {
		return m.Connector
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetEmptyContract() string {
	if m != nil {
		return m.EmptyContract
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetProxyAdmin() string {
	if m != nil {
		return m.ProxyAdmin
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetDelegationManagerProxy() string {
	if m != nil {
		return m.DelegationManagerProxy
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetStrategyManagerProxy() string {
	if m != nil {
		return m.StrategyManagerProxy
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetSlasherProxy() string {
	if m != nil {
		return m.SlasherProxy
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetDelegationManagerImpl() string {
	if m != nil {
		return m.DelegationManagerImpl
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetStrategyManagerImpl() string {
	if m != nil {
		return m.StrategyManagerImpl
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetSlasherImpl() string {
	if m != nil {
		return m.SlasherImpl
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetDvsDirectory() string {
	if m != nil {
		return m.DvsDirectory
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetDvsDirectoryProxy() string {
	if m != nil {
		return m.DvsDirectoryProxy
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetRegistryRouter() string {
	if m != nil {
		return m.RegistryRouter
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetRegistryRouterFactory() string {
	if m != nil {
		return m.RegistryRouterFactory
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetWrappedPell() string {
	if m != nil {
		return m.WrappedPell
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetGasSwap() string {
	if m != nil {
		return m.GasSwap
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetStakeRegistryRouter() string {
	if m != nil {
		return m.StakeRegistryRouter
	}
	return ""
}

func init() {
	proto.RegisterType((*EventSystemContractsDeployed)(nil), "pevm.EventSystemContractsDeployed")
}

func init() { proto.RegisterFile("pevm/events.proto", fileDescriptor_e6864a2489819d13) }

var fileDescriptor_e6864a2489819d13 = []byte{
	// 519 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcd, 0x6e, 0x13, 0x31,
	0x14, 0x85, 0x1b, 0x28, 0x69, 0xe3, 0xfc, 0x11, 0xa7, 0x0d, 0x46, 0xaa, 0x86, 0x42, 0x85, 0x8a,
	0x84, 0x48, 0x24, 0x40, 0x88, 0x2d, 0xd0, 0x22, 0xb1, 0x40, 0xaa, 0x52, 0xd8, 0xb0, 0xb1, 0xdc,
	0x99, 0xcb, 0x64, 0x54, 0xcf, 0xd8, 0xb2, 0x9d, 0xa4, 0xf3, 0x16, 0x3c, 0x16, 0x1b, 0xa4, 0x2e,
	0x59, 0xa2, 0xe4, 0x45, 0xd0, 0x5c, 0xcf, 0x34, 0x24, 0x65, 0x17, 0x9f, 0xf3, 0x1d, 0xe7, 0xdc,
	0xab, 0x31, 0xe9, 0x69, 0x98, 0xa5, 0x23, 0x98, 0x41, 0xe6, 0xec, 0x50, 0x1b, 0xe5, 0x14, 0xdd,
	0x2e, 0xa4, 0x27, 0xbf, 0xea, 0xe4, 0xe0, 0xb4, 0x90, 0xcf, 0x73, 0xeb, 0x20, 0xfd, 0xa0, 0x32,
	0x67, 0x44, 0xe8, 0xec, 0x09, 0x68, 0xa9, 0x72, 0x88, 0xe8, 0x21, 0x69, 0xa5, 0x36, 0xe6, 0x2e,
	0xd7, 0xc0, 0xa7, 0x46, 0xb2, 0xda, 0x61, 0xed, 0x59, 0x63, 0x4c, 0x52, 0x1b, 0x7f, 0xc9, 0x35,
	0x7c, 0x35, 0x92, 0x1e, 0x93, 0xae, 0xc5, 0x30, 0x0f, 0xcb, 0x34, 0xbb, 0x83, 0x50, 0xc7, 0xae,
	0xdd, 0x49, 0x0f, 0x48, 0x23, 0x54, 0x59, 0x06, 0xa1, 0x53, 0x86, 0xdd, 0x45, 0x64, 0x25, 0xd0,
	0xa7, 0xa4, 0x03, 0xa9, 0x76, 0xf9, 0xea, 0x96, 0x6d, 0x44, 0xda, 0xa8, 0xde, 0x5c, 0xf2, 0x88,
	0x34, 0xb5, 0x51, 0x57, 0x39, 0x17, 0x51, 0x9a, 0x64, 0xec, 0x9e, 0xaf, 0x83, 0xd2, 0xbb, 0x42,
	0xa1, 0x6f, 0x09, 0x8b, 0x40, 0x42, 0x2c, 0x5c, 0xa2, 0x32, 0x9e, 0x8a, 0x4c, 0xc4, 0x60, 0x38,
	0x02, 0xac, 0x8e, 0xf4, 0x60, 0xe5, 0x7f, 0xf6, 0xf6, 0x59, 0xe1, 0xd2, 0xd7, 0x64, 0x60, 0x9d,
	0x11, 0x0e, 0xe2, 0x7c, 0x23, 0xb7, 0x83, 0xb9, 0xbd, 0xca, 0x5d, 0x4b, 0x1d, 0x91, 0xb6, 0x95,
	0xc2, 0x4e, 0x6e, 0xe0, 0x5d, 0x84, 0x5b, 0xa5, 0xe8, 0xa1, 0x37, 0xe4, 0xc1, 0x7f, 0x4a, 0x25,
	0xa9, 0x96, 0xac, 0x81, 0xf8, 0xfe, 0xad, 0x4e, 0x9f, 0x52, 0x2d, 0xe9, 0x4b, 0xb2, 0x7f, 0xab,
	0x12, 0xa6, 0x08, 0xa6, 0xfa, 0x1b, 0x8d, 0x30, 0xf3, 0x98, 0x54, 0xff, 0xed, 0xd1, 0x26, 0xa2,
	0xcd, 0x52, 0x43, 0xe4, 0x88, 0xb4, 0xa3, 0x99, 0xe5, 0x51, 0x62, 0x70, 0xf7, 0x39, 0x6b, 0xf9,
	0xce, 0xd1, 0xcc, 0x9e, 0x54, 0x1a, 0x1d, 0x92, 0xfe, 0x1a, 0x54, 0x8e, 0xd7, 0x46, 0xb4, 0xf7,
	0x2f, 0xea, 0x67, 0x3c, 0x26, 0x5d, 0x03, 0x71, 0x62, 0x9d, 0xc9, 0xb9, 0x51, 0x53, 0x07, 0x86,
	0x75, 0xfc, 0x77, 0x50, 0xc9, 0x63, 0x54, 0x8b, 0x65, 0x6c, 0x80, 0xfc, 0xbb, 0xf0, 0x3d, 0xba,
	0x7e, 0x19, 0xeb, 0x81, 0x8f, 0xde, 0xa4, 0x03, 0x52, 0xb7, 0x49, 0x9c, 0x81, 0x61, 0xf7, 0x11,
	0x2b, 0x4f, 0xc5, 0xc0, 0x73, 0x23, 0xb4, 0x86, 0x88, 0x6b, 0x90, 0x92, 0xf5, 0xfc, 0xc0, 0xa5,
	0x76, 0x06, 0x52, 0x52, 0x46, 0x76, 0x62, 0xe1, 0x60, 0x2e, 0x72, 0x46, 0xd1, 0xad, 0x8e, 0xf4,
	0x21, 0xd9, 0x8d, 0x85, 0xe5, 0x76, 0x2e, 0x34, 0xeb, 0x57, 0x96, 0x3d, 0x9f, 0x0b, 0xed, 0x97,
	0x2f, 0x2e, 0x81, 0x6f, 0x8e, 0xb5, 0x57, 0x2d, 0x5f, 0x5c, 0xc2, 0x78, 0xad, 0xea, 0xfb, 0xd3,
	0x9f, 0x8b, 0xa0, 0x76, 0xbd, 0x08, 0x6a, 0x7f, 0x16, 0x41, 0xed, 0xc7, 0x32, 0xd8, 0xba, 0x5e,
	0x06, 0x5b, 0xbf, 0x97, 0xc1, 0xd6, 0xb7, 0xe7, 0x71, 0xe2, 0x26, 0xd3, 0x8b, 0x61, 0xa8, 0xd2,
	0x51, 0x51, 0xf3, 0x45, 0x38, 0x11, 0x49, 0x86, 0x3f, 0x43, 0x65, 0x60, 0x74, 0x35, 0xc2, 0x37,
	0x5a, 0x3c, 0x34, 0x7b, 0x51, 0xc7, 0x37, 0xfa, 0xea, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe6,
	0x1d, 0xfd, 0x75, 0xb8, 0x03, 0x00, 0x00,
}

func (m *EventSystemContractsDeployed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSystemContractsDeployed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSystemContractsDeployed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakeRegistryRouter) > 0 {
		i -= len(m.StakeRegistryRouter)
		copy(dAtA[i:], m.StakeRegistryRouter)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakeRegistryRouter)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.GasSwap) > 0 {
		i -= len(m.GasSwap)
		copy(dAtA[i:], m.GasSwap)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.GasSwap)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.WrappedPell) > 0 {
		i -= len(m.WrappedPell)
		copy(dAtA[i:], m.WrappedPell)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.WrappedPell)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.RegistryRouterFactory) > 0 {
		i -= len(m.RegistryRouterFactory)
		copy(dAtA[i:], m.RegistryRouterFactory)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RegistryRouterFactory)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.RegistryRouter) > 0 {
		i -= len(m.RegistryRouter)
		copy(dAtA[i:], m.RegistryRouter)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RegistryRouter)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.DvsDirectoryProxy) > 0 {
		i -= len(m.DvsDirectoryProxy)
		copy(dAtA[i:], m.DvsDirectoryProxy)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DvsDirectoryProxy)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.DvsDirectory) > 0 {
		i -= len(m.DvsDirectory)
		copy(dAtA[i:], m.DvsDirectory)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DvsDirectory)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SlasherImpl) > 0 {
		i -= len(m.SlasherImpl)
		copy(dAtA[i:], m.SlasherImpl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SlasherImpl)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.StrategyManagerImpl) > 0 {
		i -= len(m.StrategyManagerImpl)
		copy(dAtA[i:], m.StrategyManagerImpl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StrategyManagerImpl)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.DelegationManagerImpl) > 0 {
		i -= len(m.DelegationManagerImpl)
		copy(dAtA[i:], m.DelegationManagerImpl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DelegationManagerImpl)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SlasherProxy) > 0 {
		i -= len(m.SlasherProxy)
		copy(dAtA[i:], m.SlasherProxy)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SlasherProxy)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.StrategyManagerProxy) > 0 {
		i -= len(m.StrategyManagerProxy)
		copy(dAtA[i:], m.StrategyManagerProxy)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StrategyManagerProxy)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DelegationManagerProxy) > 0 {
		i -= len(m.DelegationManagerProxy)
		copy(dAtA[i:], m.DelegationManagerProxy)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DelegationManagerProxy)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProxyAdmin) > 0 {
		i -= len(m.ProxyAdmin)
		copy(dAtA[i:], m.ProxyAdmin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ProxyAdmin)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EmptyContract) > 0 {
		i -= len(m.EmptyContract)
		copy(dAtA[i:], m.EmptyContract)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EmptyContract)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Connector) > 0 {
		i -= len(m.Connector)
		copy(dAtA[i:], m.Connector)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Connector)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SystemContract) > 0 {
		i -= len(m.SystemContract)
		copy(dAtA[i:], m.SystemContract)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SystemContract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventSystemContractsDeployed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SystemContract)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Connector)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.EmptyContract)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ProxyAdmin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DelegationManagerProxy)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.StrategyManagerProxy)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SlasherProxy)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DelegationManagerImpl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.StrategyManagerImpl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SlasherImpl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DvsDirectory)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DvsDirectoryProxy)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RegistryRouter)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RegistryRouterFactory)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 2 + l + sovEvents(uint64(l))
	}
	l = len(m.WrappedPell)
	if l > 0 {
		n += 2 + l + sovEvents(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 2 + l + sovEvents(uint64(l))
	}
	l = len(m.GasSwap)
	if l > 0 {
		n += 2 + l + sovEvents(uint64(l))
	}
	l = len(m.StakeRegistryRouter)
	if l > 0 {
		n += 2 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventSystemContractsDeployed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSystemContractsDeployed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSystemContractsDeployed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Connector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmptyContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmptyContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAdmin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyAdmin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationManagerProxy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationManagerProxy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyManagerProxy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrategyManagerProxy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlasherProxy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlasherProxy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationManagerImpl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationManagerImpl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyManagerImpl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrategyManagerImpl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlasherImpl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlasherImpl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DvsDirectory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DvsDirectory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DvsDirectoryProxy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DvsDirectoryProxy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryRouter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryRouter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryRouterFactory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryRouterFactory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrappedPell", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WrappedPell = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasSwap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasSwap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRegistryRouter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeRegistryRouter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
