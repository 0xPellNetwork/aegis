// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pevm/system_contract.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// system contract infomation
type SystemContract struct {
	SystemContract                   string `protobuf:"bytes,1,opt,name=system_contract,json=systemContract,proto3" json:"system_contract,omitempty"`
	Connector                        string `protobuf:"bytes,2,opt,name=connector,proto3" json:"connector,omitempty"`
	DelegationManagerProxy           string `protobuf:"bytes,3,opt,name=delegation_manager_proxy,json=delegationManagerProxy,proto3" json:"delegation_manager_proxy,omitempty"`
	DelegationManagerInteractorProxy string `protobuf:"bytes,4,opt,name=delegation_manager_interactor_proxy,json=delegationManagerInteractorProxy,proto3" json:"delegation_manager_interactor_proxy,omitempty"`
	StrategyManagerProxy             string `protobuf:"bytes,5,opt,name=strategy_manager_proxy,json=strategyManagerProxy,proto3" json:"strategy_manager_proxy,omitempty"`
	SlasherProxy                     string `protobuf:"bytes,6,opt,name=slasher_proxy,json=slasherProxy,proto3" json:"slasher_proxy,omitempty"`
	DvsDirectoryProxy                string `protobuf:"bytes,7,opt,name=dvs_directory_proxy,json=dvsDirectoryProxy,proto3" json:"dvs_directory_proxy,omitempty"`
	RegistryRouter                   string `protobuf:"bytes,8,opt,name=registry_router,json=registryRouter,proto3" json:"registry_router,omitempty"`
	RegistryRouterBeacon             string `protobuf:"bytes,9,opt,name=registry_router_beacon,json=registryRouterBeacon,proto3" json:"registry_router_beacon,omitempty"`
	StakeRegistryRouter              string `protobuf:"bytes,10,opt,name=stake_registry_router,json=stakeRegistryRouter,proto3" json:"stake_registry_router,omitempty"`
	StakeRegistryRouterBeacon        string `protobuf:"bytes,11,opt,name=stake_registry_router_beacon,json=stakeRegistryRouterBeacon,proto3" json:"stake_registry_router_beacon,omitempty"`
	RegistryRouterFactory            string `protobuf:"bytes,12,opt,name=registry_router_factory,json=registryRouterFactory,proto3" json:"registry_router_factory,omitempty"`
	WrappedPell                      string `protobuf:"bytes,13,opt,name=wrapped_pell,json=wrappedPell,proto3" json:"wrapped_pell,omitempty"`
	Gateway                          string `protobuf:"bytes,14,opt,name=gateway,proto3" json:"gateway,omitempty"`
	GasSwap                          string `protobuf:"bytes,15,opt,name=gas_swap,json=gasSwap,proto3" json:"gas_swap,omitempty"`
}

func (m *SystemContract) Reset()         { *m = SystemContract{} }
func (m *SystemContract) String() string { return proto.CompactTextString(m) }
func (*SystemContract) ProtoMessage()    {}
func (*SystemContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_d60e6b092bf45ee2, []int{0}
}
func (m *SystemContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemContract.Merge(m, src)
}
func (m *SystemContract) XXX_Size() int {
	return m.Size()
}
func (m *SystemContract) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemContract.DiscardUnknown(m)
}

var xxx_messageInfo_SystemContract proto.InternalMessageInfo

func (m *SystemContract) GetSystemContract() string {
	if m != nil {
		return m.SystemContract
	}
	return ""
}

func (m *SystemContract) GetConnector() string {
	if m != nil {
		return m.Connector
	}
	return ""
}

func (m *SystemContract) GetDelegationManagerProxy() string {
	if m != nil {
		return m.DelegationManagerProxy
	}
	return ""
}

func (m *SystemContract) GetDelegationManagerInteractorProxy() string {
	if m != nil {
		return m.DelegationManagerInteractorProxy
	}
	return ""
}

func (m *SystemContract) GetStrategyManagerProxy() string {
	if m != nil {
		return m.StrategyManagerProxy
	}
	return ""
}

func (m *SystemContract) GetSlasherProxy() string {
	if m != nil {
		return m.SlasherProxy
	}
	return ""
}

func (m *SystemContract) GetDvsDirectoryProxy() string {
	if m != nil {
		return m.DvsDirectoryProxy
	}
	return ""
}

func (m *SystemContract) GetRegistryRouter() string {
	if m != nil {
		return m.RegistryRouter
	}
	return ""
}

func (m *SystemContract) GetRegistryRouterBeacon() string {
	if m != nil {
		return m.RegistryRouterBeacon
	}
	return ""
}

func (m *SystemContract) GetStakeRegistryRouter() string {
	if m != nil {
		return m.StakeRegistryRouter
	}
	return ""
}

func (m *SystemContract) GetStakeRegistryRouterBeacon() string {
	if m != nil {
		return m.StakeRegistryRouterBeacon
	}
	return ""
}

func (m *SystemContract) GetRegistryRouterFactory() string {
	if m != nil {
		return m.RegistryRouterFactory
	}
	return ""
}

func (m *SystemContract) GetWrappedPell() string {
	if m != nil {
		return m.WrappedPell
	}
	return ""
}

func (m *SystemContract) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *SystemContract) GetGasSwap() string {
	if m != nil {
		return m.GasSwap
	}
	return ""
}

func init() {
	proto.RegisterType((*SystemContract)(nil), "pevm.SystemContract")
}

func init() { proto.RegisterFile("pevm/system_contract.proto", fileDescriptor_d60e6b092bf45ee2) }

var fileDescriptor_d60e6b092bf45ee2 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x86, 0x63, 0xe8, 0x57, 0xa6, 0x69, 0x22, 0x5c, 0x5a, 0xb6, 0xa8, 0xb2, 0x0a, 0x3d, 0x14,
	0x09, 0x29, 0x46, 0x80, 0x10, 0x37, 0xa4, 0xf2, 0x21, 0x71, 0x28, 0xaa, 0xd2, 0x1b, 0x97, 0xd5,
	0xc6, 0x1e, 0x5c, 0xab, 0xb6, 0x77, 0xb5, 0xbb, 0x8d, 0xe3, 0x7f, 0xc1, 0xcf, 0xe2, 0x46, 0x8f,
	0x1c, 0x51, 0xf2, 0x47, 0x90, 0xc7, 0x76, 0x23, 0x9b, 0x1c, 0x33, 0xcf, 0xf3, 0xce, 0xbc, 0xb1,
	0xb4, 0xf0, 0x54, 0xe1, 0x2c, 0xf5, 0x4d, 0x61, 0x2c, 0xa6, 0x3c, 0x90, 0x99, 0xd5, 0x22, 0xb0,
	0x63, 0xa5, 0xa5, 0x95, 0xee, 0x46, 0xc9, 0x9e, 0xff, 0xde, 0x84, 0xe1, 0x15, 0xf1, 0x8f, 0x35,
	0x76, 0xcf, 0x60, 0xd4, 0x49, 0x30, 0xe7, 0xc4, 0x79, 0xd1, 0x9f, 0x0c, 0x4d, 0x5b, 0x3c, 0x86,
	0x7e, 0x20, 0xb3, 0x0c, 0x03, 0x2b, 0x35, 0x7b, 0x40, 0xca, 0x6a, 0xe0, 0xbe, 0x07, 0x16, 0x62,
	0x82, 0x91, 0xb0, 0xb1, 0xcc, 0x78, 0x2a, 0x32, 0x11, 0xa1, 0xe6, 0x4a, 0xcb, 0x79, 0xc1, 0x1e,
	0x92, 0x7c, 0xb8, 0xe2, 0x17, 0x15, 0xbe, 0x2c, 0xa9, 0x7b, 0x01, 0xa7, 0x6b, 0x92, 0x71, 0x66,
	0xb1, 0x3c, 0x2b, 0x9b, 0x25, 0x1b, 0xb4, 0xe4, 0xe4, 0xbf, 0x25, 0x5f, 0xef, 0xc5, 0x6a, 0xdd,
	0x5b, 0x38, 0x34, 0x56, 0x0b, 0x8b, 0x51, 0xd1, 0xa9, 0xb1, 0x49, 0x1b, 0x1e, 0x37, 0xb4, 0x55,
	0xe2, 0x14, 0xf6, 0x4c, 0x22, 0xcc, 0xf5, 0xbd, 0xbc, 0x45, 0xf2, 0xa0, 0x1e, 0x56, 0xd2, 0x18,
	0xf6, 0xc3, 0x99, 0xe1, 0x61, 0xac, 0xe9, 0x3f, 0x17, 0xb5, 0xba, 0x4d, 0xea, 0xa3, 0x70, 0x66,
	0x3e, 0x35, 0xa4, 0xf2, 0xcf, 0x60, 0xa4, 0x31, 0x8a, 0x8d, 0xd5, 0x05, 0xd7, 0xf2, 0xd6, 0xa2,
	0x66, 0x3b, 0xd5, 0xa7, 0x6d, 0xc6, 0x13, 0x9a, 0x96, 0x9d, 0x3b, 0x22, 0x9f, 0xa2, 0x08, 0x64,
	0xc6, 0xfa, 0x55, 0xe7, 0xb6, 0x7f, 0x4e, 0xcc, 0x7d, 0x0d, 0x07, 0xc6, 0x8a, 0x1b, 0xe4, 0xdd,
	0x23, 0x40, 0xa1, 0x7d, 0x82, 0x93, 0xf6, 0xa5, 0x0f, 0x70, 0xbc, 0x36, 0xd3, 0xdc, 0xdb, 0xa5,
	0xe8, 0xd1, 0x9a, 0x68, 0x7d, 0xf4, 0x1d, 0x3c, 0xe9, 0x46, 0x7f, 0xd0, 0xd7, 0x2f, 0xd8, 0x80,
	0xb2, 0x07, 0xed, 0xae, 0x5f, 0x2a, 0xe8, 0x3e, 0x83, 0x41, 0xae, 0x85, 0x52, 0x18, 0x72, 0x85,
	0x49, 0xc2, 0xf6, 0x48, 0xde, 0xad, 0x67, 0x97, 0x98, 0x24, 0x2e, 0x83, 0xed, 0x48, 0x58, 0xcc,
	0x45, 0xc1, 0x86, 0x44, 0x9b, 0x9f, 0xee, 0x11, 0xec, 0x44, 0xc2, 0x70, 0x93, 0x0b, 0xc5, 0x46,
	0x0d, 0x32, 0x57, 0xb9, 0x50, 0xe7, 0x9f, 0x7f, 0x2d, 0x3c, 0xe7, 0x6e, 0xe1, 0x39, 0x7f, 0x17,
	0x9e, 0xf3, 0x73, 0xe9, 0xf5, 0xee, 0x96, 0x5e, 0xef, 0xcf, 0xd2, 0xeb, 0x7d, 0x7f, 0x19, 0xc5,
	0xf6, 0xfa, 0x76, 0x3a, 0x0e, 0x64, 0xea, 0xbf, 0x9a, 0x97, 0x17, 0xbe, 0xa1, 0xcd, 0xa5, 0xbe,
	0xf1, 0x45, 0xd9, 0xd0, 0x9f, 0xfb, 0xf4, 0x5c, 0x6c, 0xa1, 0xd0, 0x4c, 0xb7, 0xe8, 0x95, 0xbc,
	0xf9, 0x17, 0x00, 0x00, 0xff, 0xff, 0x77, 0x52, 0xac, 0x0f, 0x43, 0x03, 0x00, 0x00,
}

func (m *SystemContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GasSwap) > 0 {
		i -= len(m.GasSwap)
		copy(dAtA[i:], m.GasSwap)
		i = encodeVarintSystemContract(dAtA, i, uint64(len(m.GasSwap)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintSystemContract(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.WrappedPell) > 0 {
		i -= len(m.WrappedPell)
		copy(dAtA[i:], m.WrappedPell)
		i = encodeVarintSystemContract(dAtA, i, uint64(len(m.WrappedPell)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RegistryRouterFactory) > 0 {
		i -= len(m.RegistryRouterFactory)
		copy(dAtA[i:], m.RegistryRouterFactory)
		i = encodeVarintSystemContract(dAtA, i, uint64(len(m.RegistryRouterFactory)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.StakeRegistryRouterBeacon) > 0 {
		i -= len(m.StakeRegistryRouterBeacon)
		copy(dAtA[i:], m.StakeRegistryRouterBeacon)
		i = encodeVarintSystemContract(dAtA, i, uint64(len(m.StakeRegistryRouterBeacon)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.StakeRegistryRouter) > 0 {
		i -= len(m.StakeRegistryRouter)
		copy(dAtA[i:], m.StakeRegistryRouter)
		i = encodeVarintSystemContract(dAtA, i, uint64(len(m.StakeRegistryRouter)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.RegistryRouterBeacon) > 0 {
		i -= len(m.RegistryRouterBeacon)
		copy(dAtA[i:], m.RegistryRouterBeacon)
		i = encodeVarintSystemContract(dAtA, i, uint64(len(m.RegistryRouterBeacon)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RegistryRouter) > 0 {
		i -= len(m.RegistryRouter)
		copy(dAtA[i:], m.RegistryRouter)
		i = encodeVarintSystemContract(dAtA, i, uint64(len(m.RegistryRouter)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DvsDirectoryProxy) > 0 {
		i -= len(m.DvsDirectoryProxy)
		copy(dAtA[i:], m.DvsDirectoryProxy)
		i = encodeVarintSystemContract(dAtA, i, uint64(len(m.DvsDirectoryProxy)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SlasherProxy) > 0 {
		i -= len(m.SlasherProxy)
		copy(dAtA[i:], m.SlasherProxy)
		i = encodeVarintSystemContract(dAtA, i, uint64(len(m.SlasherProxy)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StrategyManagerProxy) > 0 {
		i -= len(m.StrategyManagerProxy)
		copy(dAtA[i:], m.StrategyManagerProxy)
		i = encodeVarintSystemContract(dAtA, i, uint64(len(m.StrategyManagerProxy)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DelegationManagerInteractorProxy) > 0 {
		i -= len(m.DelegationManagerInteractorProxy)
		copy(dAtA[i:], m.DelegationManagerInteractorProxy)
		i = encodeVarintSystemContract(dAtA, i, uint64(len(m.DelegationManagerInteractorProxy)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DelegationManagerProxy) > 0 {
		i -= len(m.DelegationManagerProxy)
		copy(dAtA[i:], m.DelegationManagerProxy)
		i = encodeVarintSystemContract(dAtA, i, uint64(len(m.DelegationManagerProxy)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Connector) > 0 {
		i -= len(m.Connector)
		copy(dAtA[i:], m.Connector)
		i = encodeVarintSystemContract(dAtA, i, uint64(len(m.Connector)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SystemContract) > 0 {
		i -= len(m.SystemContract)
		copy(dAtA[i:], m.SystemContract)
		i = encodeVarintSystemContract(dAtA, i, uint64(len(m.SystemContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSystemContract(dAtA []byte, offset int, v uint64) int {
	offset -= sovSystemContract(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SystemContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SystemContract)
	if l > 0 {
		n += 1 + l + sovSystemContract(uint64(l))
	}
	l = len(m.Connector)
	if l > 0 {
		n += 1 + l + sovSystemContract(uint64(l))
	}
	l = len(m.DelegationManagerProxy)
	if l > 0 {
		n += 1 + l + sovSystemContract(uint64(l))
	}
	l = len(m.DelegationManagerInteractorProxy)
	if l > 0 {
		n += 1 + l + sovSystemContract(uint64(l))
	}
	l = len(m.StrategyManagerProxy)
	if l > 0 {
		n += 1 + l + sovSystemContract(uint64(l))
	}
	l = len(m.SlasherProxy)
	if l > 0 {
		n += 1 + l + sovSystemContract(uint64(l))
	}
	l = len(m.DvsDirectoryProxy)
	if l > 0 {
		n += 1 + l + sovSystemContract(uint64(l))
	}
	l = len(m.RegistryRouter)
	if l > 0 {
		n += 1 + l + sovSystemContract(uint64(l))
	}
	l = len(m.RegistryRouterBeacon)
	if l > 0 {
		n += 1 + l + sovSystemContract(uint64(l))
	}
	l = len(m.StakeRegistryRouter)
	if l > 0 {
		n += 1 + l + sovSystemContract(uint64(l))
	}
	l = len(m.StakeRegistryRouterBeacon)
	if l > 0 {
		n += 1 + l + sovSystemContract(uint64(l))
	}
	l = len(m.RegistryRouterFactory)
	if l > 0 {
		n += 1 + l + sovSystemContract(uint64(l))
	}
	l = len(m.WrappedPell)
	if l > 0 {
		n += 1 + l + sovSystemContract(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovSystemContract(uint64(l))
	}
	l = len(m.GasSwap)
	if l > 0 {
		n += 1 + l + sovSystemContract(uint64(l))
	}
	return n
}

func sovSystemContract(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSystemContract(x uint64) (n int) {
	return sovSystemContract(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SystemContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystemContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystemContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystemContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystemContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystemContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Connector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationManagerProxy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystemContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystemContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationManagerProxy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationManagerInteractorProxy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystemContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystemContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationManagerInteractorProxy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyManagerProxy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystemContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystemContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrategyManagerProxy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlasherProxy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystemContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystemContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlasherProxy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DvsDirectoryProxy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystemContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystemContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DvsDirectoryProxy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryRouter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystemContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystemContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryRouter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryRouterBeacon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystemContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystemContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryRouterBeacon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRegistryRouter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystemContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystemContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeRegistryRouter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRegistryRouterBeacon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystemContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystemContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeRegistryRouterBeacon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryRouterFactory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystemContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystemContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryRouterFactory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrappedPell", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystemContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystemContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WrappedPell = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystemContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystemContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasSwap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystemContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystemContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasSwap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystemContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSystemContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSystemContract(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSystemContract
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSystemContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSystemContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSystemContract
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSystemContract
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSystemContract
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSystemContract        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSystemContract          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSystemContract = fmt.Errorf("proto: unexpected end of group")
)
