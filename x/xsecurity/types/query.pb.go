// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xsecurity/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/pell-chain/pellcore/x/restaking/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryGetLSTRegistryRouterAddressRequest is the request type for the GetLSTRegistryRouterAddress method.
type QueryRegistryRouterAddressRequest struct {
}

func (m *QueryRegistryRouterAddressRequest) Reset()         { *m = QueryRegistryRouterAddressRequest{} }
func (m *QueryRegistryRouterAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegistryRouterAddressRequest) ProtoMessage()    {}
func (*QueryRegistryRouterAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e44ee95d7dbab092, []int{0}
}
func (m *QueryRegistryRouterAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegistryRouterAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegistryRouterAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegistryRouterAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegistryRouterAddressRequest.Merge(m, src)
}
func (m *QueryRegistryRouterAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegistryRouterAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegistryRouterAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegistryRouterAddressRequest proto.InternalMessageInfo

// QueryGetLSTRegistryRouterAddressResponse is the response type for the GetLSTRegistryRouterAddress method.
type QueryRegistryRouterAddressResponse struct {
	RegistryRouterAddress      string `protobuf:"bytes,1,opt,name=registry_router_address,json=registryRouterAddress,proto3" json:"registry_router_address,omitempty"`
	StakeRegistryRouterAddress string `protobuf:"bytes,2,opt,name=stake_registry_router_address,json=stakeRegistryRouterAddress,proto3" json:"stake_registry_router_address,omitempty"`
}

func (m *QueryRegistryRouterAddressResponse) Reset()         { *m = QueryRegistryRouterAddressResponse{} }
func (m *QueryRegistryRouterAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegistryRouterAddressResponse) ProtoMessage()    {}
func (*QueryRegistryRouterAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e44ee95d7dbab092, []int{1}
}
func (m *QueryRegistryRouterAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegistryRouterAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegistryRouterAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegistryRouterAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegistryRouterAddressResponse.Merge(m, src)
}
func (m *QueryRegistryRouterAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegistryRouterAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegistryRouterAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegistryRouterAddressResponse proto.InternalMessageInfo

func (m *QueryRegistryRouterAddressResponse) GetRegistryRouterAddress() string {
	if m != nil {
		return m.RegistryRouterAddress
	}
	return ""
}

func (m *QueryRegistryRouterAddressResponse) GetStakeRegistryRouterAddress() string {
	if m != nil {
		return m.StakeRegistryRouterAddress
	}
	return ""
}

// QueryGroupInfoRequest is the request type for the QueryGroupInfo method.
type QueryGroupInfoRequest struct {
}

func (m *QueryGroupInfoRequest) Reset()         { *m = QueryGroupInfoRequest{} }
func (m *QueryGroupInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGroupInfoRequest) ProtoMessage()    {}
func (*QueryGroupInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e44ee95d7dbab092, []int{2}
}
func (m *QueryGroupInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGroupInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGroupInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGroupInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGroupInfoRequest.Merge(m, src)
}
func (m *QueryGroupInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGroupInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGroupInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGroupInfoRequest proto.InternalMessageInfo

// QueryGroupInfoResponse is the response type for the QueryGroupInfo method.
type QueryGroupInfoResponse struct {
	GroupNumber        uint64                    `protobuf:"varint,1,opt,name=group_number,json=groupNumber,proto3" json:"group_number,omitempty"`
	OperatorSetParam   *types.OperatorSetParam   `protobuf:"bytes,2,opt,name=operator_set_param,json=operatorSetParam,proto3" json:"operator_set_param,omitempty"`
	MinimumStake       string                    `protobuf:"bytes,3,opt,name=minimum_stake,json=minimumStake,proto3" json:"minimum_stake,omitempty"`
	PoolParams         []*types.PoolParams       `protobuf:"bytes,4,rep,name=pool_params,json=poolParams,proto3" json:"pool_params,omitempty"`
	GroupEjectionParam *types.GroupEjectionParam `protobuf:"bytes,5,opt,name=group_ejection_param,json=groupEjectionParam,proto3" json:"group_ejection_param,omitempty"`
}

func (m *QueryGroupInfoResponse) Reset()         { *m = QueryGroupInfoResponse{} }
func (m *QueryGroupInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGroupInfoResponse) ProtoMessage()    {}
func (*QueryGroupInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e44ee95d7dbab092, []int{3}
}
func (m *QueryGroupInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGroupInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGroupInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGroupInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGroupInfoResponse.Merge(m, src)
}
func (m *QueryGroupInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGroupInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGroupInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGroupInfoResponse proto.InternalMessageInfo

func (m *QueryGroupInfoResponse) GetGroupNumber() uint64 {
	if m != nil {
		return m.GroupNumber
	}
	return 0
}

func (m *QueryGroupInfoResponse) GetOperatorSetParam() *types.OperatorSetParam {
	if m != nil {
		return m.OperatorSetParam
	}
	return nil
}

func (m *QueryGroupInfoResponse) GetMinimumStake() string {
	if m != nil {
		return m.MinimumStake
	}
	return ""
}

func (m *QueryGroupInfoResponse) GetPoolParams() []*types.PoolParams {
	if m != nil {
		return m.PoolParams
	}
	return nil
}

func (m *QueryGroupInfoResponse) GetGroupEjectionParam() *types.GroupEjectionParam {
	if m != nil {
		return m.GroupEjectionParam
	}
	return nil
}

// QueryOperatorRegistrationListRequest is the request type for the QueryOperatorRegistrationList method.
type QueryOperatorRegistrationListRequest struct {
}

func (m *QueryOperatorRegistrationListRequest) Reset()         { *m = QueryOperatorRegistrationListRequest{} }
func (m *QueryOperatorRegistrationListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorRegistrationListRequest) ProtoMessage()    {}
func (*QueryOperatorRegistrationListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e44ee95d7dbab092, []int{4}
}
func (m *QueryOperatorRegistrationListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorRegistrationListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorRegistrationListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorRegistrationListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorRegistrationListRequest.Merge(m, src)
}
func (m *QueryOperatorRegistrationListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorRegistrationListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorRegistrationListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorRegistrationListRequest proto.InternalMessageInfo

// QueryOperatorRegistrationListResponse is the response type for the QueryOperatorRegistrationList method.
type QueryOperatorRegistrationListResponse struct {
	OperatorRegistrations []*LSTOperatorRegistration `protobuf:"bytes,1,rep,name=operator_registrations,json=operatorRegistrations,proto3" json:"operator_registrations,omitempty"`
}

func (m *QueryOperatorRegistrationListResponse) Reset()         { *m = QueryOperatorRegistrationListResponse{} }
func (m *QueryOperatorRegistrationListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorRegistrationListResponse) ProtoMessage()    {}
func (*QueryOperatorRegistrationListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e44ee95d7dbab092, []int{5}
}
func (m *QueryOperatorRegistrationListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorRegistrationListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorRegistrationListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorRegistrationListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorRegistrationListResponse.Merge(m, src)
}
func (m *QueryOperatorRegistrationListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorRegistrationListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorRegistrationListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorRegistrationListResponse proto.InternalMessageInfo

func (m *QueryOperatorRegistrationListResponse) GetOperatorRegistrations() []*LSTOperatorRegistration {
	if m != nil {
		return m.OperatorRegistrations
	}
	return nil
}

// QueryOperatorWeightedSharesRequest is the request type for the QueryOperatorWeightedShares method.
type QueryOperatorWeightedSharesRequest struct {
}

func (m *QueryOperatorWeightedSharesRequest) Reset()         { *m = QueryOperatorWeightedSharesRequest{} }
func (m *QueryOperatorWeightedSharesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorWeightedSharesRequest) ProtoMessage()    {}
func (*QueryOperatorWeightedSharesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e44ee95d7dbab092, []int{6}
}
func (m *QueryOperatorWeightedSharesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorWeightedSharesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorWeightedSharesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorWeightedSharesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorWeightedSharesRequest.Merge(m, src)
}
func (m *QueryOperatorWeightedSharesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorWeightedSharesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorWeightedSharesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorWeightedSharesRequest proto.InternalMessageInfo

// QueryOperatorWeightedSharesResponse is the response type for the QueryOperatorWeightedShares method.
type QueryOperatorWeightedSharesResponse struct {
	OperatorWeightedShares []*LSTOperatorWeightedShare `protobuf:"bytes,1,rep,name=operator_weighted_shares,json=operatorWeightedShares,proto3" json:"operator_weighted_shares,omitempty"`
}

func (m *QueryOperatorWeightedSharesResponse) Reset()         { *m = QueryOperatorWeightedSharesResponse{} }
func (m *QueryOperatorWeightedSharesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorWeightedSharesResponse) ProtoMessage()    {}
func (*QueryOperatorWeightedSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e44ee95d7dbab092, []int{7}
}
func (m *QueryOperatorWeightedSharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorWeightedSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorWeightedSharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorWeightedSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorWeightedSharesResponse.Merge(m, src)
}
func (m *QueryOperatorWeightedSharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorWeightedSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorWeightedSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorWeightedSharesResponse proto.InternalMessageInfo

func (m *QueryOperatorWeightedSharesResponse) GetOperatorWeightedShares() []*LSTOperatorWeightedShare {
	if m != nil {
		return m.OperatorWeightedShares
	}
	return nil
}

// LSTOperatorWeightedShare represents the weighted shares of an operator
type QueryVotingPowerRatioRequest struct {
}

func (m *QueryVotingPowerRatioRequest) Reset()         { *m = QueryVotingPowerRatioRequest{} }
func (m *QueryVotingPowerRatioRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVotingPowerRatioRequest) ProtoMessage()    {}
func (*QueryVotingPowerRatioRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e44ee95d7dbab092, []int{8}
}
func (m *QueryVotingPowerRatioRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVotingPowerRatioRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVotingPowerRatioRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVotingPowerRatioRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVotingPowerRatioRequest.Merge(m, src)
}
func (m *QueryVotingPowerRatioRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVotingPowerRatioRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVotingPowerRatioRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVotingPowerRatioRequest proto.InternalMessageInfo

// QueryVotingPowerRatioResponse is the response type for the QueryVotingPowerRatio method.
type QueryVotingPowerRatioResponse struct {
	Numerator   uint64 `protobuf:"varint,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	Denominator uint64 `protobuf:"varint,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (m *QueryVotingPowerRatioResponse) Reset()         { *m = QueryVotingPowerRatioResponse{} }
func (m *QueryVotingPowerRatioResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVotingPowerRatioResponse) ProtoMessage()    {}
func (*QueryVotingPowerRatioResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e44ee95d7dbab092, []int{9}
}
func (m *QueryVotingPowerRatioResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVotingPowerRatioResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVotingPowerRatioResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVotingPowerRatioResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVotingPowerRatioResponse.Merge(m, src)
}
func (m *QueryVotingPowerRatioResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVotingPowerRatioResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVotingPowerRatioResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVotingPowerRatioResponse proto.InternalMessageInfo

func (m *QueryVotingPowerRatioResponse) GetNumerator() uint64 {
	if m != nil {
		return m.Numerator
	}
	return 0
}

func (m *QueryVotingPowerRatioResponse) GetDenominator() uint64 {
	if m != nil {
		return m.Denominator
	}
	return 0
}

// QueryLSTStakingEnabledRequest is the request type for the QueryLSTStakingEnabled method.
type QueryLSTStakingEnabledRequest struct {
}

func (m *QueryLSTStakingEnabledRequest) Reset()         { *m = QueryLSTStakingEnabledRequest{} }
func (m *QueryLSTStakingEnabledRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLSTStakingEnabledRequest) ProtoMessage()    {}
func (*QueryLSTStakingEnabledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e44ee95d7dbab092, []int{10}
}
func (m *QueryLSTStakingEnabledRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLSTStakingEnabledRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLSTStakingEnabledRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLSTStakingEnabledRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLSTStakingEnabledRequest.Merge(m, src)
}
func (m *QueryLSTStakingEnabledRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLSTStakingEnabledRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLSTStakingEnabledRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLSTStakingEnabledRequest proto.InternalMessageInfo

// QueryLSTStakingEnabledResponse is the response type for the QueryLSTStakingEnabled method.
type QueryLSTStakingEnabledResponse struct {
	LstStakingEnabled bool `protobuf:"varint,1,opt,name=lst_staking_enabled,json=lstStakingEnabled,proto3" json:"lst_staking_enabled,omitempty"`
}

func (m *QueryLSTStakingEnabledResponse) Reset()         { *m = QueryLSTStakingEnabledResponse{} }
func (m *QueryLSTStakingEnabledResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLSTStakingEnabledResponse) ProtoMessage()    {}
func (*QueryLSTStakingEnabledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e44ee95d7dbab092, []int{11}
}
func (m *QueryLSTStakingEnabledResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLSTStakingEnabledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLSTStakingEnabledResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLSTStakingEnabledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLSTStakingEnabledResponse.Merge(m, src)
}
func (m *QueryLSTStakingEnabledResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLSTStakingEnabledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLSTStakingEnabledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLSTStakingEnabledResponse proto.InternalMessageInfo

func (m *QueryLSTStakingEnabledResponse) GetLstStakingEnabled() bool {
	if m != nil {
		return m.LstStakingEnabled
	}
	return false
}

func init() {
	proto.RegisterType((*QueryRegistryRouterAddressRequest)(nil), "xsecurity.QueryRegistryRouterAddressRequest")
	proto.RegisterType((*QueryRegistryRouterAddressResponse)(nil), "xsecurity.QueryRegistryRouterAddressResponse")
	proto.RegisterType((*QueryGroupInfoRequest)(nil), "xsecurity.QueryGroupInfoRequest")
	proto.RegisterType((*QueryGroupInfoResponse)(nil), "xsecurity.QueryGroupInfoResponse")
	proto.RegisterType((*QueryOperatorRegistrationListRequest)(nil), "xsecurity.QueryOperatorRegistrationListRequest")
	proto.RegisterType((*QueryOperatorRegistrationListResponse)(nil), "xsecurity.QueryOperatorRegistrationListResponse")
	proto.RegisterType((*QueryOperatorWeightedSharesRequest)(nil), "xsecurity.QueryOperatorWeightedSharesRequest")
	proto.RegisterType((*QueryOperatorWeightedSharesResponse)(nil), "xsecurity.QueryOperatorWeightedSharesResponse")
	proto.RegisterType((*QueryVotingPowerRatioRequest)(nil), "xsecurity.QueryVotingPowerRatioRequest")
	proto.RegisterType((*QueryVotingPowerRatioResponse)(nil), "xsecurity.QueryVotingPowerRatioResponse")
	proto.RegisterType((*QueryLSTStakingEnabledRequest)(nil), "xsecurity.QueryLSTStakingEnabledRequest")
	proto.RegisterType((*QueryLSTStakingEnabledResponse)(nil), "xsecurity.QueryLSTStakingEnabledResponse")
}

func init() { proto.RegisterFile("xsecurity/query.proto", fileDescriptor_e44ee95d7dbab092) }

var fileDescriptor_e44ee95d7dbab092 = []byte{
	// 846 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0x41, 0x4f, 0xe3, 0x46,
	0x14, 0xc7, 0x71, 0x80, 0x0a, 0x26, 0xb4, 0x6a, 0xa7, 0x0d, 0x44, 0x06, 0xdc, 0xe0, 0x50, 0x9a,
	0x4a, 0xc5, 0xa6, 0xd0, 0xa6, 0x95, 0x5a, 0x55, 0xa2, 0x12, 0xaa, 0xa8, 0x50, 0x49, 0x1d, 0xd4,
	0xaa, 0x95, 0x2a, 0xcb, 0x49, 0xa6, 0x8e, 0xbb, 0xb6, 0xc7, 0xcc, 0x8c, 0x17, 0x72, 0x45, 0xbb,
	0xf7, 0x95, 0xf6, 0xb2, 0xb7, 0x95, 0xf6, 0xb0, 0x9f, 0x60, 0xb5, 0x87, 0x3d, 0xee, 0x69, 0x8f,
	0x48, 0x7b, 0xd9, 0xe3, 0x0a, 0xf6, 0x83, 0xac, 0x3c, 0x9e, 0x98, 0xc4, 0xd8, 0x4e, 0x6e, 0xd1,
	0x9b, 0xff, 0x7b, 0xef, 0xf7, 0x1e, 0xef, 0x3d, 0x03, 0x2a, 0xe7, 0x14, 0x75, 0x43, 0xe2, 0xb0,
	0x81, 0x7e, 0x1a, 0x22, 0x32, 0xd0, 0x02, 0x82, 0x19, 0x86, 0x8b, 0x89, 0x59, 0x5e, 0xb3, 0x31,
	0xb6, 0x5d, 0xa4, 0x5b, 0x81, 0xa3, 0x5b, 0xbe, 0x8f, 0x99, 0xc5, 0x1c, 0xec, 0xd3, 0x58, 0x28,
	0x57, 0x08, 0xa2, 0xcc, 0xba, 0xe3, 0xf8, 0xb6, 0x6e, 0x13, 0x1c, 0x06, 0x43, 0xf3, 0x4d, 0x58,
	0xca, 0x30, 0x41, 0xb1, 0x59, 0xad, 0x83, 0x8d, 0x3f, 0xa2, 0x2c, 0x06, 0xb2, 0x1d, 0xca, 0xc8,
	0xc0, 0xc0, 0x21, 0x43, 0x64, 0xbf, 0xd7, 0x23, 0x88, 0x52, 0x03, 0x9d, 0x86, 0x88, 0x32, 0xf5,
	0xb1, 0x04, 0xd4, 0x22, 0x15, 0x0d, 0xb0, 0x4f, 0x11, 0x6c, 0x82, 0x15, 0x22, 0x04, 0x26, 0xe1,
	0x0a, 0xd3, 0x8a, 0x25, 0x55, 0xa9, 0x26, 0x35, 0x16, 0x8d, 0x0a, 0xc9, 0xf2, 0x87, 0xfb, 0x60,
	0x3d, 0x22, 0x46, 0x66, 0x9e, 0x77, 0x89, 0x7b, 0xcb, 0x5c, 0x94, 0x89, 0xa0, 0xae, 0x80, 0x0a,
	0x07, 0xfc, 0x35, 0xaa, 0xf8, 0xd0, 0xff, 0x0f, 0x0f, 0xd1, 0x9f, 0x95, 0xc0, 0x72, 0xfa, 0x45,
	0xe0, 0x6e, 0x80, 0x25, 0xde, 0x20, 0xd3, 0x0f, 0xbd, 0x0e, 0x22, 0x9c, 0x71, 0xce, 0x28, 0x73,
	0xdb, 0xef, 0xdc, 0x04, 0x0f, 0x01, 0xc4, 0x01, 0x22, 0x16, 0xc3, 0xc4, 0xa4, 0x88, 0x99, 0x81,
	0x45, 0x2c, 0x8f, 0xe3, 0x94, 0x77, 0x57, 0xb5, 0xa4, 0xd1, 0xda, 0xb1, 0x10, 0xb5, 0x11, 0x6b,
	0x45, 0x12, 0xe3, 0x63, 0x9c, 0xb2, 0xc0, 0x3a, 0xf8, 0xd0, 0x73, 0x7c, 0xc7, 0x0b, 0x3d, 0x93,
	0xd7, 0x51, 0x9d, 0xe5, 0x45, 0x2d, 0x09, 0x63, 0x3b, 0xb2, 0xc1, 0x26, 0x28, 0x07, 0x18, 0xbb,
	0x71, 0x1e, 0x5a, 0x9d, 0xab, 0xcd, 0x36, 0xca, 0xbb, 0x95, 0x91, 0x44, 0x2d, 0x8c, 0x5d, 0x1e,
	0x8f, 0x1a, 0x20, 0x48, 0x7e, 0xc3, 0x63, 0xf0, 0x59, 0x5c, 0x0a, 0xfa, 0x1f, 0x75, 0xa3, 0x61,
	0x10, 0xa4, 0xf3, 0x9c, 0x74, 0x7d, 0x24, 0x00, 0x6f, 0xc3, 0x81, 0x50, 0xc5, 0xac, 0xd0, 0xbe,
	0x65, 0x53, 0xb7, 0xc0, 0x26, 0xef, 0xda, 0xb0, 0x30, 0xd1, 0x75, 0x3e, 0x68, 0x47, 0x0e, 0x65,
	0xc3, 0xf6, 0x5e, 0x48, 0xe0, 0x8b, 0x09, 0x42, 0xd1, 0xed, 0xbf, 0xc1, 0x72, 0xd2, 0x4a, 0x32,
	0x22, 0x8a, 0x66, 0x23, 0xaa, 0x52, 0xd5, 0x92, 0x01, 0xd5, 0x8e, 0xda, 0x27, 0x59, 0xf1, 0x8c,
	0x0a, 0xce, 0xb0, 0x52, 0x75, 0x53, 0x4c, 0xe7, 0xd0, 0xe7, 0x2f, 0xe4, 0xd8, 0x7d, 0x86, 0x7a,
	0xed, 0xbe, 0x45, 0x50, 0x32, 0xc4, 0xf7, 0x24, 0x50, 0x2f, 0x94, 0x09, 0xd0, 0x7f, 0x41, 0x35,
	0x01, 0x3d, 0x13, 0x12, 0x93, 0x72, 0x8d, 0x40, 0xad, 0x67, 0xa3, 0x8e, 0xc5, 0x33, 0x92, 0x6a,
	0xc7, 0xd3, 0xa8, 0x0a, 0x58, 0xe3, 0x14, 0x7f, 0x62, 0xe6, 0xf8, 0x76, 0x0b, 0x9f, 0x21, 0x62,
	0x44, 0x75, 0x0c, 0x31, 0x4d, 0xb0, 0x9e, 0xf3, 0x2e, 0xf8, 0xd6, 0xc0, 0xa2, 0x1f, 0x7a, 0x71,
	0x6c, 0x31, 0xb3, 0x37, 0x06, 0x58, 0x03, 0xe5, 0x1e, 0xf2, 0xb1, 0xe7, 0xf8, 0xfc, 0xbd, 0x14,
	0xcf, 0xf4, 0x88, 0x49, 0xfd, 0x5c, 0x24, 0x38, 0x6a, 0x9f, 0xb4, 0xe3, 0xa1, 0x38, 0xf0, 0xad,
	0x8e, 0x8b, 0x7a, 0x43, 0x82, 0x16, 0x50, 0xf2, 0x04, 0x02, 0x41, 0x03, 0x9f, 0xba, 0x94, 0x99,
	0x62, 0xa6, 0x4c, 0x14, 0x3f, 0x73, 0x98, 0x05, 0xe3, 0x13, 0x97, 0xb2, 0x71, 0xbf, 0xdd, 0x47,
	0x0b, 0x60, 0x9e, 0x87, 0x84, 0xcf, 0x25, 0x20, 0xe7, 0x5f, 0x12, 0xf8, 0xf5, 0x48, 0x67, 0x27,
	0x9e, 0x25, 0x79, 0x7b, 0x4a, 0x75, 0x4c, 0xad, 0xfe, 0x78, 0xf1, 0xfa, 0xdd, 0xc3, 0xd2, 0x77,
	0x70, 0x4f, 0x0f, 0x90, 0xeb, 0x6e, 0x77, 0xfb, 0x96, 0xe3, 0xeb, 0xa9, 0x63, 0x9b, 0x77, 0x82,
	0xe0, 0x7d, 0x09, 0x7c, 0x34, 0x7e, 0x47, 0x60, 0x2d, 0x9d, 0x3e, 0x7d, 0x7c, 0xe4, 0x8d, 0x02,
	0x85, 0x80, 0xd2, 0x38, 0x54, 0x03, 0x6e, 0x15, 0x41, 0xc5, 0xbb, 0xed, 0x44, 0x49, 0x5f, 0x4a,
	0xe2, 0xcf, 0x97, 0xb7, 0x70, 0x50, 0x4f, 0x27, 0x9d, 0xb0, 0xc3, 0xf2, 0xce, 0xf4, 0x0e, 0x02,
	0xfa, 0x67, 0x0e, 0xfd, 0x03, 0x6c, 0x16, 0x41, 0x67, 0x6e, 0xbb, 0xe9, 0x46, 0x88, 0x2f, 0x24,
	0xb0, 0x5a, 0xb0, 0x8a, 0x70, 0x3b, 0x8f, 0x28, 0x73, 0xb3, 0x65, 0x6d, 0x5a, 0xb9, 0xc0, 0xff,
	0x89, 0xe3, 0x37, 0xe1, 0xb7, 0x53, 0xe1, 0xa7, 0x6e, 0x00, 0x7c, 0x22, 0x89, 0x6f, 0x4d, 0x7a,
	0x43, 0xe1, 0x97, 0x69, 0x8e, 0x9c, 0x1d, 0x97, 0x1b, 0x93, 0x85, 0x02, 0xb5, 0xc9, 0x51, 0x77,
	0xa0, 0x56, 0x84, 0x7a, 0x97, 0x7b, 0x9b, 0x41, 0xe4, 0x6e, 0xf2, 0x3e, 0xc3, 0xa7, 0x92, 0xf8,
	0xec, 0xdd, 0x5a, 0x62, 0x78, 0x2b, 0x79, 0xde, 0x21, 0x90, 0xbf, 0x9a, 0x42, 0x29, 0x38, 0xbf,
	0xe7, 0x9c, 0xdf, 0x40, 0xbd, 0x88, 0x33, 0xe3, 0x66, 0xfc, 0xf2, 0xdb, 0xab, 0x2b, 0x45, 0xba,
	0xbc, 0x52, 0xa4, 0xb7, 0x57, 0x8a, 0xf4, 0xe0, 0x5a, 0x99, 0xb9, 0xbc, 0x56, 0x66, 0xde, 0x5c,
	0x2b, 0x33, 0xff, 0xec, 0xd8, 0x0e, 0xeb, 0x87, 0x1d, 0xad, 0x8b, 0xbd, 0xd1, 0xa0, 0xd1, 0xcf,
	0x2e, 0x26, 0x48, 0x3f, 0x1f, 0x89, 0xcf, 0x06, 0x01, 0xa2, 0x9d, 0x0f, 0xf8, 0xbf, 0x34, 0x7b,
	0xef, 0x03, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x7a, 0x81, 0xed, 0x42, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// GetLSTRegistryRouterAddress returns the LST registry router address
	QueryRegistryRouterAddress(ctx context.Context, in *QueryRegistryRouterAddressRequest, opts ...grpc.CallOption) (*QueryRegistryRouterAddressResponse, error)
	// QueryGroupInfo returns the group info
	QueryGroupInfo(ctx context.Context, in *QueryGroupInfoRequest, opts ...grpc.CallOption) (*QueryGroupInfoResponse, error)
	// QueryOperatorRegistrationList returns the operator registration list
	QueryOperatorRegistrationList(ctx context.Context, in *QueryOperatorRegistrationListRequest, opts ...grpc.CallOption) (*QueryOperatorRegistrationListResponse, error)
	// QueryOperatorWeightedShares returns the operator weighted shares
	QueryOperatorWeightedShares(ctx context.Context, in *QueryOperatorWeightedSharesRequest, opts ...grpc.CallOption) (*QueryOperatorWeightedSharesResponse, error)
	// QueryVotingPowerRatio returns the voting power ratio
	QueryVotingPowerRatio(ctx context.Context, in *QueryVotingPowerRatioRequest, opts ...grpc.CallOption) (*QueryVotingPowerRatioResponse, error)
	// QueryLSTStakingEnabled returns the LST staking enabled status
	QueryLSTStakingEnabled(ctx context.Context, in *QueryLSTStakingEnabledRequest, opts ...grpc.CallOption) (*QueryLSTStakingEnabledResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryRegistryRouterAddress(ctx context.Context, in *QueryRegistryRouterAddressRequest, opts ...grpc.CallOption) (*QueryRegistryRouterAddressResponse, error) {
	out := new(QueryRegistryRouterAddressResponse)
	err := c.cc.Invoke(ctx, "/xsecurity.Query/QueryRegistryRouterAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGroupInfo(ctx context.Context, in *QueryGroupInfoRequest, opts ...grpc.CallOption) (*QueryGroupInfoResponse, error) {
	out := new(QueryGroupInfoResponse)
	err := c.cc.Invoke(ctx, "/xsecurity.Query/QueryGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOperatorRegistrationList(ctx context.Context, in *QueryOperatorRegistrationListRequest, opts ...grpc.CallOption) (*QueryOperatorRegistrationListResponse, error) {
	out := new(QueryOperatorRegistrationListResponse)
	err := c.cc.Invoke(ctx, "/xsecurity.Query/QueryOperatorRegistrationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOperatorWeightedShares(ctx context.Context, in *QueryOperatorWeightedSharesRequest, opts ...grpc.CallOption) (*QueryOperatorWeightedSharesResponse, error) {
	out := new(QueryOperatorWeightedSharesResponse)
	err := c.cc.Invoke(ctx, "/xsecurity.Query/QueryOperatorWeightedShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVotingPowerRatio(ctx context.Context, in *QueryVotingPowerRatioRequest, opts ...grpc.CallOption) (*QueryVotingPowerRatioResponse, error) {
	out := new(QueryVotingPowerRatioResponse)
	err := c.cc.Invoke(ctx, "/xsecurity.Query/QueryVotingPowerRatio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLSTStakingEnabled(ctx context.Context, in *QueryLSTStakingEnabledRequest, opts ...grpc.CallOption) (*QueryLSTStakingEnabledResponse, error) {
	out := new(QueryLSTStakingEnabledResponse)
	err := c.cc.Invoke(ctx, "/xsecurity.Query/QueryLSTStakingEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// GetLSTRegistryRouterAddress returns the LST registry router address
	QueryRegistryRouterAddress(context.Context, *QueryRegistryRouterAddressRequest) (*QueryRegistryRouterAddressResponse, error)
	// QueryGroupInfo returns the group info
	QueryGroupInfo(context.Context, *QueryGroupInfoRequest) (*QueryGroupInfoResponse, error)
	// QueryOperatorRegistrationList returns the operator registration list
	QueryOperatorRegistrationList(context.Context, *QueryOperatorRegistrationListRequest) (*QueryOperatorRegistrationListResponse, error)
	// QueryOperatorWeightedShares returns the operator weighted shares
	QueryOperatorWeightedShares(context.Context, *QueryOperatorWeightedSharesRequest) (*QueryOperatorWeightedSharesResponse, error)
	// QueryVotingPowerRatio returns the voting power ratio
	QueryVotingPowerRatio(context.Context, *QueryVotingPowerRatioRequest) (*QueryVotingPowerRatioResponse, error)
	// QueryLSTStakingEnabled returns the LST staking enabled status
	QueryLSTStakingEnabled(context.Context, *QueryLSTStakingEnabledRequest) (*QueryLSTStakingEnabledResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryRegistryRouterAddress(ctx context.Context, req *QueryRegistryRouterAddressRequest) (*QueryRegistryRouterAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRegistryRouterAddress not implemented")
}
func (*UnimplementedQueryServer) QueryGroupInfo(ctx context.Context, req *QueryGroupInfoRequest) (*QueryGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGroupInfo not implemented")
}
func (*UnimplementedQueryServer) QueryOperatorRegistrationList(ctx context.Context, req *QueryOperatorRegistrationListRequest) (*QueryOperatorRegistrationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOperatorRegistrationList not implemented")
}
func (*UnimplementedQueryServer) QueryOperatorWeightedShares(ctx context.Context, req *QueryOperatorWeightedSharesRequest) (*QueryOperatorWeightedSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOperatorWeightedShares not implemented")
}
func (*UnimplementedQueryServer) QueryVotingPowerRatio(ctx context.Context, req *QueryVotingPowerRatioRequest) (*QueryVotingPowerRatioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVotingPowerRatio not implemented")
}
func (*UnimplementedQueryServer) QueryLSTStakingEnabled(ctx context.Context, req *QueryLSTStakingEnabledRequest) (*QueryLSTStakingEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLSTStakingEnabled not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryRegistryRouterAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegistryRouterAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRegistryRouterAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xsecurity.Query/QueryRegistryRouterAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRegistryRouterAddress(ctx, req.(*QueryRegistryRouterAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xsecurity.Query/QueryGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGroupInfo(ctx, req.(*QueryGroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOperatorRegistrationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorRegistrationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOperatorRegistrationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xsecurity.Query/QueryOperatorRegistrationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOperatorRegistrationList(ctx, req.(*QueryOperatorRegistrationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOperatorWeightedShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorWeightedSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOperatorWeightedShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xsecurity.Query/QueryOperatorWeightedShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOperatorWeightedShares(ctx, req.(*QueryOperatorWeightedSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVotingPowerRatio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVotingPowerRatioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVotingPowerRatio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xsecurity.Query/QueryVotingPowerRatio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVotingPowerRatio(ctx, req.(*QueryVotingPowerRatioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLSTStakingEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLSTStakingEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLSTStakingEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xsecurity.Query/QueryLSTStakingEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLSTStakingEnabled(ctx, req.(*QueryLSTStakingEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xsecurity.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryRegistryRouterAddress",
			Handler:    _Query_QueryRegistryRouterAddress_Handler,
		},
		{
			MethodName: "QueryGroupInfo",
			Handler:    _Query_QueryGroupInfo_Handler,
		},
		{
			MethodName: "QueryOperatorRegistrationList",
			Handler:    _Query_QueryOperatorRegistrationList_Handler,
		},
		{
			MethodName: "QueryOperatorWeightedShares",
			Handler:    _Query_QueryOperatorWeightedShares_Handler,
		},
		{
			MethodName: "QueryVotingPowerRatio",
			Handler:    _Query_QueryVotingPowerRatio_Handler,
		},
		{
			MethodName: "QueryLSTStakingEnabled",
			Handler:    _Query_QueryLSTStakingEnabled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xsecurity/query.proto",
}

func (m *QueryRegistryRouterAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegistryRouterAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegistryRouterAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRegistryRouterAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegistryRouterAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegistryRouterAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakeRegistryRouterAddress) > 0 {
		i -= len(m.StakeRegistryRouterAddress)
		copy(dAtA[i:], m.StakeRegistryRouterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakeRegistryRouterAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RegistryRouterAddress) > 0 {
		i -= len(m.RegistryRouterAddress)
		copy(dAtA[i:], m.RegistryRouterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RegistryRouterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGroupInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGroupInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGroupInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGroupInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGroupInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGroupInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupEjectionParam != nil {
		{
			size, err := m.GroupEjectionParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PoolParams) > 0 {
		for iNdEx := len(m.PoolParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MinimumStake) > 0 {
		i -= len(m.MinimumStake)
		copy(dAtA[i:], m.MinimumStake)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MinimumStake)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OperatorSetParam != nil {
		{
			size, err := m.OperatorSetParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.GroupNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GroupNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorRegistrationListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorRegistrationListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorRegistrationListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOperatorRegistrationListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorRegistrationListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorRegistrationListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorRegistrations) > 0 {
		for iNdEx := len(m.OperatorRegistrations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorRegistrations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorWeightedSharesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorWeightedSharesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorWeightedSharesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOperatorWeightedSharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorWeightedSharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorWeightedSharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorWeightedShares) > 0 {
		for iNdEx := len(m.OperatorWeightedShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorWeightedShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVotingPowerRatioRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVotingPowerRatioRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVotingPowerRatioRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryVotingPowerRatioResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVotingPowerRatioResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVotingPowerRatioResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Denominator != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Denominator))
		i--
		dAtA[i] = 0x10
	}
	if m.Numerator != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Numerator))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLSTStakingEnabledRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLSTStakingEnabledRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLSTStakingEnabledRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLSTStakingEnabledResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLSTStakingEnabledResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLSTStakingEnabledResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LstStakingEnabled {
		i--
		if m.LstStakingEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRegistryRouterAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRegistryRouterAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegistryRouterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StakeRegistryRouterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGroupInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGroupInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupNumber != 0 {
		n += 1 + sovQuery(uint64(m.GroupNumber))
	}
	if m.OperatorSetParam != nil {
		l = m.OperatorSetParam.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MinimumStake)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.PoolParams) > 0 {
		for _, e := range m.PoolParams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.GroupEjectionParam != nil {
		l = m.GroupEjectionParam.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorRegistrationListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOperatorRegistrationListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorRegistrations) > 0 {
		for _, e := range m.OperatorRegistrations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOperatorWeightedSharesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOperatorWeightedSharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorWeightedShares) > 0 {
		for _, e := range m.OperatorWeightedShares {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryVotingPowerRatioRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryVotingPowerRatioResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Numerator != 0 {
		n += 1 + sovQuery(uint64(m.Numerator))
	}
	if m.Denominator != 0 {
		n += 1 + sovQuery(uint64(m.Denominator))
	}
	return n
}

func (m *QueryLSTStakingEnabledRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLSTStakingEnabledResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LstStakingEnabled {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryRegistryRouterAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegistryRouterAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegistryRouterAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegistryRouterAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegistryRouterAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegistryRouterAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRegistryRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeRegistryRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGroupInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGroupInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGroupInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGroupInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGroupInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGroupInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNumber", wireType)
			}
			m.GroupNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorSetParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperatorSetParam == nil {
				m.OperatorSetParam = &types.OperatorSetParam{}
			}
			if err := m.OperatorSetParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinimumStake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolParams = append(m.PoolParams, &types.PoolParams{})
			if err := m.PoolParams[len(m.PoolParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupEjectionParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupEjectionParam == nil {
				m.GroupEjectionParam = &types.GroupEjectionParam{}
			}
			if err := m.GroupEjectionParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorRegistrationListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorRegistrationListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorRegistrationListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorRegistrationListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorRegistrationListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorRegistrationListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorRegistrations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorRegistrations = append(m.OperatorRegistrations, &LSTOperatorRegistration{})
			if err := m.OperatorRegistrations[len(m.OperatorRegistrations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorWeightedSharesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorWeightedSharesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorWeightedSharesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorWeightedSharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorWeightedSharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorWeightedSharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorWeightedShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorWeightedShares = append(m.OperatorWeightedShares, &LSTOperatorWeightedShare{})
			if err := m.OperatorWeightedShares[len(m.OperatorWeightedShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVotingPowerRatioRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVotingPowerRatioRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVotingPowerRatioRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVotingPowerRatioResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVotingPowerRatioResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVotingPowerRatioResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numerator", wireType)
			}
			m.Numerator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Numerator |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denominator", wireType)
			}
			m.Denominator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Denominator |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLSTStakingEnabledRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLSTStakingEnabledRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLSTStakingEnabledRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLSTStakingEnabledResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLSTStakingEnabledResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLSTStakingEnabledResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LstStakingEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LstStakingEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
