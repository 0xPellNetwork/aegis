// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xsecurity/store.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/0xPellNetwork/aegis/x/restaking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LSTRegistryRouterAddress is the address of the LST registry router and stake
// registry router
type LSTRegistryRouterAddress struct {
	RegistryRouterAddress      string `protobuf:"bytes,1,opt,name=registry_router_address,json=registryRouterAddress,proto3" json:"registry_router_address,omitempty"`
	StakeRegistryRouterAddress string `protobuf:"bytes,2,opt,name=stake_registry_router_address,json=stakeRegistryRouterAddress,proto3" json:"stake_registry_router_address,omitempty"`
}

func (m *LSTRegistryRouterAddress) Reset()         { *m = LSTRegistryRouterAddress{} }
func (m *LSTRegistryRouterAddress) String() string { return proto.CompactTextString(m) }
func (*LSTRegistryRouterAddress) ProtoMessage()    {}
func (*LSTRegistryRouterAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_438e3626022d61c6, []int{0}
}
func (m *LSTRegistryRouterAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LSTRegistryRouterAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LSTRegistryRouterAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LSTRegistryRouterAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LSTRegistryRouterAddress.Merge(m, src)
}
func (m *LSTRegistryRouterAddress) XXX_Size() int {
	return m.Size()
}
func (m *LSTRegistryRouterAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_LSTRegistryRouterAddress.DiscardUnknown(m)
}

var xxx_messageInfo_LSTRegistryRouterAddress proto.InternalMessageInfo

func (m *LSTRegistryRouterAddress) GetRegistryRouterAddress() string {
	if m != nil {
		return m.RegistryRouterAddress
	}
	return ""
}

func (m *LSTRegistryRouterAddress) GetStakeRegistryRouterAddress() string {
	if m != nil {
		return m.StakeRegistryRouterAddress
	}
	return ""
}

// LSTGroupInfo is the information of a LST group
type LSTGroupInfo struct {
	GroupNumber        uint64                    `protobuf:"varint,1,opt,name=group_number,json=groupNumber,proto3" json:"group_number,omitempty"`
	OperatorSetParam   *types.OperatorSetParam   `protobuf:"bytes,2,opt,name=operator_set_param,json=operatorSetParam,proto3" json:"operator_set_param,omitempty"`
	MinimumStake       cosmossdk_io_math.Int     `protobuf:"bytes,3,opt,name=minimum_stake,json=minimumStake,proto3,customtype=cosmossdk.io/math.Int" json:"minimum_stake"`
	PoolParams         []*types.PoolParams       `protobuf:"bytes,4,rep,name=pool_params,json=poolParams,proto3" json:"pool_params,omitempty"`
	GroupEjectionParam *types.GroupEjectionParam `protobuf:"bytes,5,opt,name=group_ejection_param,json=groupEjectionParam,proto3" json:"group_ejection_param,omitempty"`
}

func (m *LSTGroupInfo) Reset()         { *m = LSTGroupInfo{} }
func (m *LSTGroupInfo) String() string { return proto.CompactTextString(m) }
func (*LSTGroupInfo) ProtoMessage()    {}
func (*LSTGroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_438e3626022d61c6, []int{1}
}
func (m *LSTGroupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LSTGroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LSTGroupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LSTGroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LSTGroupInfo.Merge(m, src)
}
func (m *LSTGroupInfo) XXX_Size() int {
	return m.Size()
}
func (m *LSTGroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LSTGroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LSTGroupInfo proto.InternalMessageInfo

func (m *LSTGroupInfo) GetGroupNumber() uint64 {
	if m != nil {
		return m.GroupNumber
	}
	return 0
}

func (m *LSTGroupInfo) GetOperatorSetParam() *types.OperatorSetParam {
	if m != nil {
		return m.OperatorSetParam
	}
	return nil
}

func (m *LSTGroupInfo) GetPoolParams() []*types.PoolParams {
	if m != nil {
		return m.PoolParams
	}
	return nil
}

func (m *LSTGroupInfo) GetGroupEjectionParam() *types.GroupEjectionParam {
	if m != nil {
		return m.GroupEjectionParam
	}
	return nil
}

// PubkeyRegistrationParams is the parameters for registering a pubkey
type PubkeyRegistrationParams struct {
	PubkeyRegistrationSignature *G1Point `protobuf:"bytes,1,opt,name=pubkey_registration_signature,json=pubkeyRegistrationSignature,proto3" json:"pubkey_registration_signature,omitempty"`
	PubkeyG1                    *G1Point `protobuf:"bytes,2,opt,name=pubkey_g1,json=pubkeyG1,proto3" json:"pubkey_g1,omitempty"`
	PubkeyG2                    *G2Point `protobuf:"bytes,3,opt,name=pubkey_g2,json=pubkeyG2,proto3" json:"pubkey_g2,omitempty"`
}

func (m *PubkeyRegistrationParams) Reset()         { *m = PubkeyRegistrationParams{} }
func (m *PubkeyRegistrationParams) String() string { return proto.CompactTextString(m) }
func (*PubkeyRegistrationParams) ProtoMessage()    {}
func (*PubkeyRegistrationParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_438e3626022d61c6, []int{2}
}
func (m *PubkeyRegistrationParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubkeyRegistrationParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubkeyRegistrationParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubkeyRegistrationParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubkeyRegistrationParams.Merge(m, src)
}
func (m *PubkeyRegistrationParams) XXX_Size() int {
	return m.Size()
}
func (m *PubkeyRegistrationParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PubkeyRegistrationParams.DiscardUnknown(m)
}

var xxx_messageInfo_PubkeyRegistrationParams proto.InternalMessageInfo

func (m *PubkeyRegistrationParams) GetPubkeyRegistrationSignature() *G1Point {
	if m != nil {
		return m.PubkeyRegistrationSignature
	}
	return nil
}

func (m *PubkeyRegistrationParams) GetPubkeyG1() *G1Point {
	if m != nil {
		return m.PubkeyG1
	}
	return nil
}

func (m *PubkeyRegistrationParams) GetPubkeyG2() *G2Point {
	if m != nil {
		return m.PubkeyG2
	}
	return nil
}

// G1Point represents a point on the BN254 curve
type G1Point struct {
	X cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=x,proto3,customtype=cosmossdk.io/math.Int" json:"x"`
	Y cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=y,proto3,customtype=cosmossdk.io/math.Int" json:"y"`
}

func (m *G1Point) Reset()         { *m = G1Point{} }
func (m *G1Point) String() string { return proto.CompactTextString(m) }
func (*G1Point) ProtoMessage()    {}
func (*G1Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_438e3626022d61c6, []int{3}
}
func (m *G1Point) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *G1Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_G1Point.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *G1Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_G1Point.Merge(m, src)
}
func (m *G1Point) XXX_Size() int {
	return m.Size()
}
func (m *G1Point) XXX_DiscardUnknown() {
	xxx_messageInfo_G1Point.DiscardUnknown(m)
}

var xxx_messageInfo_G1Point proto.InternalMessageInfo

// G2Point represents a point on the BN254 curve, with field elements encoded as
// arrays
type G2Point struct {
	X []cosmossdk_io_math.Int `protobuf:"bytes,1,rep,name=x,proto3,customtype=cosmossdk.io/math.Int" json:"x"`
	Y []cosmossdk_io_math.Int `protobuf:"bytes,2,rep,name=y,proto3,customtype=cosmossdk.io/math.Int" json:"y"`
}

func (m *G2Point) Reset()         { *m = G2Point{} }
func (m *G2Point) String() string { return proto.CompactTextString(m) }
func (*G2Point) ProtoMessage()    {}
func (*G2Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_438e3626022d61c6, []int{4}
}
func (m *G2Point) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *G2Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_G2Point.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *G2Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_G2Point.Merge(m, src)
}
func (m *G2Point) XXX_Size() int {
	return m.Size()
}
func (m *G2Point) XXX_DiscardUnknown() {
	xxx_messageInfo_G2Point.DiscardUnknown(m)
}

var xxx_messageInfo_G2Point proto.InternalMessageInfo

// RegisterOperatorParam is the parameters for registering an operator
type RegisterOperatorParam struct {
	Socket       string                            `protobuf:"bytes,1,opt,name=socket,proto3" json:"socket,omitempty"`
	PubkeyParams *PubkeyRegistrationParams         `protobuf:"bytes,2,opt,name=pubkey_params,json=pubkeyParams,proto3" json:"pubkey_params,omitempty"`
	Signature    *types.SignatureWithSaltAndExpiry `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *RegisterOperatorParam) Reset()         { *m = RegisterOperatorParam{} }
func (m *RegisterOperatorParam) String() string { return proto.CompactTextString(m) }
func (*RegisterOperatorParam) ProtoMessage()    {}
func (*RegisterOperatorParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_438e3626022d61c6, []int{5}
}
func (m *RegisterOperatorParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterOperatorParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterOperatorParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterOperatorParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterOperatorParam.Merge(m, src)
}
func (m *RegisterOperatorParam) XXX_Size() int {
	return m.Size()
}
func (m *RegisterOperatorParam) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterOperatorParam.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterOperatorParam proto.InternalMessageInfo

func (m *RegisterOperatorParam) GetSocket() string {
	if m != nil {
		return m.Socket
	}
	return ""
}

func (m *RegisterOperatorParam) GetPubkeyParams() *PubkeyRegistrationParams {
	if m != nil {
		return m.PubkeyParams
	}
	return nil
}

func (m *RegisterOperatorParam) GetSignature() *types.SignatureWithSaltAndExpiry {
	if m != nil {
		return m.Signature
	}
	return nil
}

// SignatureWithSaltAndExpiry holds the operator's signature details
type LSTOperatorRegistration struct {
	OperatorAddress       string                 `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	OperatorId            []byte                 `protobuf:"bytes,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	RegisterOperatorParam *RegisterOperatorParam `protobuf:"bytes,3,opt,name=register_operator_param,json=registerOperatorParam,proto3" json:"register_operator_param,omitempty"`
	ValidatorAddress      string                 `protobuf:"bytes,4,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *LSTOperatorRegistration) Reset()         { *m = LSTOperatorRegistration{} }
func (m *LSTOperatorRegistration) String() string { return proto.CompactTextString(m) }
func (*LSTOperatorRegistration) ProtoMessage()    {}
func (*LSTOperatorRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_438e3626022d61c6, []int{6}
}
func (m *LSTOperatorRegistration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LSTOperatorRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LSTOperatorRegistration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LSTOperatorRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LSTOperatorRegistration.Merge(m, src)
}
func (m *LSTOperatorRegistration) XXX_Size() int {
	return m.Size()
}
func (m *LSTOperatorRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_LSTOperatorRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_LSTOperatorRegistration proto.InternalMessageInfo

func (m *LSTOperatorRegistration) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *LSTOperatorRegistration) GetOperatorId() []byte {
	if m != nil {
		return m.OperatorId
	}
	return nil
}

func (m *LSTOperatorRegistration) GetRegisterOperatorParam() *RegisterOperatorParam {
	if m != nil {
		return m.RegisterOperatorParam
	}
	return nil
}

func (m *LSTOperatorRegistration) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

// LSTOperatorRegistrationList is a list of LST operator registrations
type LSTOperatorRegistrationList struct {
	OperatorRegistrations []*LSTOperatorRegistration `protobuf:"bytes,1,rep,name=operator_registrations,json=operatorRegistrations,proto3" json:"operator_registrations,omitempty"`
}

func (m *LSTOperatorRegistrationList) Reset()         { *m = LSTOperatorRegistrationList{} }
func (m *LSTOperatorRegistrationList) String() string { return proto.CompactTextString(m) }
func (*LSTOperatorRegistrationList) ProtoMessage()    {}
func (*LSTOperatorRegistrationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_438e3626022d61c6, []int{7}
}
func (m *LSTOperatorRegistrationList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LSTOperatorRegistrationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LSTOperatorRegistrationList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LSTOperatorRegistrationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LSTOperatorRegistrationList.Merge(m, src)
}
func (m *LSTOperatorRegistrationList) XXX_Size() int {
	return m.Size()
}
func (m *LSTOperatorRegistrationList) XXX_DiscardUnknown() {
	xxx_messageInfo_LSTOperatorRegistrationList.DiscardUnknown(m)
}

var xxx_messageInfo_LSTOperatorRegistrationList proto.InternalMessageInfo

func (m *LSTOperatorRegistrationList) GetOperatorRegistrations() []*LSTOperatorRegistration {
	if m != nil {
		return m.OperatorRegistrations
	}
	return nil
}

// LSTOperatorWeightedShare stores the weighted share of an operator
type LSTOperatorWeightedShare struct {
	OperatorAddress string                `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	ValidatorAddr   string                `protobuf:"bytes,2,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	WeightedShare   cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=weighted_share,json=weightedShare,proto3,customtype=cosmossdk.io/math.Int" json:"weighted_share"`
}

func (m *LSTOperatorWeightedShare) Reset()         { *m = LSTOperatorWeightedShare{} }
func (m *LSTOperatorWeightedShare) String() string { return proto.CompactTextString(m) }
func (*LSTOperatorWeightedShare) ProtoMessage()    {}
func (*LSTOperatorWeightedShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_438e3626022d61c6, []int{8}
}
func (m *LSTOperatorWeightedShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LSTOperatorWeightedShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LSTOperatorWeightedShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LSTOperatorWeightedShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LSTOperatorWeightedShare.Merge(m, src)
}
func (m *LSTOperatorWeightedShare) XXX_Size() int {
	return m.Size()
}
func (m *LSTOperatorWeightedShare) XXX_DiscardUnknown() {
	xxx_messageInfo_LSTOperatorWeightedShare.DiscardUnknown(m)
}

var xxx_messageInfo_LSTOperatorWeightedShare proto.InternalMessageInfo

func (m *LSTOperatorWeightedShare) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *LSTOperatorWeightedShare) GetValidatorAddr() string {
	if m != nil {
		return m.ValidatorAddr
	}
	return ""
}

// LSTOperatorWeightedShareList stores a list of OperatorWeightedShare
type LSTOperatorWeightedShareList struct {
	OperatorWeightedShares []*LSTOperatorWeightedShare `protobuf:"bytes,1,rep,name=operator_weighted_shares,json=operatorWeightedShares,proto3" json:"operator_weighted_shares,omitempty"`
}

func (m *LSTOperatorWeightedShareList) Reset()         { *m = LSTOperatorWeightedShareList{} }
func (m *LSTOperatorWeightedShareList) String() string { return proto.CompactTextString(m) }
func (*LSTOperatorWeightedShareList) ProtoMessage()    {}
func (*LSTOperatorWeightedShareList) Descriptor() ([]byte, []int) {
	return fileDescriptor_438e3626022d61c6, []int{9}
}
func (m *LSTOperatorWeightedShareList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LSTOperatorWeightedShareList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LSTOperatorWeightedShareList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LSTOperatorWeightedShareList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LSTOperatorWeightedShareList.Merge(m, src)
}
func (m *LSTOperatorWeightedShareList) XXX_Size() int {
	return m.Size()
}
func (m *LSTOperatorWeightedShareList) XXX_DiscardUnknown() {
	xxx_messageInfo_LSTOperatorWeightedShareList.DiscardUnknown(m)
}

var xxx_messageInfo_LSTOperatorWeightedShareList proto.InternalMessageInfo

func (m *LSTOperatorWeightedShareList) GetOperatorWeightedShares() []*LSTOperatorWeightedShare {
	if m != nil {
		return m.OperatorWeightedShares
	}
	return nil
}

// LSTVotingPowerRatio is the ratio of voting power
type LSTVotingPowerRatio struct {
	Numerator   cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=numerator,proto3,customtype=cosmossdk.io/math.Int" json:"numerator"`
	Denominator cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=denominator,proto3,customtype=cosmossdk.io/math.Int" json:"denominator"`
}

func (m *LSTVotingPowerRatio) Reset()         { *m = LSTVotingPowerRatio{} }
func (m *LSTVotingPowerRatio) String() string { return proto.CompactTextString(m) }
func (*LSTVotingPowerRatio) ProtoMessage()    {}
func (*LSTVotingPowerRatio) Descriptor() ([]byte, []int) {
	return fileDescriptor_438e3626022d61c6, []int{10}
}
func (m *LSTVotingPowerRatio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LSTVotingPowerRatio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LSTVotingPowerRatio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LSTVotingPowerRatio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LSTVotingPowerRatio.Merge(m, src)
}
func (m *LSTVotingPowerRatio) XXX_Size() int {
	return m.Size()
}
func (m *LSTVotingPowerRatio) XXX_DiscardUnknown() {
	xxx_messageInfo_LSTVotingPowerRatio.DiscardUnknown(m)
}

var xxx_messageInfo_LSTVotingPowerRatio proto.InternalMessageInfo

// LSTStakingEnabled is the enable status of LST staking
type LSTStakingEnabled struct {
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *LSTStakingEnabled) Reset()         { *m = LSTStakingEnabled{} }
func (m *LSTStakingEnabled) String() string { return proto.CompactTextString(m) }
func (*LSTStakingEnabled) ProtoMessage()    {}
func (*LSTStakingEnabled) Descriptor() ([]byte, []int) {
	return fileDescriptor_438e3626022d61c6, []int{11}
}
func (m *LSTStakingEnabled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LSTStakingEnabled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LSTStakingEnabled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LSTStakingEnabled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LSTStakingEnabled.Merge(m, src)
}
func (m *LSTStakingEnabled) XXX_Size() int {
	return m.Size()
}
func (m *LSTStakingEnabled) XXX_DiscardUnknown() {
	xxx_messageInfo_LSTStakingEnabled.DiscardUnknown(m)
}

var xxx_messageInfo_LSTStakingEnabled proto.InternalMessageInfo

func (m *LSTStakingEnabled) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func init() {
	proto.RegisterType((*LSTRegistryRouterAddress)(nil), "xsecurity.LSTRegistryRouterAddress")
	proto.RegisterType((*LSTGroupInfo)(nil), "xsecurity.LSTGroupInfo")
	proto.RegisterType((*PubkeyRegistrationParams)(nil), "xsecurity.PubkeyRegistrationParams")
	proto.RegisterType((*G1Point)(nil), "xsecurity.G1Point")
	proto.RegisterType((*G2Point)(nil), "xsecurity.G2Point")
	proto.RegisterType((*RegisterOperatorParam)(nil), "xsecurity.RegisterOperatorParam")
	proto.RegisterType((*LSTOperatorRegistration)(nil), "xsecurity.LSTOperatorRegistration")
	proto.RegisterType((*LSTOperatorRegistrationList)(nil), "xsecurity.LSTOperatorRegistrationList")
	proto.RegisterType((*LSTOperatorWeightedShare)(nil), "xsecurity.LSTOperatorWeightedShare")
	proto.RegisterType((*LSTOperatorWeightedShareList)(nil), "xsecurity.LSTOperatorWeightedShareList")
	proto.RegisterType((*LSTVotingPowerRatio)(nil), "xsecurity.LSTVotingPowerRatio")
	proto.RegisterType((*LSTStakingEnabled)(nil), "xsecurity.LSTStakingEnabled")
}

func init() { proto.RegisterFile("xsecurity/store.proto", fileDescriptor_438e3626022d61c6) }

var fileDescriptor_438e3626022d61c6 = []byte{
	// 878 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xc1, 0x6e, 0xdb, 0x46,
	0x10, 0x35, 0x63, 0x37, 0x89, 0x46, 0x72, 0x9a, 0x6c, 0xa3, 0x44, 0xb0, 0x6b, 0xd9, 0x65, 0x10,
	0x20, 0x45, 0x50, 0x32, 0x66, 0x81, 0x5c, 0x7a, 0x28, 0xec, 0xd6, 0x70, 0x5d, 0x08, 0x89, 0x40,
	0x0a, 0x49, 0x5b, 0xa0, 0x20, 0x28, 0x71, 0x4b, 0x6d, 0x25, 0x72, 0x89, 0xdd, 0x65, 0x2d, 0x1d,
	0xfa, 0x0f, 0x05, 0x8a, 0xfe, 0x48, 0x3f, 0xa0, 0xe7, 0xf4, 0x96, 0x43, 0x0f, 0x45, 0x0f, 0x41,
	0x61, 0x5f, 0xfb, 0x11, 0x05, 0x77, 0x97, 0x34, 0xe9, 0x48, 0x88, 0x7c, 0xa3, 0x66, 0xe6, 0xcd,
	0xbc, 0x79, 0x33, 0x3b, 0x36, 0xb4, 0x67, 0x1c, 0x8f, 0x32, 0x46, 0xc4, 0xdc, 0xe6, 0x82, 0x32,
	0x6c, 0xa5, 0x8c, 0x0a, 0x8a, 0x1a, 0xa5, 0x79, 0xeb, 0x6e, 0x44, 0x23, 0x2a, 0xad, 0x76, 0xfe,
	0xa5, 0x02, 0xb6, 0xda, 0x0c, 0x73, 0x11, 0x4c, 0x48, 0x12, 0xd9, 0x11, 0xa3, 0x59, 0xaa, 0xcc,
	0xe6, 0x6f, 0x06, 0x74, 0x7a, 0xde, 0xc0, 0xc5, 0x11, 0xe1, 0x82, 0xcd, 0x5d, 0x9a, 0x09, 0xcc,
	0x0e, 0xc2, 0x90, 0x61, 0xce, 0xd1, 0x53, 0xb8, 0xcf, 0xb4, 0xc3, 0x67, 0xd2, 0xe3, 0x07, 0xca,
	0xd5, 0x31, 0xf6, 0x8c, 0x47, 0x0d, 0xb7, 0xcd, 0x16, 0xe2, 0x0e, 0x60, 0x27, 0xaf, 0x85, 0xfd,
	0x65, 0xe8, 0x6b, 0x12, 0xbd, 0x25, 0x83, 0x16, 0x96, 0x36, 0xff, 0xbc, 0x06, 0xad, 0x9e, 0x37,
	0x38, 0xce, 0xa9, 0x9e, 0x24, 0x3f, 0x50, 0xf4, 0x11, 0xb4, 0x24, 0x6f, 0x3f, 0xc9, 0xe2, 0x21,
	0x66, 0x92, 0xc0, 0x86, 0xdb, 0x94, 0xb6, 0x67, 0xd2, 0x84, 0x4e, 0x00, 0xd1, 0x14, 0xb3, 0x40,
	0x50, 0xe6, 0x73, 0x2c, 0xfc, 0x34, 0x60, 0x41, 0x2c, 0x6b, 0x35, 0x9d, 0x6d, 0xab, 0xec, 0xdf,
	0x7a, 0xae, 0x83, 0x3c, 0x2c, 0xfa, 0x79, 0x88, 0x7b, 0x9b, 0x5e, 0xb2, 0xa0, 0x43, 0xd8, 0x8c,
	0x49, 0x42, 0xe2, 0x2c, 0xf6, 0x25, 0xc9, 0xce, 0x7a, 0xce, 0xf8, 0x70, 0xe7, 0xd5, 0x9b, 0xdd,
	0xb5, 0x7f, 0xde, 0xec, 0xb6, 0x47, 0x94, 0xc7, 0x94, 0xf3, 0x70, 0x62, 0x11, 0x6a, 0xc7, 0x81,
	0x18, 0x5b, 0x27, 0x89, 0x70, 0x5b, 0x1a, 0xe3, 0xe5, 0x10, 0xf4, 0x14, 0x9a, 0x29, 0xa5, 0x53,
	0x45, 0x83, 0x77, 0x36, 0xf6, 0xd6, 0x1f, 0x35, 0x9d, 0x76, 0x85, 0x47, 0x9f, 0xd2, 0xa9, 0x2c,
	0xc7, 0x5d, 0x48, 0xcb, 0x6f, 0xf4, 0x1c, 0xee, 0xaa, 0x4e, 0xf1, 0x8f, 0x78, 0x24, 0x08, 0x4d,
	0x74, 0x23, 0xef, 0xc9, 0x46, 0x76, 0x2a, 0x09, 0xa4, 0x3a, 0x47, 0x3a, 0x4a, 0xb5, 0x82, 0xa2,
	0xb7, 0x6c, 0xe6, 0x5f, 0x06, 0x74, 0xfa, 0xd9, 0x70, 0x82, 0xe7, 0x5a, 0xeb, 0xa0, 0xf4, 0x71,
	0xf4, 0x02, 0x76, 0x52, 0xe9, 0x2b, 0x86, 0x25, 0x9d, 0x3e, 0x27, 0x51, 0x12, 0x88, 0x8c, 0x61,
	0x29, 0x74, 0xd3, 0x41, 0x56, 0xb9, 0x60, 0xd6, 0xf1, 0x7e, 0x9f, 0x92, 0x44, 0xb8, 0xdb, 0xe9,
	0x5b, 0x49, 0xbd, 0x02, 0x86, 0x6c, 0x68, 0xe8, 0xbc, 0xd1, 0xbe, 0x9e, 0xc1, 0xa2, 0x1c, 0x37,
	0x55, 0xd0, 0xf1, 0x7e, 0x15, 0xe0, 0x48, 0xb9, 0x2f, 0x01, 0x9c, 0x3a, 0xc0, 0x31, 0x47, 0x70,
	0x43, 0x67, 0x41, 0x8f, 0xc1, 0x98, 0xa9, 0x95, 0x7c, 0xd7, 0x88, 0x8c, 0x59, 0x1e, 0x3c, 0x57,
	0x1b, 0xf8, 0xce, 0xe0, 0xb9, 0x2c, 0xe2, 0xd4, 0x8a, 0xac, 0x5f, 0xa5, 0xc8, 0xfa, 0x4a, 0x45,
	0xfe, 0x30, 0xa0, 0xad, 0x54, 0xc4, 0xac, 0x58, 0x4e, 0xb5, 0x87, 0xf7, 0xe0, 0x3a, 0xa7, 0xa3,
	0x09, 0x16, 0xfa, 0xc1, 0xe9, 0x5f, 0xe8, 0x2b, 0xd8, 0xd4, 0x62, 0xe9, 0xed, 0x52, 0x0a, 0x3f,
	0xa8, 0x08, 0xb6, 0x6c, 0xe2, 0x6e, 0x4b, 0x21, 0xf5, 0xfc, 0xbf, 0x80, 0xc6, 0xc5, 0xac, 0x95,
	0xec, 0x0f, 0x2b, 0x2b, 0x56, 0x0e, 0xf4, 0x25, 0x11, 0x63, 0x2f, 0x98, 0x8a, 0x83, 0x24, 0x3c,
	0x9a, 0xa5, 0x84, 0xcd, 0xdd, 0x0b, 0x9c, 0xf9, 0x9f, 0x01, 0xf7, 0x7b, 0xde, 0xa0, 0xe0, 0x5e,
	0x2d, 0x8a, 0x3e, 0x86, 0xf2, 0x79, 0x5d, 0xba, 0x1e, 0xef, 0x17, 0xf6, 0xe2, 0x6e, 0xec, 0x42,
	0xb3, 0x0c, 0x25, 0xa1, 0xec, 0xa9, 0xe5, 0x42, 0x61, 0x3a, 0x09, 0xd1, 0x37, 0xc5, 0x41, 0xc2,
	0xcc, 0x2f, 0x23, 0xd5, 0xeb, 0x50, 0xd4, 0xf7, 0x2a, 0x02, 0x2c, 0x54, 0xb4, 0x38, 0x59, 0x97,
	0x85, 0x7e, 0x0c, 0x77, 0x7e, 0x0a, 0xa6, 0x24, 0xac, 0xd1, 0xdc, 0x90, 0x34, 0x6f, 0x97, 0x8e,
	0xe2, 0x38, 0xcd, 0x60, 0x7b, 0x49, 0xb7, 0x3d, 0xc2, 0x05, 0xfa, 0x16, 0xee, 0x95, 0xe4, 0xaa,
	0x8f, 0x8a, 0xcb, 0xed, 0x69, 0x3a, 0x66, 0x85, 0xe4, 0x92, 0x3c, 0x6e, 0x9b, 0x2e, 0xb0, 0x72,
	0xf3, 0x77, 0x75, 0xae, 0x0b, 0xc8, 0x4b, 0x4c, 0xa2, 0xb1, 0xc0, 0xa1, 0x37, 0x0e, 0x18, 0xbe,
	0x8a, 0xd2, 0x0f, 0xe1, 0x56, 0xbd, 0x5d, 0x7d, 0x92, 0x37, 0x6b, 0xbd, 0xa2, 0x2f, 0xe1, 0xd6,
	0xa9, 0x2e, 0xe1, 0xf3, 0xbc, 0xc6, 0x6a, 0x77, 0x70, 0xf3, 0xb4, 0xca, 0xcb, 0xfc, 0x19, 0x3e,
	0x5c, 0xc6, 0x59, 0xea, 0xf5, 0x3d, 0x74, 0x4a, 0xde, 0xf5, 0x72, 0x85, 0x62, 0x0f, 0x16, 0x2b,
	0x56, 0x4b, 0xe5, 0x96, 0xa2, 0xd7, 0xcc, 0xdc, 0xfc, 0xd5, 0x80, 0x0f, 0x7a, 0xde, 0xe0, 0x05,
	0x15, 0x24, 0x89, 0xfa, 0xf4, 0x14, 0x33, 0x37, 0x57, 0x13, 0x7d, 0x06, 0x8d, 0x24, 0x8b, 0x15,
	0x64, 0xb5, 0xe3, 0x71, 0x11, 0x8f, 0x3e, 0x87, 0x66, 0x88, 0x13, 0x1a, 0x93, 0x44, 0xc2, 0x57,
	0x3a, 0x27, 0x55, 0x84, 0xf9, 0x09, 0xdc, 0xe9, 0x79, 0x03, 0x4f, 0x3d, 0xb3, 0xa3, 0x24, 0x18,
	0x4e, 0x71, 0x88, 0x3a, 0x70, 0x03, 0xab, 0x4f, 0x49, 0xe8, 0xa6, 0x5b, 0xfc, 0x3c, 0xfc, 0xfa,
	0xd5, 0x59, 0xd7, 0x78, 0x7d, 0xd6, 0x35, 0xfe, 0x3d, 0xeb, 0x1a, 0xbf, 0x9c, 0x77, 0xd7, 0x5e,
	0x9f, 0x77, 0xd7, 0xfe, 0x3e, 0xef, 0xae, 0x7d, 0xf7, 0x24, 0x22, 0x62, 0x9c, 0x0d, 0xad, 0x11,
	0x8d, 0xed, 0x27, 0xb3, 0x3e, 0x9e, 0x4e, 0x9f, 0x61, 0x71, 0x4a, 0xd9, 0xc4, 0x0e, 0xf2, 0xd5,
	0xb1, 0x67, 0xf6, 0xc5, 0x7f, 0x0c, 0x62, 0x9e, 0x62, 0x3e, 0xbc, 0x2e, 0xff, 0xf4, 0x7f, 0xfa,
	0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x85, 0xf8, 0xa0, 0x1d, 0x4b, 0x08, 0x00, 0x00,
}

func (m *LSTRegistryRouterAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LSTRegistryRouterAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LSTRegistryRouterAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakeRegistryRouterAddress) > 0 {
		i -= len(m.StakeRegistryRouterAddress)
		copy(dAtA[i:], m.StakeRegistryRouterAddress)
		i = encodeVarintStore(dAtA, i, uint64(len(m.StakeRegistryRouterAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RegistryRouterAddress) > 0 {
		i -= len(m.RegistryRouterAddress)
		copy(dAtA[i:], m.RegistryRouterAddress)
		i = encodeVarintStore(dAtA, i, uint64(len(m.RegistryRouterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LSTGroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LSTGroupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LSTGroupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupEjectionParam != nil {
		{
			size, err := m.GroupEjectionParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PoolParams) > 0 {
		for iNdEx := len(m.PoolParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.MinimumStake.Size()
		i -= size
		if _, err := m.MinimumStake.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.OperatorSetParam != nil {
		{
			size, err := m.OperatorSetParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.GroupNumber != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.GroupNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PubkeyRegistrationParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubkeyRegistrationParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubkeyRegistrationParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PubkeyG2 != nil {
		{
			size, err := m.PubkeyG2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PubkeyG1 != nil {
		{
			size, err := m.PubkeyG1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PubkeyRegistrationSignature != nil {
		{
			size, err := m.PubkeyRegistrationSignature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *G1Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *G1Point) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *G1Point) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Y.Size()
		i -= size
		if _, err := m.Y.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.X.Size()
		i -= size
		if _, err := m.X.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *G2Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *G2Point) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *G2Point) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Y) > 0 {
		for iNdEx := len(m.Y) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Y[iNdEx].Size()
				i -= size
				if _, err := m.Y[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintStore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.X) > 0 {
		for iNdEx := len(m.X) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.X[iNdEx].Size()
				i -= size
				if _, err := m.X[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintStore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegisterOperatorParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterOperatorParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterOperatorParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PubkeyParams != nil {
		{
			size, err := m.PubkeyParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Socket) > 0 {
		i -= len(m.Socket)
		copy(dAtA[i:], m.Socket)
		i = encodeVarintStore(dAtA, i, uint64(len(m.Socket)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LSTOperatorRegistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LSTOperatorRegistration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LSTOperatorRegistration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintStore(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.RegisterOperatorParam != nil {
		{
			size, err := m.RegisterOperatorParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperatorId) > 0 {
		i -= len(m.OperatorId)
		copy(dAtA[i:], m.OperatorId)
		i = encodeVarintStore(dAtA, i, uint64(len(m.OperatorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintStore(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LSTOperatorRegistrationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LSTOperatorRegistrationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LSTOperatorRegistrationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorRegistrations) > 0 {
		for iNdEx := len(m.OperatorRegistrations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorRegistrations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LSTOperatorWeightedShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LSTOperatorWeightedShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LSTOperatorWeightedShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.WeightedShare.Size()
		i -= size
		if _, err := m.WeightedShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintStore(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintStore(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LSTOperatorWeightedShareList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LSTOperatorWeightedShareList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LSTOperatorWeightedShareList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorWeightedShares) > 0 {
		for iNdEx := len(m.OperatorWeightedShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorWeightedShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LSTVotingPowerRatio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LSTVotingPowerRatio) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LSTVotingPowerRatio) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Denominator.Size()
		i -= size
		if _, err := m.Denominator.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Numerator.Size()
		i -= size
		if _, err := m.Numerator.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LSTStakingEnabled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LSTStakingEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LSTStakingEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStore(dAtA []byte, offset int, v uint64) int {
	offset -= sovStore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LSTRegistryRouterAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegistryRouterAddress)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	l = len(m.StakeRegistryRouterAddress)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}

func (m *LSTGroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupNumber != 0 {
		n += 1 + sovStore(uint64(m.GroupNumber))
	}
	if m.OperatorSetParam != nil {
		l = m.OperatorSetParam.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	l = m.MinimumStake.Size()
	n += 1 + l + sovStore(uint64(l))
	if len(m.PoolParams) > 0 {
		for _, e := range m.PoolParams {
			l = e.Size()
			n += 1 + l + sovStore(uint64(l))
		}
	}
	if m.GroupEjectionParam != nil {
		l = m.GroupEjectionParam.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}

func (m *PubkeyRegistrationParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PubkeyRegistrationSignature != nil {
		l = m.PubkeyRegistrationSignature.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	if m.PubkeyG1 != nil {
		l = m.PubkeyG1.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	if m.PubkeyG2 != nil {
		l = m.PubkeyG2.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}

func (m *G1Point) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.X.Size()
	n += 1 + l + sovStore(uint64(l))
	l = m.Y.Size()
	n += 1 + l + sovStore(uint64(l))
	return n
}

func (m *G2Point) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.X) > 0 {
		for _, e := range m.X {
			l = e.Size()
			n += 1 + l + sovStore(uint64(l))
		}
	}
	if len(m.Y) > 0 {
		for _, e := range m.Y {
			l = e.Size()
			n += 1 + l + sovStore(uint64(l))
		}
	}
	return n
}

func (m *RegisterOperatorParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Socket)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	if m.PubkeyParams != nil {
		l = m.PubkeyParams.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}

func (m *LSTOperatorRegistration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	l = len(m.OperatorId)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	if m.RegisterOperatorParam != nil {
		l = m.RegisterOperatorParam.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}

func (m *LSTOperatorRegistrationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorRegistrations) > 0 {
		for _, e := range m.OperatorRegistrations {
			l = e.Size()
			n += 1 + l + sovStore(uint64(l))
		}
	}
	return n
}

func (m *LSTOperatorWeightedShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	l = m.WeightedShare.Size()
	n += 1 + l + sovStore(uint64(l))
	return n
}

func (m *LSTOperatorWeightedShareList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorWeightedShares) > 0 {
		for _, e := range m.OperatorWeightedShares {
			l = e.Size()
			n += 1 + l + sovStore(uint64(l))
		}
	}
	return n
}

func (m *LSTVotingPowerRatio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Numerator.Size()
	n += 1 + l + sovStore(uint64(l))
	l = m.Denominator.Size()
	n += 1 + l + sovStore(uint64(l))
	return n
}

func (m *LSTStakingEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	return n
}

func sovStore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStore(x uint64) (n int) {
	return sovStore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LSTRegistryRouterAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LSTRegistryRouterAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LSTRegistryRouterAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRegistryRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeRegistryRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LSTGroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LSTGroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LSTGroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNumber", wireType)
			}
			m.GroupNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorSetParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperatorSetParam == nil {
				m.OperatorSetParam = &types.OperatorSetParam{}
			}
			if err := m.OperatorSetParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolParams = append(m.PoolParams, &types.PoolParams{})
			if err := m.PoolParams[len(m.PoolParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupEjectionParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupEjectionParam == nil {
				m.GroupEjectionParam = &types.GroupEjectionParam{}
			}
			if err := m.GroupEjectionParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubkeyRegistrationParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubkeyRegistrationParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubkeyRegistrationParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyRegistrationSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubkeyRegistrationSignature == nil {
				m.PubkeyRegistrationSignature = &G1Point{}
			}
			if err := m.PubkeyRegistrationSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyG1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubkeyG1 == nil {
				m.PubkeyG1 = &G1Point{}
			}
			if err := m.PubkeyG1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyG2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubkeyG2 == nil {
				m.PubkeyG2 = &G2Point{}
			}
			if err := m.PubkeyG2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *G1Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: G1Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: G1Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.X.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Y.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *G2Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: G2Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: G2Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.X = append(m.X, v)
			if err := m.X[len(m.X)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.Y = append(m.Y, v)
			if err := m.Y[len(m.Y)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterOperatorParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterOperatorParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterOperatorParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Socket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Socket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubkeyParams == nil {
				m.PubkeyParams = &PubkeyRegistrationParams{}
			}
			if err := m.PubkeyParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &types.SignatureWithSaltAndExpiry{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LSTOperatorRegistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LSTOperatorRegistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LSTOperatorRegistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorId = append(m.OperatorId[:0], dAtA[iNdEx:postIndex]...)
			if m.OperatorId == nil {
				m.OperatorId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterOperatorParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegisterOperatorParam == nil {
				m.RegisterOperatorParam = &RegisterOperatorParam{}
			}
			if err := m.RegisterOperatorParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LSTOperatorRegistrationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LSTOperatorRegistrationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LSTOperatorRegistrationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorRegistrations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorRegistrations = append(m.OperatorRegistrations, &LSTOperatorRegistration{})
			if err := m.OperatorRegistrations[len(m.OperatorRegistrations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LSTOperatorWeightedShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LSTOperatorWeightedShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LSTOperatorWeightedShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightedShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WeightedShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LSTOperatorWeightedShareList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LSTOperatorWeightedShareList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LSTOperatorWeightedShareList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorWeightedShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorWeightedShares = append(m.OperatorWeightedShares, &LSTOperatorWeightedShare{})
			if err := m.OperatorWeightedShares[len(m.OperatorWeightedShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LSTVotingPowerRatio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LSTVotingPowerRatio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LSTVotingPowerRatio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numerator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Numerator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denominator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Denominator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LSTStakingEnabled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LSTStakingEnabled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LSTStakingEnabled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStore = fmt.Errorf("proto: unexpected end of group")
)
