// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xsecurity/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/0xPellNetwork/aegis/x/restaking/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateRegistryRouter creates a registry router
type MsgCreateRegistryRouter struct {
	Signer              string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	ChainApprover       string `protobuf:"bytes,2,opt,name=chain_approver,json=chainApprover,proto3" json:"chain_approver,omitempty"`
	ChurnApprover       string `protobuf:"bytes,3,opt,name=churn_approver,json=churnApprover,proto3" json:"churn_approver,omitempty"`
	Ejector             string `protobuf:"bytes,4,opt,name=ejector,proto3" json:"ejector,omitempty"`
	Pauser              string `protobuf:"bytes,5,opt,name=pauser,proto3" json:"pauser,omitempty"`
	Unpauser            string `protobuf:"bytes,6,opt,name=unpauser,proto3" json:"unpauser,omitempty"`
	InitialPausedStatus int64  `protobuf:"varint,7,opt,name=initial_paused_status,json=initialPausedStatus,proto3" json:"initial_paused_status,omitempty"`
}

func (m *MsgCreateRegistryRouter) Reset()         { *m = MsgCreateRegistryRouter{} }
func (m *MsgCreateRegistryRouter) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRegistryRouter) ProtoMessage()    {}
func (*MsgCreateRegistryRouter) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c4d75210cd1344, []int{0}
}
func (m *MsgCreateRegistryRouter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRegistryRouter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRegistryRouter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRegistryRouter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRegistryRouter.Merge(m, src)
}
func (m *MsgCreateRegistryRouter) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRegistryRouter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRegistryRouter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRegistryRouter proto.InternalMessageInfo

func (m *MsgCreateRegistryRouter) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgCreateRegistryRouter) GetChainApprover() string {
	if m != nil {
		return m.ChainApprover
	}
	return ""
}

func (m *MsgCreateRegistryRouter) GetChurnApprover() string {
	if m != nil {
		return m.ChurnApprover
	}
	return ""
}

func (m *MsgCreateRegistryRouter) GetEjector() string {
	if m != nil {
		return m.Ejector
	}
	return ""
}

func (m *MsgCreateRegistryRouter) GetPauser() string {
	if m != nil {
		return m.Pauser
	}
	return ""
}

func (m *MsgCreateRegistryRouter) GetUnpauser() string {
	if m != nil {
		return m.Unpauser
	}
	return ""
}

func (m *MsgCreateRegistryRouter) GetInitialPausedStatus() int64 {
	if m != nil {
		return m.InitialPausedStatus
	}
	return 0
}

// MsgCreateRegistryRouterResponse is the response for MsgCreateRegistryRouter
type MsgCreateRegistryRouterResponse struct {
}

func (m *MsgCreateRegistryRouterResponse) Reset()         { *m = MsgCreateRegistryRouterResponse{} }
func (m *MsgCreateRegistryRouterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRegistryRouterResponse) ProtoMessage()    {}
func (*MsgCreateRegistryRouterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c4d75210cd1344, []int{1}
}
func (m *MsgCreateRegistryRouterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRegistryRouterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRegistryRouterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRegistryRouterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRegistryRouterResponse.Merge(m, src)
}
func (m *MsgCreateRegistryRouterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRegistryRouterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRegistryRouterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRegistryRouterResponse proto.InternalMessageInfo

// MsgCreateGroup creates a DVS group
type MsgCreateGroup struct {
	Signer              string                    `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	OperatorSetParams   *types.OperatorSetParam   `protobuf:"bytes,2,opt,name=operator_set_params,json=operatorSetParams,proto3" json:"operator_set_params,omitempty"`
	PoolParams          []*types.PoolParams       `protobuf:"bytes,3,rep,name=pool_params,json=poolParams,proto3" json:"pool_params,omitempty"`
	GroupEjectionParams *types.GroupEjectionParam `protobuf:"bytes,4,opt,name=group_ejection_params,json=groupEjectionParams,proto3" json:"group_ejection_params,omitempty"`
	MinStake            cosmossdk_io_math.Int     `protobuf:"bytes,5,opt,name=min_stake,json=minStake,proto3,customtype=cosmossdk.io/math.Int" json:"min_stake"`
}

func (m *MsgCreateGroup) Reset()         { *m = MsgCreateGroup{} }
func (m *MsgCreateGroup) String() string { return proto.CompactTextString(m) }
func (*MsgCreateGroup) ProtoMessage()    {}
func (*MsgCreateGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c4d75210cd1344, []int{2}
}
func (m *MsgCreateGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateGroup.Merge(m, src)
}
func (m *MsgCreateGroup) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateGroup.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateGroup proto.InternalMessageInfo

func (m *MsgCreateGroup) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgCreateGroup) GetOperatorSetParams() *types.OperatorSetParam {
	if m != nil {
		return m.OperatorSetParams
	}
	return nil
}

func (m *MsgCreateGroup) GetPoolParams() []*types.PoolParams {
	if m != nil {
		return m.PoolParams
	}
	return nil
}

func (m *MsgCreateGroup) GetGroupEjectionParams() *types.GroupEjectionParam {
	if m != nil {
		return m.GroupEjectionParams
	}
	return nil
}

// MsgCreateGroupResponse is the response for MsgCreateDVSGroup
type MsgCreateGroupResponse struct {
}

func (m *MsgCreateGroupResponse) Reset()         { *m = MsgCreateGroupResponse{} }
func (m *MsgCreateGroupResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateGroupResponse) ProtoMessage()    {}
func (*MsgCreateGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c4d75210cd1344, []int{3}
}
func (m *MsgCreateGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateGroupResponse.Merge(m, src)
}
func (m *MsgCreateGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateGroupResponse proto.InternalMessageInfo

// MsgSetGroupParam sets the parameters of a DVS group
type MsgSetGroupParam struct {
	Signer            string                  `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	OperatorSetParams *types.OperatorSetParam `protobuf:"bytes,3,opt,name=operator_set_params,json=operatorSetParams,proto3" json:"operator_set_params,omitempty"`
}

func (m *MsgSetGroupParam) Reset()         { *m = MsgSetGroupParam{} }
func (m *MsgSetGroupParam) String() string { return proto.CompactTextString(m) }
func (*MsgSetGroupParam) ProtoMessage()    {}
func (*MsgSetGroupParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c4d75210cd1344, []int{4}
}
func (m *MsgSetGroupParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetGroupParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetGroupParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetGroupParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetGroupParam.Merge(m, src)
}
func (m *MsgSetGroupParam) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetGroupParam) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetGroupParam.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetGroupParam proto.InternalMessageInfo

func (m *MsgSetGroupParam) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgSetGroupParam) GetOperatorSetParams() *types.OperatorSetParam {
	if m != nil {
		return m.OperatorSetParams
	}
	return nil
}

// MsgSetGroupParamResponse is the response for MsgSetGroupParam
type MsgSetGroupParamResponse struct {
}

func (m *MsgSetGroupParamResponse) Reset()         { *m = MsgSetGroupParamResponse{} }
func (m *MsgSetGroupParamResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetGroupParamResponse) ProtoMessage()    {}
func (*MsgSetGroupParamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c4d75210cd1344, []int{5}
}
func (m *MsgSetGroupParamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetGroupParamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetGroupParamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetGroupParamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetGroupParamResponse.Merge(m, src)
}
func (m *MsgSetGroupParamResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetGroupParamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetGroupParamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetGroupParamResponse proto.InternalMessageInfo

// MsgAddPool adds strategies to a DVS group
type MsgAddPools struct {
	Signer      string              `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	GroupNumber int64               `protobuf:"varint,2,opt,name=group_number,json=groupNumber,proto3" json:"group_number,omitempty"`
	Pools       []*types.PoolParams `protobuf:"bytes,3,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (m *MsgAddPools) Reset()         { *m = MsgAddPools{} }
func (m *MsgAddPools) String() string { return proto.CompactTextString(m) }
func (*MsgAddPools) ProtoMessage()    {}
func (*MsgAddPools) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c4d75210cd1344, []int{6}
}
func (m *MsgAddPools) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddPools) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddPools.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddPools) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddPools.Merge(m, src)
}
func (m *MsgAddPools) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddPools) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddPools.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddPools proto.InternalMessageInfo

func (m *MsgAddPools) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgAddPools) GetGroupNumber() int64 {
	if m != nil {
		return m.GroupNumber
	}
	return 0
}

func (m *MsgAddPools) GetPools() []*types.PoolParams {
	if m != nil {
		return m.Pools
	}
	return nil
}

// MsgAddPoolResponse is the response for MsgAddPool
type MsgAddPoolsResponse struct {
}

func (m *MsgAddPoolsResponse) Reset()         { *m = MsgAddPoolsResponse{} }
func (m *MsgAddPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddPoolsResponse) ProtoMessage()    {}
func (*MsgAddPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c4d75210cd1344, []int{7}
}
func (m *MsgAddPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddPoolsResponse.Merge(m, src)
}
func (m *MsgAddPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddPoolsResponse proto.InternalMessageInfo

// MsgRemovePool removes strategies from a DVS group
type MsgRemovePools struct {
	Signer      string              `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	GroupNumber int64               `protobuf:"varint,2,opt,name=group_number,json=groupNumber,proto3" json:"group_number,omitempty"`
	Pools       []*types.PoolParams `protobuf:"bytes,3,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (m *MsgRemovePools) Reset()         { *m = MsgRemovePools{} }
func (m *MsgRemovePools) String() string { return proto.CompactTextString(m) }
func (*MsgRemovePools) ProtoMessage()    {}
func (*MsgRemovePools) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c4d75210cd1344, []int{8}
}
func (m *MsgRemovePools) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemovePools) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemovePools.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemovePools) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemovePools.Merge(m, src)
}
func (m *MsgRemovePools) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemovePools) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemovePools.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemovePools proto.InternalMessageInfo

func (m *MsgRemovePools) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRemovePools) GetGroupNumber() int64 {
	if m != nil {
		return m.GroupNumber
	}
	return 0
}

func (m *MsgRemovePools) GetPools() []*types.PoolParams {
	if m != nil {
		return m.Pools
	}
	return nil
}

// MsgRemovePoolResponse is the response for MsgRemovePool
type MsgRemovePoolsResponse struct {
}

func (m *MsgRemovePoolsResponse) Reset()         { *m = MsgRemovePoolsResponse{} }
func (m *MsgRemovePoolsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemovePoolsResponse) ProtoMessage()    {}
func (*MsgRemovePoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c4d75210cd1344, []int{9}
}
func (m *MsgRemovePoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemovePoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemovePoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemovePoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemovePoolsResponse.Merge(m, src)
}
func (m *MsgRemovePoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemovePoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemovePoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemovePoolsResponse proto.InternalMessageInfo

// MsgRegisterOperator registers an operator
type MsgRegisterOperator struct {
	Signer                string                 `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	RegisterOperatorParam *RegisterOperatorParam `protobuf:"bytes,2,opt,name=register_operator_param,json=registerOperatorParam,proto3" json:"register_operator_param,omitempty"`
	OperatorAddress       string                 `protobuf:"bytes,3,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
}

func (m *MsgRegisterOperator) Reset()         { *m = MsgRegisterOperator{} }
func (m *MsgRegisterOperator) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterOperator) ProtoMessage()    {}
func (*MsgRegisterOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c4d75210cd1344, []int{10}
}
func (m *MsgRegisterOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterOperator.Merge(m, src)
}
func (m *MsgRegisterOperator) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterOperator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterOperator proto.InternalMessageInfo

func (m *MsgRegisterOperator) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRegisterOperator) GetRegisterOperatorParam() *RegisterOperatorParam {
	if m != nil {
		return m.RegisterOperatorParam
	}
	return nil
}

func (m *MsgRegisterOperator) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

// MsgRegisterOperatorResponse is the response for MsgRegisterOperator
type MsgRegisterOperatorResponse struct {
}

func (m *MsgRegisterOperatorResponse) Reset()         { *m = MsgRegisterOperatorResponse{} }
func (m *MsgRegisterOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterOperatorResponse) ProtoMessage()    {}
func (*MsgRegisterOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c4d75210cd1344, []int{11}
}
func (m *MsgRegisterOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterOperatorResponse.Merge(m, src)
}
func (m *MsgRegisterOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterOperatorResponse proto.InternalMessageInfo

// MsgUpdateVotingPowerRatio updates the voting power ratio
type MsgUpdateVotingPowerRatio struct {
	Signer      string                `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Numerator   cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=numerator,proto3,customtype=cosmossdk.io/math.Int" json:"numerator"`
	Denominator cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=denominator,proto3,customtype=cosmossdk.io/math.Int" json:"denominator"`
}

func (m *MsgUpdateVotingPowerRatio) Reset()         { *m = MsgUpdateVotingPowerRatio{} }
func (m *MsgUpdateVotingPowerRatio) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVotingPowerRatio) ProtoMessage()    {}
func (*MsgUpdateVotingPowerRatio) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c4d75210cd1344, []int{12}
}
func (m *MsgUpdateVotingPowerRatio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVotingPowerRatio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVotingPowerRatio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVotingPowerRatio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVotingPowerRatio.Merge(m, src)
}
func (m *MsgUpdateVotingPowerRatio) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVotingPowerRatio) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVotingPowerRatio.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVotingPowerRatio proto.InternalMessageInfo

func (m *MsgUpdateVotingPowerRatio) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgUpdateVotingPowerRatioResponse is the response for
// MsgUpdateVotingPowerRatio
type MsgUpdateVotingPowerRatioResponse struct {
}

func (m *MsgUpdateVotingPowerRatioResponse) Reset()         { *m = MsgUpdateVotingPowerRatioResponse{} }
func (m *MsgUpdateVotingPowerRatioResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVotingPowerRatioResponse) ProtoMessage()    {}
func (*MsgUpdateVotingPowerRatioResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c4d75210cd1344, []int{13}
}
func (m *MsgUpdateVotingPowerRatioResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVotingPowerRatioResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVotingPowerRatioResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVotingPowerRatioResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVotingPowerRatioResponse.Merge(m, src)
}
func (m *MsgUpdateVotingPowerRatioResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVotingPowerRatioResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVotingPowerRatioResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVotingPowerRatioResponse proto.InternalMessageInfo

// MsgUpdateLSTStakingEnabled updates the LST staking enabled status
type MsgUpdateLSTStakingEnabled struct {
	Signer  string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Enabled bool   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *MsgUpdateLSTStakingEnabled) Reset()         { *m = MsgUpdateLSTStakingEnabled{} }
func (m *MsgUpdateLSTStakingEnabled) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateLSTStakingEnabled) ProtoMessage()    {}
func (*MsgUpdateLSTStakingEnabled) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c4d75210cd1344, []int{14}
}
func (m *MsgUpdateLSTStakingEnabled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateLSTStakingEnabled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateLSTStakingEnabled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateLSTStakingEnabled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLSTStakingEnabled.Merge(m, src)
}
func (m *MsgUpdateLSTStakingEnabled) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateLSTStakingEnabled) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLSTStakingEnabled.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLSTStakingEnabled proto.InternalMessageInfo

func (m *MsgUpdateLSTStakingEnabled) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateLSTStakingEnabled) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// MsgUpdateLSTStakingEnabledResponse is the response for
// MsgUpdateLSTStakingEnabled
type MsgUpdateLSTStakingEnabledResponse struct {
}

func (m *MsgUpdateLSTStakingEnabledResponse) Reset()         { *m = MsgUpdateLSTStakingEnabledResponse{} }
func (m *MsgUpdateLSTStakingEnabledResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateLSTStakingEnabledResponse) ProtoMessage()    {}
func (*MsgUpdateLSTStakingEnabledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c4d75210cd1344, []int{15}
}
func (m *MsgUpdateLSTStakingEnabledResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateLSTStakingEnabledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateLSTStakingEnabledResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateLSTStakingEnabledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLSTStakingEnabledResponse.Merge(m, src)
}
func (m *MsgUpdateLSTStakingEnabledResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateLSTStakingEnabledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLSTStakingEnabledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLSTStakingEnabledResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateRegistryRouter)(nil), "xsecurity.MsgCreateRegistryRouter")
	proto.RegisterType((*MsgCreateRegistryRouterResponse)(nil), "xsecurity.MsgCreateRegistryRouterResponse")
	proto.RegisterType((*MsgCreateGroup)(nil), "xsecurity.MsgCreateGroup")
	proto.RegisterType((*MsgCreateGroupResponse)(nil), "xsecurity.MsgCreateGroupResponse")
	proto.RegisterType((*MsgSetGroupParam)(nil), "xsecurity.MsgSetGroupParam")
	proto.RegisterType((*MsgSetGroupParamResponse)(nil), "xsecurity.MsgSetGroupParamResponse")
	proto.RegisterType((*MsgAddPools)(nil), "xsecurity.MsgAddPools")
	proto.RegisterType((*MsgAddPoolsResponse)(nil), "xsecurity.MsgAddPoolsResponse")
	proto.RegisterType((*MsgRemovePools)(nil), "xsecurity.MsgRemovePools")
	proto.RegisterType((*MsgRemovePoolsResponse)(nil), "xsecurity.MsgRemovePoolsResponse")
	proto.RegisterType((*MsgRegisterOperator)(nil), "xsecurity.MsgRegisterOperator")
	proto.RegisterType((*MsgRegisterOperatorResponse)(nil), "xsecurity.MsgRegisterOperatorResponse")
	proto.RegisterType((*MsgUpdateVotingPowerRatio)(nil), "xsecurity.MsgUpdateVotingPowerRatio")
	proto.RegisterType((*MsgUpdateVotingPowerRatioResponse)(nil), "xsecurity.MsgUpdateVotingPowerRatioResponse")
	proto.RegisterType((*MsgUpdateLSTStakingEnabled)(nil), "xsecurity.MsgUpdateLSTStakingEnabled")
	proto.RegisterType((*MsgUpdateLSTStakingEnabledResponse)(nil), "xsecurity.MsgUpdateLSTStakingEnabledResponse")
}

func init() { proto.RegisterFile("xsecurity/tx.proto", fileDescriptor_56c4d75210cd1344) }

var fileDescriptor_56c4d75210cd1344 = []byte{
	// 926 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x41, 0x6f, 0xdc, 0x44,
	0x14, 0x8e, 0xb3, 0x4d, 0x9a, 0xbc, 0xa5, 0x25, 0x38, 0xdd, 0x64, 0xeb, 0x28, 0x9b, 0x64, 0xdb,
	0xa2, 0x50, 0xc0, 0x2e, 0x41, 0xe2, 0x50, 0x0e, 0x28, 0x41, 0x15, 0x82, 0xb2, 0x65, 0xeb, 0x05,
	0x84, 0xca, 0x61, 0x35, 0x59, 0x0f, 0xce, 0x90, 0xf5, 0x8c, 0x35, 0x33, 0x4e, 0x93, 0x6b, 0x05,
	0x57, 0xc4, 0x4f, 0xe1, 0x17, 0xc0, 0xb5, 0xdc, 0x7a, 0x04, 0x0e, 0x15, 0x4a, 0x0e, 0xfc, 0x0d,
	0xe4, 0x19, 0x7b, 0x62, 0x6f, 0xec, 0x24, 0x70, 0xe9, 0x29, 0x9e, 0xef, 0xfb, 0xe6, 0xcd, 0xf7,
	0xde, 0x9b, 0x79, 0x59, 0xb0, 0x0f, 0x05, 0x1e, 0x25, 0x9c, 0xc8, 0x23, 0x4f, 0x1e, 0xba, 0x31,
	0x67, 0x92, 0xd9, 0xf3, 0x06, 0x73, 0x96, 0x47, 0x4c, 0x44, 0x4c, 0x78, 0x91, 0x08, 0xbd, 0x83,
	0xf7, 0xd2, 0x3f, 0x5a, 0xe3, 0xdc, 0x08, 0x59, 0xc8, 0xd4, 0xa7, 0x97, 0x7e, 0x65, 0x68, 0x8b,
	0x63, 0x21, 0xd1, 0x3e, 0xa1, 0xa1, 0x17, 0x72, 0x96, 0xc4, 0x39, 0x7c, 0x7a, 0x88, 0x90, 0x8c,
	0x63, 0x0d, 0x77, 0x7f, 0x9a, 0x86, 0xe5, 0x9e, 0x08, 0x3f, 0xe6, 0x18, 0x49, 0xec, 0xe3, 0x90,
	0x08, 0xc9, 0x8f, 0x7c, 0x96, 0x48, 0xcc, 0xed, 0x25, 0x98, 0x15, 0x24, 0xa4, 0x98, 0xb7, 0xad,
	0x75, 0x6b, 0x73, 0xde, 0xcf, 0x56, 0xf6, 0x1d, 0xb8, 0x3e, 0xda, 0x43, 0x84, 0x0e, 0x51, 0x1c,
	0x73, 0x76, 0x80, 0x79, 0x7b, 0x5a, 0xf1, 0xd7, 0x14, 0xba, 0x9d, 0x81, 0x5a, 0x96, 0xf0, 0x82,
	0xac, 0x91, 0xcb, 0x12, 0x7e, 0x2a, 0x6b, 0xc3, 0x55, 0xfc, 0x3d, 0x1e, 0x49, 0xc6, 0xdb, 0x57,
	0x14, 0x9f, 0x2f, 0xd3, 0xf3, 0x63, 0x94, 0x08, 0xcc, 0xdb, 0x33, 0xfa, 0x7c, 0xbd, 0xb2, 0x1d,
	0x98, 0x4b, 0x68, 0xc6, 0xcc, 0x2a, 0xc6, 0xac, 0xed, 0x2d, 0x68, 0x11, 0x4a, 0x24, 0x41, 0xe3,
	0xa1, 0x42, 0x82, 0xa1, 0x90, 0x48, 0x26, 0xa2, 0x7d, 0x75, 0xdd, 0xda, 0x6c, 0xf8, 0x8b, 0x19,
	0xd9, 0x57, 0xdc, 0x40, 0x51, 0xf7, 0x9b, 0xcf, 0xfe, 0xf9, 0xe5, 0x6e, 0x96, 0x5c, 0x77, 0x03,
	0xd6, 0x6a, 0xea, 0xe1, 0x63, 0x11, 0x33, 0x2a, 0x70, 0xf7, 0xf7, 0x69, 0xb8, 0x6e, 0x34, 0x9f,
	0xa4, 0x35, 0xae, 0x2d, 0xd5, 0x43, 0x58, 0x64, 0x31, 0xe6, 0x48, 0x32, 0x3e, 0x14, 0x58, 0x0e,
	0x63, 0xc4, 0x51, 0x24, 0x54, 0xbd, 0x9a, 0x5b, 0x2b, 0xae, 0x69, 0x95, 0xfb, 0x45, 0xa6, 0x1a,
	0x60, 0xd9, 0x4f, 0x35, 0xfe, 0x1b, 0x6c, 0x02, 0x11, 0xf6, 0x07, 0xd0, 0x8c, 0x19, 0x1b, 0xe7,
	0x41, 0x1a, 0xeb, 0x8d, 0xcd, 0xe6, 0x56, 0xab, 0x10, 0xa4, 0xcf, 0xd8, 0x58, 0x6b, 0x7d, 0x88,
	0xcd, 0xb7, 0xfd, 0x18, 0x5a, 0xea, 0x26, 0x0c, 0x55, 0x61, 0x09, 0xa3, 0x79, 0x84, 0x2b, 0xca,
	0xc6, 0x6a, 0x21, 0x82, 0xca, 0xe6, 0x41, 0x26, 0xd3, 0x46, 0x16, 0xc3, 0x33, 0x98, 0xb0, 0xef,
	0xc3, 0x7c, 0x44, 0x68, 0x5a, 0xdb, 0x7d, 0xac, 0xbb, 0xb3, 0xb3, 0xfa, 0xfc, 0xe5, 0xda, 0xd4,
	0x5f, 0x2f, 0xd7, 0x5a, 0xfa, 0xba, 0x8a, 0x60, 0xdf, 0x25, 0xcc, 0x8b, 0x90, 0xdc, 0x73, 0x3f,
	0xa5, 0xd2, 0x9f, 0x8b, 0x08, 0x1d, 0xa4, 0xf2, 0x72, 0xb9, 0xdb, 0xb0, 0x54, 0x2e, 0xa5, 0xa9,
	0xf2, 0x0f, 0x16, 0x2c, 0xf4, 0x44, 0x38, 0xc0, 0x52, 0xe1, 0xea, 0xe0, 0xff, 0x5a, 0xe7, 0xc6,
	0xff, 0xa9, 0x73, 0xd9, 0xa0, 0x03, 0xed, 0x49, 0x17, 0xc6, 0xe2, 0x33, 0x0b, 0x9a, 0x3d, 0x11,
	0x6e, 0x07, 0x41, 0x5a, 0x79, 0x51, 0xeb, 0x6e, 0x03, 0x5e, 0xd3, 0x0d, 0xa0, 0x49, 0xb4, 0x9b,
	0x3d, 0x97, 0x86, 0xdf, 0x54, 0xd8, 0x23, 0x05, 0xd9, 0x6f, 0xc3, 0x4c, 0xda, 0xb1, 0x0b, 0xba,
	0xaa, 0x35, 0x65, 0x83, 0x2d, 0x58, 0x2c, 0x78, 0x30, 0xde, 0x7e, 0xb4, 0xd4, 0x25, 0xf5, 0x71,
	0xc4, 0x0e, 0xf0, 0x2b, 0xb4, 0xa7, 0x1b, 0x5c, 0xb0, 0x61, 0x1c, 0xfe, 0x66, 0x29, 0xe7, 0xfa,
	0x91, 0x61, 0x9e, 0x77, 0xa6, 0xd6, 0xe6, 0x37, 0xb0, 0xcc, 0x33, 0xed, 0xd0, 0x34, 0x5b, 0x35,
	0x3a, 0x7b, 0x4f, 0xeb, 0xae, 0x99, 0x71, 0xee, 0x64, 0x54, 0xdd, 0xb8, 0x16, 0xaf, 0x82, 0xed,
	0xb7, 0x60, 0xc1, 0x04, 0x44, 0x41, 0xc0, 0xb1, 0x10, 0xd9, 0xac, 0x7a, 0x3d, 0xc7, 0xb7, 0x35,
	0x5c, 0xce, 0x6d, 0x15, 0x56, 0x2a, 0x12, 0x30, 0x09, 0xfe, 0x6a, 0xc1, 0xcd, 0x9e, 0x08, 0xbf,
	0x8a, 0x03, 0x24, 0xf1, 0xd7, 0x4c, 0x12, 0x1a, 0xf6, 0xd9, 0x53, 0xcc, 0x7d, 0x24, 0x09, 0xab,
	0x4d, 0xf3, 0x43, 0x98, 0xa7, 0x49, 0xa4, 0x43, 0xe9, 0xc1, 0x7a, 0xd1, 0xd3, 0x3a, 0xd5, 0xdb,
	0x1f, 0x41, 0x33, 0xc0, 0x94, 0x45, 0x84, 0xaa, 0xed, 0x8d, 0xcb, 0x6c, 0x2f, 0xee, 0x28, 0xe7,
	0x77, 0x0b, 0x36, 0x6a, 0xfd, 0x9b, 0x2c, 0xbf, 0x05, 0xc7, 0x88, 0x3e, 0x1f, 0x7c, 0x39, 0xd0,
	0xd7, 0xe2, 0x01, 0x45, 0xbb, 0x63, 0x1c, 0xd4, 0x66, 0x99, 0x4e, 0x7d, 0x2d, 0x51, 0x39, 0xce,
	0xf9, 0xf9, 0xb2, 0xec, 0xe0, 0x36, 0x74, 0xeb, 0x83, 0xe7, 0x16, 0xb6, 0xfe, 0x9c, 0x81, 0x46,
	0x4f, 0x84, 0xf6, 0x77, 0x70, 0xa3, 0xf2, 0x1f, 0x59, 0xb7, 0x70, 0x31, 0x6a, 0x86, 0xbb, 0x73,
	0xf7, 0x62, 0x4d, 0x7e, 0x9e, 0xfd, 0x10, 0x9a, 0xc5, 0xe1, 0x7f, 0xb3, 0x6a, 0xab, 0xa2, 0x9c,
	0x8d, 0x5a, 0xca, 0x04, 0x7b, 0x0c, 0xd7, 0xca, 0x33, 0x6e, 0xa5, 0xbc, 0xa7, 0x44, 0x3a, 0xb7,
	0xce, 0x21, 0x4d, 0xc8, 0x1d, 0x98, 0x3b, 0x9d, 0x49, 0xe5, 0x0d, 0x39, 0xee, 0x74, 0xaa, 0xf1,
	0x62, 0x8e, 0xc5, 0xd9, 0x31, 0x91, 0x63, 0x81, 0x9a, 0xcc, 0xb1, 0xe2, 0xa9, 0xdb, 0x4f, 0x60,
	0xe1, 0xcc, 0x33, 0xef, 0x4c, 0x6e, 0x2b, 0xf3, 0xce, 0x9b, 0xe7, 0xf3, 0x26, 0xf6, 0x18, 0x96,
	0x6a, 0x5e, 0xd8, 0xed, 0x72, 0x84, 0x6a, 0x95, 0xf3, 0xce, 0x65, 0x54, 0xe6, 0x34, 0x06, 0xcb,
	0x75, 0x57, 0xfd, 0x4e, 0x55, 0xa0, 0x33, 0x32, 0xe7, 0xdd, 0x4b, 0xc9, 0xf2, 0x03, 0x77, 0x3e,
	0x7b, 0x7e, 0xdc, 0xb1, 0x5e, 0x1c, 0x77, 0xac, 0xbf, 0x8f, 0x3b, 0xd6, 0xcf, 0x27, 0x9d, 0xa9,
	0x17, 0x27, 0x9d, 0xa9, 0x3f, 0x4e, 0x3a, 0x53, 0x4f, 0xee, 0x85, 0x44, 0xee, 0x25, 0xbb, 0xee,
	0x88, 0x45, 0xde, 0xbd, 0xc3, 0x3e, 0x1e, 0x8f, 0x1f, 0x61, 0xf9, 0x94, 0xf1, 0x7d, 0x0f, 0xa5,
	0xb5, 0xf2, 0x0e, 0xbd, 0xc2, 0xef, 0xca, 0xa3, 0x18, 0x8b, 0xdd, 0x59, 0xf5, 0x9b, 0xef, 0xfd,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x46, 0x12, 0x20, 0x71, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateRegistryRouter creates a registry router
	CreateRegistryRouter(ctx context.Context, in *MsgCreateRegistryRouter, opts ...grpc.CallOption) (*MsgCreateRegistryRouterResponse, error)
	// CreateGroup creates a group
	CreateGroup(ctx context.Context, in *MsgCreateGroup, opts ...grpc.CallOption) (*MsgCreateGroupResponse, error)
	// SetGroupParam sets the parameters of a DVS group
	SetGroupParam(ctx context.Context, in *MsgSetGroupParam, opts ...grpc.CallOption) (*MsgSetGroupParamResponse, error)
	// AddPools adds strategies to a DVS group
	AddPools(ctx context.Context, in *MsgAddPools, opts ...grpc.CallOption) (*MsgAddPoolsResponse, error)
	// RemovePools removes strategies from a DVS group
	RemovePools(ctx context.Context, in *MsgRemovePools, opts ...grpc.CallOption) (*MsgRemovePoolsResponse, error)
	// RegisterOperator registers an operator
	RegisterOperator(ctx context.Context, in *MsgRegisterOperator, opts ...grpc.CallOption) (*MsgRegisterOperatorResponse, error)
	// UpdateVotingPowerRatio updates the voting power ratio
	UpdateVotingPowerRatio(ctx context.Context, in *MsgUpdateVotingPowerRatio, opts ...grpc.CallOption) (*MsgUpdateVotingPowerRatioResponse, error)
	// UpdateLSTStakingEnabled updates the LST staking enabled status
	UpdateLSTStakingEnabled(ctx context.Context, in *MsgUpdateLSTStakingEnabled, opts ...grpc.CallOption) (*MsgUpdateLSTStakingEnabledResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateRegistryRouter(ctx context.Context, in *MsgCreateRegistryRouter, opts ...grpc.CallOption) (*MsgCreateRegistryRouterResponse, error) {
	out := new(MsgCreateRegistryRouterResponse)
	err := c.cc.Invoke(ctx, "/xsecurity.Msg/CreateRegistryRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateGroup(ctx context.Context, in *MsgCreateGroup, opts ...grpc.CallOption) (*MsgCreateGroupResponse, error) {
	out := new(MsgCreateGroupResponse)
	err := c.cc.Invoke(ctx, "/xsecurity.Msg/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetGroupParam(ctx context.Context, in *MsgSetGroupParam, opts ...grpc.CallOption) (*MsgSetGroupParamResponse, error) {
	out := new(MsgSetGroupParamResponse)
	err := c.cc.Invoke(ctx, "/xsecurity.Msg/SetGroupParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddPools(ctx context.Context, in *MsgAddPools, opts ...grpc.CallOption) (*MsgAddPoolsResponse, error) {
	out := new(MsgAddPoolsResponse)
	err := c.cc.Invoke(ctx, "/xsecurity.Msg/AddPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemovePools(ctx context.Context, in *MsgRemovePools, opts ...grpc.CallOption) (*MsgRemovePoolsResponse, error) {
	out := new(MsgRemovePoolsResponse)
	err := c.cc.Invoke(ctx, "/xsecurity.Msg/RemovePools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterOperator(ctx context.Context, in *MsgRegisterOperator, opts ...grpc.CallOption) (*MsgRegisterOperatorResponse, error) {
	out := new(MsgRegisterOperatorResponse)
	err := c.cc.Invoke(ctx, "/xsecurity.Msg/RegisterOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateVotingPowerRatio(ctx context.Context, in *MsgUpdateVotingPowerRatio, opts ...grpc.CallOption) (*MsgUpdateVotingPowerRatioResponse, error) {
	out := new(MsgUpdateVotingPowerRatioResponse)
	err := c.cc.Invoke(ctx, "/xsecurity.Msg/UpdateVotingPowerRatio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateLSTStakingEnabled(ctx context.Context, in *MsgUpdateLSTStakingEnabled, opts ...grpc.CallOption) (*MsgUpdateLSTStakingEnabledResponse, error) {
	out := new(MsgUpdateLSTStakingEnabledResponse)
	err := c.cc.Invoke(ctx, "/xsecurity.Msg/UpdateLSTStakingEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateRegistryRouter creates a registry router
	CreateRegistryRouter(context.Context, *MsgCreateRegistryRouter) (*MsgCreateRegistryRouterResponse, error)
	// CreateGroup creates a group
	CreateGroup(context.Context, *MsgCreateGroup) (*MsgCreateGroupResponse, error)
	// SetGroupParam sets the parameters of a DVS group
	SetGroupParam(context.Context, *MsgSetGroupParam) (*MsgSetGroupParamResponse, error)
	// AddPools adds strategies to a DVS group
	AddPools(context.Context, *MsgAddPools) (*MsgAddPoolsResponse, error)
	// RemovePools removes strategies from a DVS group
	RemovePools(context.Context, *MsgRemovePools) (*MsgRemovePoolsResponse, error)
	// RegisterOperator registers an operator
	RegisterOperator(context.Context, *MsgRegisterOperator) (*MsgRegisterOperatorResponse, error)
	// UpdateVotingPowerRatio updates the voting power ratio
	UpdateVotingPowerRatio(context.Context, *MsgUpdateVotingPowerRatio) (*MsgUpdateVotingPowerRatioResponse, error)
	// UpdateLSTStakingEnabled updates the LST staking enabled status
	UpdateLSTStakingEnabled(context.Context, *MsgUpdateLSTStakingEnabled) (*MsgUpdateLSTStakingEnabledResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateRegistryRouter(ctx context.Context, req *MsgCreateRegistryRouter) (*MsgCreateRegistryRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegistryRouter not implemented")
}
func (*UnimplementedMsgServer) CreateGroup(ctx context.Context, req *MsgCreateGroup) (*MsgCreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedMsgServer) SetGroupParam(ctx context.Context, req *MsgSetGroupParam) (*MsgSetGroupParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupParam not implemented")
}
func (*UnimplementedMsgServer) AddPools(ctx context.Context, req *MsgAddPools) (*MsgAddPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPools not implemented")
}
func (*UnimplementedMsgServer) RemovePools(ctx context.Context, req *MsgRemovePools) (*MsgRemovePoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePools not implemented")
}
func (*UnimplementedMsgServer) RegisterOperator(ctx context.Context, req *MsgRegisterOperator) (*MsgRegisterOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOperator not implemented")
}
func (*UnimplementedMsgServer) UpdateVotingPowerRatio(ctx context.Context, req *MsgUpdateVotingPowerRatio) (*MsgUpdateVotingPowerRatioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVotingPowerRatio not implemented")
}
func (*UnimplementedMsgServer) UpdateLSTStakingEnabled(ctx context.Context, req *MsgUpdateLSTStakingEnabled) (*MsgUpdateLSTStakingEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLSTStakingEnabled not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateRegistryRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateRegistryRouter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateRegistryRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xsecurity.Msg/CreateRegistryRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateRegistryRouter(ctx, req.(*MsgCreateRegistryRouter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xsecurity.Msg/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateGroup(ctx, req.(*MsgCreateGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetGroupParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetGroupParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetGroupParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xsecurity.Msg/SetGroupParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetGroupParam(ctx, req.(*MsgSetGroupParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddPools)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xsecurity.Msg/AddPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddPools(ctx, req.(*MsgAddPools))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemovePools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemovePools)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemovePools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xsecurity.Msg/RemovePools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemovePools(ctx, req.(*MsgRemovePools))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xsecurity.Msg/RegisterOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterOperator(ctx, req.(*MsgRegisterOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateVotingPowerRatio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateVotingPowerRatio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateVotingPowerRatio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xsecurity.Msg/UpdateVotingPowerRatio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateVotingPowerRatio(ctx, req.(*MsgUpdateVotingPowerRatio))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateLSTStakingEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateLSTStakingEnabled)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateLSTStakingEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xsecurity.Msg/UpdateLSTStakingEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateLSTStakingEnabled(ctx, req.(*MsgUpdateLSTStakingEnabled))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xsecurity.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRegistryRouter",
			Handler:    _Msg_CreateRegistryRouter_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Msg_CreateGroup_Handler,
		},
		{
			MethodName: "SetGroupParam",
			Handler:    _Msg_SetGroupParam_Handler,
		},
		{
			MethodName: "AddPools",
			Handler:    _Msg_AddPools_Handler,
		},
		{
			MethodName: "RemovePools",
			Handler:    _Msg_RemovePools_Handler,
		},
		{
			MethodName: "RegisterOperator",
			Handler:    _Msg_RegisterOperator_Handler,
		},
		{
			MethodName: "UpdateVotingPowerRatio",
			Handler:    _Msg_UpdateVotingPowerRatio_Handler,
		},
		{
			MethodName: "UpdateLSTStakingEnabled",
			Handler:    _Msg_UpdateLSTStakingEnabled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xsecurity/tx.proto",
}

func (m *MsgCreateRegistryRouter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRegistryRouter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRegistryRouter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InitialPausedStatus != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.InitialPausedStatus))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Unpauser) > 0 {
		i -= len(m.Unpauser)
		copy(dAtA[i:], m.Unpauser)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Unpauser)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Pauser) > 0 {
		i -= len(m.Pauser)
		copy(dAtA[i:], m.Pauser)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Pauser)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Ejector) > 0 {
		i -= len(m.Ejector)
		copy(dAtA[i:], m.Ejector)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Ejector)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChurnApprover) > 0 {
		i -= len(m.ChurnApprover)
		copy(dAtA[i:], m.ChurnApprover)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChurnApprover)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainApprover) > 0 {
		i -= len(m.ChainApprover)
		copy(dAtA[i:], m.ChainApprover)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainApprover)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateRegistryRouterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRegistryRouterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRegistryRouterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinStake.Size()
		i -= size
		if _, err := m.MinStake.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.GroupEjectionParams != nil {
		{
			size, err := m.GroupEjectionParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.PoolParams) > 0 {
		for iNdEx := len(m.PoolParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.OperatorSetParams != nil {
		{
			size, err := m.OperatorSetParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetGroupParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetGroupParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetGroupParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperatorSetParams != nil {
		{
			size, err := m.OperatorSetParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetGroupParamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetGroupParamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetGroupParamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddPools) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddPools) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddPools) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.GroupNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GroupNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemovePools) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemovePools) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemovePools) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.GroupNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GroupNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemovePoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemovePoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemovePoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RegisterOperatorParam != nil {
		{
			size, err := m.RegisterOperatorParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVotingPowerRatio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVotingPowerRatio) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVotingPowerRatio) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Denominator.Size()
		i -= size
		if _, err := m.Denominator.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Numerator.Size()
		i -= size
		if _, err := m.Numerator.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVotingPowerRatioResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVotingPowerRatioResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVotingPowerRatioResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateLSTStakingEnabled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateLSTStakingEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateLSTStakingEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateLSTStakingEnabledResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateLSTStakingEnabledResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateLSTStakingEnabledResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateRegistryRouter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainApprover)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChurnApprover)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Ejector)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Pauser)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Unpauser)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.InitialPausedStatus != 0 {
		n += 1 + sovTx(uint64(m.InitialPausedStatus))
	}
	return n
}

func (m *MsgCreateRegistryRouterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OperatorSetParams != nil {
		l = m.OperatorSetParams.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.PoolParams) > 0 {
		for _, e := range m.PoolParams {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.GroupEjectionParams != nil {
		l = m.GroupEjectionParams.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MinStake.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreateGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetGroupParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OperatorSetParams != nil {
		l = m.OperatorSetParams.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetGroupParamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddPools) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GroupNumber != 0 {
		n += 1 + sovTx(uint64(m.GroupNumber))
	}
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemovePools) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GroupNumber != 0 {
		n += 1 + sovTx(uint64(m.GroupNumber))
	}
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRemovePoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RegisterOperatorParam != nil {
		l = m.RegisterOperatorParam.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateVotingPowerRatio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Numerator.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Denominator.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateVotingPowerRatioResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateLSTStakingEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *MsgUpdateLSTStakingEnabledResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateRegistryRouter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRegistryRouter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRegistryRouter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainApprover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainApprover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChurnApprover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChurnApprover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ejector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ejector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pauser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pauser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unpauser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unpauser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialPausedStatus", wireType)
			}
			m.InitialPausedStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialPausedStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateRegistryRouterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRegistryRouterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRegistryRouterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorSetParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperatorSetParams == nil {
				m.OperatorSetParams = &types.OperatorSetParam{}
			}
			if err := m.OperatorSetParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolParams = append(m.PoolParams, &types.PoolParams{})
			if err := m.PoolParams[len(m.PoolParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupEjectionParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupEjectionParams == nil {
				m.GroupEjectionParams = &types.GroupEjectionParam{}
			}
			if err := m.GroupEjectionParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetGroupParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetGroupParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetGroupParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorSetParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperatorSetParams == nil {
				m.OperatorSetParams = &types.OperatorSetParam{}
			}
			if err := m.OperatorSetParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetGroupParamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetGroupParamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetGroupParamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddPools) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddPools: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddPools: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNumber", wireType)
			}
			m.GroupNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &types.PoolParams{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemovePools) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemovePools: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemovePools: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNumber", wireType)
			}
			m.GroupNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &types.PoolParams{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemovePoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemovePoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemovePoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterOperatorParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegisterOperatorParam == nil {
				m.RegisterOperatorParam = &RegisterOperatorParam{}
			}
			if err := m.RegisterOperatorParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVotingPowerRatio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVotingPowerRatio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVotingPowerRatio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numerator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Numerator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denominator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Denominator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVotingPowerRatioResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVotingPowerRatioResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVotingPowerRatioResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateLSTStakingEnabled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateLSTStakingEnabled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateLSTStakingEnabled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateLSTStakingEnabledResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateLSTStakingEnabledResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateLSTStakingEnabledResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
