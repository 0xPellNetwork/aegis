// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restaking/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the pevm module's genesis state.
type GenesisState struct {
	OperatorShare      []OperatorShares     `protobuf:"bytes,1,rep,name=operator_share,json=operatorShare,proto3" json:"operator_share"`
	RegistryRouterData []RegistryRouterData `protobuf:"bytes,2,rep,name=registry_router_data,json=registryRouterData,proto3" json:"registry_router_data"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a53643210a8f98, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetOperatorShare() []OperatorShares {
	if m != nil {
		return m.OperatorShare
	}
	return nil
}

func (m *GenesisState) GetRegistryRouterData() []RegistryRouterData {
	if m != nil {
		return m.RegistryRouterData
	}
	return nil
}

// Genesis state legacy
type GenesisStateLegacy struct {
	Params        Params           `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	OperatorShare []OperatorShares `protobuf:"bytes,2,rep,name=operator_share,json=operatorShare,proto3" json:"operator_share"`
}

func (m *GenesisStateLegacy) Reset()         { *m = GenesisStateLegacy{} }
func (m *GenesisStateLegacy) String() string { return proto.CompactTextString(m) }
func (*GenesisStateLegacy) ProtoMessage()    {}
func (*GenesisStateLegacy) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a53643210a8f98, []int{1}
}
func (m *GenesisStateLegacy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisStateLegacy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisStateLegacy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisStateLegacy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisStateLegacy.Merge(m, src)
}
func (m *GenesisStateLegacy) XXX_Size() int {
	return m.Size()
}
func (m *GenesisStateLegacy) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisStateLegacy.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisStateLegacy proto.InternalMessageInfo

func (m *GenesisStateLegacy) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisStateLegacy) GetOperatorShare() []OperatorShares {
	if m != nil {
		return m.OperatorShare
	}
	return nil
}

// null params
type Params struct {
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a53643210a8f98, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// RegistryRouterData is the data structure for registry router
type RegistryRouterData struct {
	RegistryRouterSet             RegistryRouterSet               `protobuf:"bytes,1,opt,name=registry_router_set,json=registryRouterSet,proto3" json:"registry_router_set"`
	DvsInfoList                   DVSInfoList                     `protobuf:"bytes,2,opt,name=dvs_info_list,json=dvsInfoList,proto3" json:"dvs_info_list"`
	GroupList                     GroupList                       `protobuf:"bytes,3,opt,name=group_list,json=groupList,proto3" json:"group_list"`
	GroupOperatorRegistrationList GroupOperatorRegistrationListV2 `protobuf:"bytes,4,opt,name=group_operator_registration_list,json=groupOperatorRegistrationList,proto3" json:"group_operator_registration_list"`
}

func (m *RegistryRouterData) Reset()         { *m = RegistryRouterData{} }
func (m *RegistryRouterData) String() string { return proto.CompactTextString(m) }
func (*RegistryRouterData) ProtoMessage()    {}
func (*RegistryRouterData) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a53643210a8f98, []int{3}
}
func (m *RegistryRouterData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryRouterData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistryRouterData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistryRouterData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryRouterData.Merge(m, src)
}
func (m *RegistryRouterData) XXX_Size() int {
	return m.Size()
}
func (m *RegistryRouterData) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryRouterData.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryRouterData proto.InternalMessageInfo

func (m *RegistryRouterData) GetRegistryRouterSet() RegistryRouterSet {
	if m != nil {
		return m.RegistryRouterSet
	}
	return RegistryRouterSet{}
}

func (m *RegistryRouterData) GetDvsInfoList() DVSInfoList {
	if m != nil {
		return m.DvsInfoList
	}
	return DVSInfoList{}
}

func (m *RegistryRouterData) GetGroupList() GroupList {
	if m != nil {
		return m.GroupList
	}
	return GroupList{}
}

func (m *RegistryRouterData) GetGroupOperatorRegistrationList() GroupOperatorRegistrationListV2 {
	if m != nil {
		return m.GroupOperatorRegistrationList
	}
	return GroupOperatorRegistrationListV2{}
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "restaking.GenesisState")
	proto.RegisterType((*GenesisStateLegacy)(nil), "restaking.GenesisStateLegacy")
	proto.RegisterType((*Params)(nil), "restaking.Params")
	proto.RegisterType((*RegistryRouterData)(nil), "restaking.RegistryRouterData")
}

func init() { proto.RegisterFile("restaking/genesis.proto", fileDescriptor_43a53643210a8f98) }

var fileDescriptor_43a53643210a8f98 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x86, 0xe3, 0xb4, 0x8a, 0xa8, 0x43, 0x91, 0x6a, 0x02, 0x84, 0x88, 0x2e, 0x51, 0x4e, 0x15,
	0x87, 0x6c, 0x15, 0x4e, 0xdc, 0x50, 0x55, 0x51, 0x81, 0x2a, 0xa8, 0x76, 0x45, 0x0f, 0x5c, 0x56,
	0x6e, 0x77, 0xea, 0x5a, 0xdd, 0xae, 0x57, 0xf6, 0xa4, 0x74, 0x1f, 0x02, 0x89, 0x17, 0xe1, 0x3d,
	0x7a, 0xec, 0x91, 0x13, 0xaa, 0x92, 0x17, 0x41, 0xeb, 0xf5, 0xa6, 0x56, 0x02, 0x1c, 0xb8, 0x59,
	0xf3, 0xff, 0xff, 0xe7, 0x99, 0xd1, 0xd0, 0x67, 0x1a, 0x0c, 0xf2, 0x0b, 0x99, 0x8b, 0x50, 0x40,
	0x0e, 0x46, 0x9a, 0x71, 0xa1, 0x15, 0x2a, 0xb6, 0xb1, 0x10, 0x06, 0x3d, 0xa1, 0x84, 0xb2, 0xd5,
	0xb0, 0x7a, 0xd5, 0x86, 0xc1, 0xe0, 0x3e, 0x99, 0x42, 0x06, 0x82, 0xa3, 0x54, 0xb9, 0xd3, 0x9e,
	0x78, 0x54, 0xad, 0xa6, 0x45, 0x5d, 0x1e, 0xfd, 0x20, 0xf4, 0xe1, 0x41, 0xfd, 0x4b, 0x8c, 0x1c,
	0x81, 0xbd, 0xa3, 0x8f, 0x54, 0x01, 0x9a, 0xa3, 0xd2, 0x89, 0x39, 0xe7, 0x1a, 0xfa, 0x64, 0xb8,
	0xb6, 0xd3, 0x9d, 0x3c, 0x1f, 0x2f, 0x00, 0xe3, 0x4f, 0xce, 0x10, 0x57, 0xba, 0xd9, 0x5b, 0xbf,
	0xf9, 0xf5, 0xb2, 0x15, 0x6d, 0x2a, 0xbf, 0xca, 0x3e, 0xd3, 0x9e, 0x06, 0x21, 0x0d, 0xea, 0x32,
	0xd1, 0x6a, 0x8a, 0xa0, 0x93, 0x94, 0x23, 0xef, 0xb7, 0x2d, 0x6d, 0xdb, 0xa3, 0x45, 0xce, 0x16,
	0x59, 0xd7, 0x3e, 0x47, 0xee, 0x88, 0x4c, 0xaf, 0x28, 0xa3, 0x6f, 0x84, 0x32, 0xbf, 0xdf, 0x43,
	0x10, 0xfc, 0xb4, 0x64, 0x21, 0xed, 0x14, 0x5c, 0xf3, 0x4b, 0xd3, 0x27, 0x43, 0xb2, 0xd3, 0x9d,
	0x6c, 0x79, 0xfc, 0x23, 0x2b, 0x38, 0xa6, 0xb3, 0xfd, 0x61, 0xcc, 0xf6, 0xff, 0x8c, 0x39, 0x7a,
	0x40, 0x3b, 0x35, 0x7f, 0x74, 0xd7, 0xa6, 0x6c, 0x75, 0x14, 0x16, 0xd1, 0xc7, 0xcb, 0x7b, 0x30,
	0x80, 0xae, 0xcd, 0x17, 0x7f, 0x5d, 0x43, 0x0c, 0xe8, 0x3e, 0xdc, 0xd2, 0xcb, 0x02, 0x7b, 0x4b,
	0x37, 0xd3, 0x2b, 0x93, 0xc8, 0xfc, 0x4c, 0x25, 0x99, 0x34, 0xd8, 0x6f, 0x5b, 0xda, 0x53, 0x8f,
	0xb6, 0x7f, 0x1c, 0xbf, 0xcf, 0xcf, 0xd4, 0xa1, 0x34, 0x0d, 0xa7, 0x9b, 0x5e, 0x99, 0xa6, 0xc4,
	0xde, 0x50, 0x6a, 0xaf, 0xa0, 0x8e, 0xaf, 0xd9, 0x78, 0xcf, 0x8b, 0x1f, 0x54, 0xa2, 0x17, 0xde,
	0x10, 0x4d, 0x81, 0x95, 0x74, 0x58, 0x47, 0x17, 0xfb, 0x73, 0x0d, 0xda, 0x6b, 0xab, 0x81, 0xeb,
	0x16, 0xf8, 0x6a, 0x19, 0xd8, 0x2c, 0x34, 0xf2, 0x02, 0x15, 0xf3, 0x78, 0xe2, 0xbe, 0xd9, 0x16,
	0xff, 0xb2, 0xed, 0x7d, 0xb8, 0x99, 0x05, 0xe4, 0x76, 0x16, 0x90, 0xbb, 0x59, 0x40, 0xbe, 0xcf,
	0x83, 0xd6, 0xed, 0x3c, 0x68, 0xfd, 0x9c, 0x07, 0xad, 0x2f, 0xbb, 0x42, 0xe2, 0xf9, 0xf4, 0x64,
	0x7c, 0xaa, 0x2e, 0xc3, 0xdd, 0xeb, 0x23, 0xc8, 0xb2, 0x8f, 0x80, 0x5f, 0x95, 0xbe, 0x08, 0x79,
	0x05, 0x09, 0xaf, 0xc3, 0xfb, 0xf3, 0xc7, 0xb2, 0x00, 0x73, 0xd2, 0xb1, 0xf7, 0xff, 0xfa, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x9c, 0x87, 0xa2, 0x6e, 0x03, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RegistryRouterData) > 0 {
		for iNdEx := len(m.RegistryRouterData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegistryRouterData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OperatorShare) > 0 {
		for iNdEx := len(m.OperatorShare) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorShare[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GenesisStateLegacy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisStateLegacy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisStateLegacy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorShare) > 0 {
		for iNdEx := len(m.OperatorShare) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorShare[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RegistryRouterData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryRouterData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryRouterData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GroupOperatorRegistrationList.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.GroupList.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.DvsInfoList.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.RegistryRouterSet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorShare) > 0 {
		for _, e := range m.OperatorShare {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RegistryRouterData) > 0 {
		for _, e := range m.RegistryRouterData {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GenesisStateLegacy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.OperatorShare) > 0 {
		for _, e := range m.OperatorShare {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RegistryRouterData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RegistryRouterSet.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.DvsInfoList.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.GroupList.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.GroupOperatorRegistrationList.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorShare = append(m.OperatorShare, OperatorShares{})
			if err := m.OperatorShare[len(m.OperatorShare)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryRouterData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryRouterData = append(m.RegistryRouterData, RegistryRouterData{})
			if err := m.RegistryRouterData[len(m.RegistryRouterData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisStateLegacy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisStateLegacy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisStateLegacy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorShare = append(m.OperatorShare, OperatorShares{})
			if err := m.OperatorShare[len(m.OperatorShare)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryRouterData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryRouterData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryRouterData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryRouterSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegistryRouterSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DvsInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DvsInfoList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOperatorRegistrationList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupOperatorRegistrationList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
