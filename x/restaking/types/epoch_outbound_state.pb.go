// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restaking/epoch_outbound_state.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OutboundStatus is the status of outbound
type OutboundStatus int32

const (
	// outbound is initializing
	OutboundStatus_OUTBOUND_STATUS_INITIALIZING OutboundStatus = 0
	// outbound is normal
	OutboundStatus_OUTBOUND_STATUS_NORMAL OutboundStatus = 1
	// outbound is syncing
	OutboundStatus_OUTBOUND_STATUS_SYNCING OutboundStatus = 2
)

var OutboundStatus_name = map[int32]string{
	0: "OUTBOUND_STATUS_INITIALIZING",
	1: "OUTBOUND_STATUS_NORMAL",
	2: "OUTBOUND_STATUS_SYNCING",
}

var OutboundStatus_value = map[string]int32{
	"OUTBOUND_STATUS_INITIALIZING": 0,
	"OUTBOUND_STATUS_NORMAL":       1,
	"OUTBOUND_STATUS_SYNCING":      2,
}

func (x OutboundStatus) String() string {
	return proto.EnumName(OutboundStatus_name, int32(x))
}

func (OutboundStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0937c3b6679fa926, []int{0}
}

// EpochOutboundState represents the outbound state of a chain
type EpochOutboundState struct {
	ChainId        uint64         `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	OutboundStatus OutboundStatus `protobuf:"varint,2,opt,name=outbound_status,json=outboundStatus,proto3,enum=restaking.OutboundStatus" json:"outbound_status,omitempty"`
	EpochNumber    uint64         `protobuf:"varint,3,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
}

func (m *EpochOutboundState) Reset()         { *m = EpochOutboundState{} }
func (m *EpochOutboundState) String() string { return proto.CompactTextString(m) }
func (*EpochOutboundState) ProtoMessage()    {}
func (*EpochOutboundState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0937c3b6679fa926, []int{0}
}
func (m *EpochOutboundState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochOutboundState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochOutboundState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochOutboundState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochOutboundState.Merge(m, src)
}
func (m *EpochOutboundState) XXX_Size() int {
	return m.Size()
}
func (m *EpochOutboundState) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochOutboundState.DiscardUnknown(m)
}

var xxx_messageInfo_EpochOutboundState proto.InternalMessageInfo

func (m *EpochOutboundState) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *EpochOutboundState) GetOutboundStatus() OutboundStatus {
	if m != nil {
		return m.OutboundStatus
	}
	return OutboundStatus_OUTBOUND_STATUS_INITIALIZING
}

func (m *EpochOutboundState) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func init() {
	proto.RegisterEnum("restaking.OutboundStatus", OutboundStatus_name, OutboundStatus_value)
	proto.RegisterType((*EpochOutboundState)(nil), "restaking.EpochOutboundState")
}

func init() {
	proto.RegisterFile("restaking/epoch_outbound_state.proto", fileDescriptor_0937c3b6679fa926)
}

var fileDescriptor_0937c3b6679fa926 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0x4a, 0x2d, 0x2e,
	0x49, 0xcc, 0xce, 0xcc, 0x4b, 0xd7, 0x4f, 0x2d, 0xc8, 0x4f, 0xce, 0x88, 0xcf, 0x2f, 0x2d, 0x49,
	0xca, 0x2f, 0xcd, 0x4b, 0x89, 0x2f, 0x2e, 0x49, 0x2c, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x84, 0xab, 0x92, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x8b, 0xea, 0x83, 0x58, 0x10,
	0x05, 0x4a, 0xd3, 0x18, 0xb9, 0x84, 0x5c, 0x41, 0xfa, 0xfd, 0xa1, 0xda, 0x83, 0x41, 0xba, 0x85,
	0x24, 0xb9, 0x38, 0x92, 0x33, 0x12, 0x33, 0xf3, 0xe2, 0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35,
	0x58, 0x82, 0xd8, 0xc1, 0x7c, 0xcf, 0x14, 0x21, 0x27, 0x2e, 0x7e, 0x14, 0xab, 0x4a, 0x8b, 0x25,
	0x98, 0x14, 0x18, 0x35, 0xf8, 0x8c, 0x24, 0xf5, 0xe0, 0x96, 0xe9, 0x21, 0x9b, 0x56, 0x5a, 0x1c,
	0xc4, 0x97, 0x8f, 0xc2, 0x17, 0x52, 0xe4, 0xe2, 0x81, 0x38, 0x3a, 0xaf, 0x34, 0x37, 0x29, 0xb5,
	0x48, 0x82, 0x19, 0x6c, 0x05, 0x37, 0x58, 0xcc, 0x0f, 0x2c, 0xa4, 0x55, 0xc8, 0xc5, 0x87, 0x6a,
	0x88, 0x90, 0x02, 0x97, 0x8c, 0x7f, 0x68, 0x88, 0x93, 0x7f, 0xa8, 0x9f, 0x4b, 0x7c, 0x70, 0x88,
	0x63, 0x48, 0x68, 0x70, 0xbc, 0xa7, 0x9f, 0x67, 0x88, 0xa7, 0xa3, 0x8f, 0x67, 0x94, 0xa7, 0x9f,
	0xbb, 0x00, 0x83, 0x90, 0x14, 0x97, 0x18, 0xba, 0x0a, 0x3f, 0xff, 0x20, 0x5f, 0x47, 0x1f, 0x01,
	0x46, 0x21, 0x69, 0x2e, 0x71, 0x74, 0xb9, 0xe0, 0x48, 0x3f, 0x67, 0x90, 0x46, 0x26, 0x29, 0x96,
	0x15, 0x4b, 0xe4, 0x18, 0x9d, 0xbc, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1,
	0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21,
	0xca, 0x20, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0xdf, 0xa0, 0x22, 0x20,
	0x35, 0x27, 0xc7, 0x2f, 0xb5, 0xa4, 0x3c, 0xbf, 0x28, 0x5b, 0x3f, 0x31, 0x35, 0x3d, 0xb3, 0x58,
	0xbf, 0x42, 0x1f, 0x11, 0x1b, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0xe0, 0xe0, 0x35, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xf0, 0x99, 0x01, 0xa7, 0x01, 0x00, 0x00,
}

func (m *EpochOutboundState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochOutboundState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochOutboundState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochNumber != 0 {
		i = encodeVarintEpochOutboundState(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.OutboundStatus != 0 {
		i = encodeVarintEpochOutboundState(dAtA, i, uint64(m.OutboundStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintEpochOutboundState(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEpochOutboundState(dAtA []byte, offset int, v uint64) int {
	offset -= sovEpochOutboundState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EpochOutboundState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovEpochOutboundState(uint64(m.ChainId))
	}
	if m.OutboundStatus != 0 {
		n += 1 + sovEpochOutboundState(uint64(m.OutboundStatus))
	}
	if m.EpochNumber != 0 {
		n += 1 + sovEpochOutboundState(uint64(m.EpochNumber))
	}
	return n
}

func sovEpochOutboundState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEpochOutboundState(x uint64) (n int) {
	return sovEpochOutboundState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EpochOutboundState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochOutboundState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochOutboundState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochOutboundState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochOutboundState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundStatus", wireType)
			}
			m.OutboundStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochOutboundState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundStatus |= OutboundStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochOutboundState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEpochOutboundState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochOutboundState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEpochOutboundState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEpochOutboundState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochOutboundState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochOutboundState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEpochOutboundState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEpochOutboundState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEpochOutboundState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEpochOutboundState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEpochOutboundState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEpochOutboundState = fmt.Errorf("proto: unexpected end of group")
)
