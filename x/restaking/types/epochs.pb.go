// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restaking/epochs.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EpochNumber is the epoch number
type EpochNumber struct {
	EpochNumber uint64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
}

func (m *EpochNumber) Reset()         { *m = EpochNumber{} }
func (m *EpochNumber) String() string { return proto.CompactTextString(m) }
func (*EpochNumber) ProtoMessage()    {}
func (*EpochNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63843d0ff152a4a, []int{0}
}
func (m *EpochNumber) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochNumber.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochNumber.Merge(m, src)
}
func (m *EpochNumber) XXX_Size() int {
	return m.Size()
}
func (m *EpochNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochNumber.DiscardUnknown(m)
}

var xxx_messageInfo_EpochNumber proto.InternalMessageInfo

func (m *EpochNumber) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

// EpochOperatorSharesSyncTxs represents a collection of outbound transactions
// that synchronize operator shares across chains during an epoch update. These
// transactions contain the pending cross-chain message indexes for operator
// shares synchronization.
type EpochOperatorSharesSyncTxs struct {
	PendingXmsgIndexes []string `protobuf:"bytes,1,rep,name=pending_xmsg_indexes,json=pendingXmsgIndexes,proto3" json:"pending_xmsg_indexes,omitempty"`
}

func (m *EpochOperatorSharesSyncTxs) Reset()         { *m = EpochOperatorSharesSyncTxs{} }
func (m *EpochOperatorSharesSyncTxs) String() string { return proto.CompactTextString(m) }
func (*EpochOperatorSharesSyncTxs) ProtoMessage()    {}
func (*EpochOperatorSharesSyncTxs) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63843d0ff152a4a, []int{1}
}
func (m *EpochOperatorSharesSyncTxs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochOperatorSharesSyncTxs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochOperatorSharesSyncTxs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochOperatorSharesSyncTxs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochOperatorSharesSyncTxs.Merge(m, src)
}
func (m *EpochOperatorSharesSyncTxs) XXX_Size() int {
	return m.Size()
}
func (m *EpochOperatorSharesSyncTxs) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochOperatorSharesSyncTxs.DiscardUnknown(m)
}

var xxx_messageInfo_EpochOperatorSharesSyncTxs proto.InternalMessageInfo

func (m *EpochOperatorSharesSyncTxs) GetPendingXmsgIndexes() []string {
	if m != nil {
		return m.PendingXmsgIndexes
	}
	return nil
}

func init() {
	proto.RegisterType((*EpochNumber)(nil), "restaking.EpochNumber")
	proto.RegisterType((*EpochOperatorSharesSyncTxs)(nil), "restaking.EpochOperatorSharesSyncTxs")
}

func init() { proto.RegisterFile("restaking/epochs.proto", fileDescriptor_a63843d0ff152a4a) }

var fileDescriptor_a63843d0ff152a4a = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x4a, 0x2d, 0x2e,
	0x49, 0xcc, 0xce, 0xcc, 0x4b, 0xd7, 0x4f, 0x2d, 0xc8, 0x4f, 0xce, 0x28, 0xd6, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x8b, 0x2b, 0x19, 0x70, 0x71, 0xbb, 0x82, 0xa4, 0xfc, 0x4a, 0x73,
	0x93, 0x52, 0x8b, 0x84, 0x14, 0xb9, 0x78, 0xc0, 0x2a, 0xe3, 0xf3, 0xc0, 0x7c, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0x96, 0x20, 0xee, 0x54, 0x84, 0x12, 0x25, 0x3f, 0x2e, 0x29, 0xb0, 0x0e, 0xff, 0x82,
	0xd4, 0xa2, 0xc4, 0x92, 0xfc, 0xa2, 0xe0, 0x8c, 0xc4, 0xa2, 0xd4, 0xe2, 0xe0, 0xca, 0xbc, 0xe4,
	0x90, 0x8a, 0x62, 0x21, 0x03, 0x2e, 0x91, 0x82, 0xd4, 0xbc, 0x94, 0xcc, 0xbc, 0xf4, 0xf8, 0x8a,
	0xdc, 0xe2, 0xf4, 0xf8, 0xcc, 0xbc, 0x94, 0xd4, 0x8a, 0xd4, 0x62, 0x09, 0x46, 0x05, 0x66, 0x0d,
	0xce, 0x20, 0x21, 0xa8, 0x5c, 0x44, 0x6e, 0x71, 0xba, 0x27, 0x44, 0xc6, 0xc9, 0xeb, 0xc4, 0x23,
	0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2,
	0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x0c, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4,
	0x92, 0xf3, 0x73, 0xf5, 0x0d, 0x2a, 0x02, 0x52, 0x73, 0x72, 0xfc, 0x52, 0x4b, 0xca, 0xf3, 0x8b,
	0xb2, 0xf5, 0x13, 0x53, 0xd3, 0x33, 0x8b, 0xf5, 0x2b, 0xf4, 0x11, 0xfe, 0x2b, 0xa9, 0x2c, 0x48,
	0x2d, 0x4e, 0x62, 0x03, 0xfb, 0xcf, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x35, 0xbb, 0xf6,
	0xf9, 0x00, 0x00, 0x00,
}

func (m *EpochNumber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochNumber) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochNumber) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochNumber != 0 {
		i = encodeVarintEpochs(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochOperatorSharesSyncTxs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochOperatorSharesSyncTxs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochOperatorSharesSyncTxs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingXmsgIndexes) > 0 {
		for iNdEx := len(m.PendingXmsgIndexes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PendingXmsgIndexes[iNdEx])
			copy(dAtA[i:], m.PendingXmsgIndexes[iNdEx])
			i = encodeVarintEpochs(dAtA, i, uint64(len(m.PendingXmsgIndexes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintEpochs(dAtA []byte, offset int, v uint64) int {
	offset -= sovEpochs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EpochNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovEpochs(uint64(m.EpochNumber))
	}
	return n
}

func (m *EpochOperatorSharesSyncTxs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingXmsgIndexes) > 0 {
		for _, s := range m.PendingXmsgIndexes {
			l = len(s)
			n += 1 + l + sovEpochs(uint64(l))
		}
	}
	return n
}

func sovEpochs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEpochs(x uint64) (n int) {
	return sovEpochs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EpochNumber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEpochs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochOperatorSharesSyncTxs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochOperatorSharesSyncTxs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochOperatorSharesSyncTxs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingXmsgIndexes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingXmsgIndexes = append(m.PendingXmsgIndexes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpochs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEpochs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEpochs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEpochs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEpochs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEpochs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEpochs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEpochs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEpochs = fmt.Errorf("proto: unexpected end of group")
)
