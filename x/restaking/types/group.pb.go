// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restaking/group.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RegistryRouterList is a list of registry router addresses
type RegistryRouterList struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *RegistryRouterList) Reset()         { *m = RegistryRouterList{} }
func (m *RegistryRouterList) String() string { return proto.CompactTextString(m) }
func (*RegistryRouterList) ProtoMessage()    {}
func (*RegistryRouterList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{0}
}
func (m *RegistryRouterList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryRouterList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistryRouterList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistryRouterList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryRouterList.Merge(m, src)
}
func (m *RegistryRouterList) XXX_Size() int {
	return m.Size()
}
func (m *RegistryRouterList) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryRouterList.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryRouterList proto.InternalMessageInfo

func (m *RegistryRouterList) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// DVSInfoList is a list of DVSInfo
type DVSInfoList struct {
	DvsInfos []*DVSInfo `protobuf:"bytes,1,rep,name=dvs_infos,json=dvsInfos,proto3" json:"dvs_infos,omitempty"`
}

func (m *DVSInfoList) Reset()         { *m = DVSInfoList{} }
func (m *DVSInfoList) String() string { return proto.CompactTextString(m) }
func (*DVSInfoList) ProtoMessage()    {}
func (*DVSInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{1}
}
func (m *DVSInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DVSInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DVSInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DVSInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DVSInfoList.Merge(m, src)
}
func (m *DVSInfoList) XXX_Size() int {
	return m.Size()
}
func (m *DVSInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_DVSInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_DVSInfoList proto.InternalMessageInfo

func (m *DVSInfoList) GetDvsInfos() []*DVSInfo {
	if m != nil {
		return m.DvsInfos
	}
	return nil
}

// DVSInfo is the information of a DVS
type DVSInfo struct {
	ChainId          uint64         `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ServiceManager   string         `protobuf:"bytes,2,opt,name=service_manager,json=serviceManager,proto3" json:"service_manager,omitempty"`
	EjectionManager  string         `protobuf:"bytes,3,opt,name=ejection_manager,json=ejectionManager,proto3" json:"ejection_manager,omitempty"`
	CentralScheduler string         `protobuf:"bytes,4,opt,name=central_scheduler,json=centralScheduler,proto3" json:"central_scheduler,omitempty"`
	StakeManager     string         `protobuf:"bytes,5,opt,name=stake_manager,json=stakeManager,proto3" json:"stake_manager,omitempty"`
	BlsApkRegistry   string         `protobuf:"bytes,6,opt,name=bls_apk_registry,json=blsApkRegistry,proto3" json:"bls_apk_registry,omitempty"`
	IndexRegistry    string         `protobuf:"bytes,7,opt,name=index_registry,json=indexRegistry,proto3" json:"index_registry,omitempty"`
	OutboundState    OutboundStatus `protobuf:"varint,8,opt,name=outbound_state,json=outboundState,proto3,enum=restaking.OutboundStatus" json:"outbound_state,omitempty"`
}

func (m *DVSInfo) Reset()         { *m = DVSInfo{} }
func (m *DVSInfo) String() string { return proto.CompactTextString(m) }
func (*DVSInfo) ProtoMessage()    {}
func (*DVSInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{2}
}
func (m *DVSInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DVSInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DVSInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DVSInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DVSInfo.Merge(m, src)
}
func (m *DVSInfo) XXX_Size() int {
	return m.Size()
}
func (m *DVSInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DVSInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DVSInfo proto.InternalMessageInfo

func (m *DVSInfo) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *DVSInfo) GetServiceManager() string {
	if m != nil {
		return m.ServiceManager
	}
	return ""
}

func (m *DVSInfo) GetEjectionManager() string {
	if m != nil {
		return m.EjectionManager
	}
	return ""
}

func (m *DVSInfo) GetCentralScheduler() string {
	if m != nil {
		return m.CentralScheduler
	}
	return ""
}

func (m *DVSInfo) GetStakeManager() string {
	if m != nil {
		return m.StakeManager
	}
	return ""
}

func (m *DVSInfo) GetBlsApkRegistry() string {
	if m != nil {
		return m.BlsApkRegistry
	}
	return ""
}

func (m *DVSInfo) GetIndexRegistry() string {
	if m != nil {
		return m.IndexRegistry
	}
	return ""
}

func (m *DVSInfo) GetOutboundState() OutboundStatus {
	if m != nil {
		return m.OutboundState
	}
	return OutboundStatus_OUTBOUND_STATUS_INITIALIZING
}

// GroupList is a list of groups
type GroupList struct {
	Groups []*Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *GroupList) Reset()         { *m = GroupList{} }
func (m *GroupList) String() string { return proto.CompactTextString(m) }
func (*GroupList) ProtoMessage()    {}
func (*GroupList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{3}
}
func (m *GroupList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupList.Merge(m, src)
}
func (m *GroupList) XXX_Size() int {
	return m.Size()
}
func (m *GroupList) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupList.DiscardUnknown(m)
}

var xxx_messageInfo_GroupList proto.InternalMessageInfo

func (m *GroupList) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Group represents the group configuration
type Group struct {
	GroupNumber        uint64              `protobuf:"varint,1,opt,name=group_number,json=groupNumber,proto3" json:"group_number,omitempty"`
	OperatorSetParam   *OperatorSetParam   `protobuf:"bytes,2,opt,name=operator_set_param,json=operatorSetParam,proto3" json:"operator_set_param,omitempty"`
	MinimumStake       uint64              `protobuf:"varint,3,opt,name=minimum_stake,json=minimumStake,proto3" json:"minimum_stake,omitempty"`
	PoolParams         []*PoolParams       `protobuf:"bytes,4,rep,name=pool_params,json=poolParams,proto3" json:"pool_params,omitempty"`
	GroupEjectionParam *GroupEjectionParam `protobuf:"bytes,5,opt,name=group_ejection_param,json=groupEjectionParam,proto3" json:"group_ejection_param,omitempty"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{4}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetGroupNumber() uint64 {
	if m != nil {
		return m.GroupNumber
	}
	return 0
}

func (m *Group) GetOperatorSetParam() *OperatorSetParam {
	if m != nil {
		return m.OperatorSetParam
	}
	return nil
}

func (m *Group) GetMinimumStake() uint64 {
	if m != nil {
		return m.MinimumStake
	}
	return 0
}

func (m *Group) GetPoolParams() []*PoolParams {
	if m != nil {
		return m.PoolParams
	}
	return nil
}

func (m *Group) GetGroupEjectionParam() *GroupEjectionParam {
	if m != nil {
		return m.GroupEjectionParam
	}
	return nil
}

// OperatorSetParam defines the parameters for the operator set
type OperatorSetParam struct {
	MaxOperatorCount        uint32 `protobuf:"varint,1,opt,name=max_operator_count,json=maxOperatorCount,proto3" json:"max_operator_count,omitempty"`
	KickBipsOfOperatorStake uint32 `protobuf:"varint,2,opt,name=kick_bips_of_operator_stake,json=kickBipsOfOperatorStake,proto3" json:"kick_bips_of_operator_stake,omitempty"`
	KickBipsOfTotalStake    uint32 `protobuf:"varint,3,opt,name=kick_bips_of_total_stake,json=kickBipsOfTotalStake,proto3" json:"kick_bips_of_total_stake,omitempty"`
}

func (m *OperatorSetParam) Reset()         { *m = OperatorSetParam{} }
func (m *OperatorSetParam) String() string { return proto.CompactTextString(m) }
func (*OperatorSetParam) ProtoMessage()    {}
func (*OperatorSetParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{5}
}
func (m *OperatorSetParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorSetParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorSetParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorSetParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorSetParam.Merge(m, src)
}
func (m *OperatorSetParam) XXX_Size() int {
	return m.Size()
}
func (m *OperatorSetParam) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorSetParam.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorSetParam proto.InternalMessageInfo

func (m *OperatorSetParam) GetMaxOperatorCount() uint32 {
	if m != nil {
		return m.MaxOperatorCount
	}
	return 0
}

func (m *OperatorSetParam) GetKickBipsOfOperatorStake() uint32 {
	if m != nil {
		return m.KickBipsOfOperatorStake
	}
	return 0
}

func (m *OperatorSetParam) GetKickBipsOfTotalStake() uint32 {
	if m != nil {
		return m.KickBipsOfTotalStake
	}
	return 0
}

// PoolParams defines the pool parameters
type PoolParams struct {
	ChainId    uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Pool       string `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	Multiplier uint64 `protobuf:"varint,3,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (m *PoolParams) Reset()         { *m = PoolParams{} }
func (m *PoolParams) String() string { return proto.CompactTextString(m) }
func (*PoolParams) ProtoMessage()    {}
func (*PoolParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{6}
}
func (m *PoolParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolParams.Merge(m, src)
}
func (m *PoolParams) XXX_Size() int {
	return m.Size()
}
func (m *PoolParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolParams.DiscardUnknown(m)
}

var xxx_messageInfo_PoolParams proto.InternalMessageInfo

func (m *PoolParams) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *PoolParams) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *PoolParams) GetMultiplier() uint64 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

// GroupEjectionParam defines the parameters for group ejection
type GroupEjectionParam struct {
	RateLimitWindow       uint32 `protobuf:"varint,1,opt,name=rate_limit_window,json=rateLimitWindow,proto3" json:"rate_limit_window,omitempty"`
	EjectableStakePercent uint32 `protobuf:"varint,2,opt,name=ejectable_stake_percent,json=ejectableStakePercent,proto3" json:"ejectable_stake_percent,omitempty"`
}

func (m *GroupEjectionParam) Reset()         { *m = GroupEjectionParam{} }
func (m *GroupEjectionParam) String() string { return proto.CompactTextString(m) }
func (*GroupEjectionParam) ProtoMessage()    {}
func (*GroupEjectionParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{7}
}
func (m *GroupEjectionParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupEjectionParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupEjectionParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupEjectionParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupEjectionParam.Merge(m, src)
}
func (m *GroupEjectionParam) XXX_Size() int {
	return m.Size()
}
func (m *GroupEjectionParam) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupEjectionParam.DiscardUnknown(m)
}

var xxx_messageInfo_GroupEjectionParam proto.InternalMessageInfo

func (m *GroupEjectionParam) GetRateLimitWindow() uint32 {
	if m != nil {
		return m.RateLimitWindow
	}
	return 0
}

func (m *GroupEjectionParam) GetEjectableStakePercent() uint32 {
	if m != nil {
		return m.EjectableStakePercent
	}
	return 0
}

// GroupOperatorRegistrationList is a list of quorum operator registration
type GroupOperatorRegistrationList struct {
	OperatorRegisteredInfos []*GroupOperatorRegistration `protobuf:"bytes,1,rep,name=operator_registered_infos,json=operatorRegisteredInfos,proto3" json:"operator_registered_infos,omitempty"`
}

func (m *GroupOperatorRegistrationList) Reset()         { *m = GroupOperatorRegistrationList{} }
func (m *GroupOperatorRegistrationList) String() string { return proto.CompactTextString(m) }
func (*GroupOperatorRegistrationList) ProtoMessage()    {}
func (*GroupOperatorRegistrationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{8}
}
func (m *GroupOperatorRegistrationList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupOperatorRegistrationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupOperatorRegistrationList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupOperatorRegistrationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupOperatorRegistrationList.Merge(m, src)
}
func (m *GroupOperatorRegistrationList) XXX_Size() int {
	return m.Size()
}
func (m *GroupOperatorRegistrationList) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupOperatorRegistrationList.DiscardUnknown(m)
}

var xxx_messageInfo_GroupOperatorRegistrationList proto.InternalMessageInfo

func (m *GroupOperatorRegistrationList) GetOperatorRegisteredInfos() []*GroupOperatorRegistration {
	if m != nil {
		return m.OperatorRegisteredInfos
	}
	return nil
}

// OperatorRegisteredInfo represents the information of an operator registration
type GroupOperatorRegistration struct {
	Operator     string                    `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	OperatorId   []byte                    `protobuf:"bytes,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	GroupNumbers []byte                    `protobuf:"bytes,3,opt,name=group_numbers,json=groupNumbers,proto3" json:"group_numbers,omitempty"`
	Socket       string                    `protobuf:"bytes,4,opt,name=socket,proto3" json:"socket,omitempty"`
	PubkeyParams *PubkeyRegistrationParams `protobuf:"bytes,5,opt,name=pubkey_params,json=pubkeyParams,proto3" json:"pubkey_params,omitempty"`
}

func (m *GroupOperatorRegistration) Reset()         { *m = GroupOperatorRegistration{} }
func (m *GroupOperatorRegistration) String() string { return proto.CompactTextString(m) }
func (*GroupOperatorRegistration) ProtoMessage()    {}
func (*GroupOperatorRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{9}
}
func (m *GroupOperatorRegistration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupOperatorRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupOperatorRegistration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupOperatorRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupOperatorRegistration.Merge(m, src)
}
func (m *GroupOperatorRegistration) XXX_Size() int {
	return m.Size()
}
func (m *GroupOperatorRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupOperatorRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_GroupOperatorRegistration proto.InternalMessageInfo

func (m *GroupOperatorRegistration) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *GroupOperatorRegistration) GetOperatorId() []byte {
	if m != nil {
		return m.OperatorId
	}
	return nil
}

func (m *GroupOperatorRegistration) GetGroupNumbers() []byte {
	if m != nil {
		return m.GroupNumbers
	}
	return nil
}

func (m *GroupOperatorRegistration) GetSocket() string {
	if m != nil {
		return m.Socket
	}
	return ""
}

func (m *GroupOperatorRegistration) GetPubkeyParams() *PubkeyRegistrationParams {
	if m != nil {
		return m.PubkeyParams
	}
	return nil
}

// PubkeyRegistrationParams holds public key registration details
type PubkeyRegistrationParams struct {
	PubkeyG1 *G1Point `protobuf:"bytes,1,opt,name=pubkey_g1,json=pubkeyG1,proto3" json:"pubkey_g1,omitempty"`
	PubkeyG2 *G2Point `protobuf:"bytes,2,opt,name=pubkey_g2,json=pubkeyG2,proto3" json:"pubkey_g2,omitempty"`
}

func (m *PubkeyRegistrationParams) Reset()         { *m = PubkeyRegistrationParams{} }
func (m *PubkeyRegistrationParams) String() string { return proto.CompactTextString(m) }
func (*PubkeyRegistrationParams) ProtoMessage()    {}
func (*PubkeyRegistrationParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{10}
}
func (m *PubkeyRegistrationParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubkeyRegistrationParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubkeyRegistrationParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubkeyRegistrationParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubkeyRegistrationParams.Merge(m, src)
}
func (m *PubkeyRegistrationParams) XXX_Size() int {
	return m.Size()
}
func (m *PubkeyRegistrationParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PubkeyRegistrationParams.DiscardUnknown(m)
}

var xxx_messageInfo_PubkeyRegistrationParams proto.InternalMessageInfo

func (m *PubkeyRegistrationParams) GetPubkeyG1() *G1Point {
	if m != nil {
		return m.PubkeyG1
	}
	return nil
}

func (m *PubkeyRegistrationParams) GetPubkeyG2() *G2Point {
	if m != nil {
		return m.PubkeyG2
	}
	return nil
}

// G1Point represents a point on the BN254 curve
type G1Point struct {
	X uint64 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y uint64 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *G1Point) Reset()         { *m = G1Point{} }
func (m *G1Point) String() string { return proto.CompactTextString(m) }
func (*G1Point) ProtoMessage()    {}
func (*G1Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{11}
}
func (m *G1Point) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *G1Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_G1Point.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *G1Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_G1Point.Merge(m, src)
}
func (m *G1Point) XXX_Size() int {
	return m.Size()
}
func (m *G1Point) XXX_DiscardUnknown() {
	xxx_messageInfo_G1Point.DiscardUnknown(m)
}

var xxx_messageInfo_G1Point proto.InternalMessageInfo

func (m *G1Point) GetX() uint64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *G1Point) GetY() uint64 {
	if m != nil {
		return m.Y
	}
	return 0
}

// G2Point represents a point on the BN254 curve, with field elements encoded as
// arrays
type G2Point struct {
	X []uint64 `protobuf:"varint,1,rep,packed,name=x,proto3" json:"x,omitempty"`
	Y []uint64 `protobuf:"varint,2,rep,packed,name=y,proto3" json:"y,omitempty"`
}

func (m *G2Point) Reset()         { *m = G2Point{} }
func (m *G2Point) String() string { return proto.CompactTextString(m) }
func (*G2Point) ProtoMessage()    {}
func (*G2Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{12}
}
func (m *G2Point) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *G2Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_G2Point.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *G2Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_G2Point.Merge(m, src)
}
func (m *G2Point) XXX_Size() int {
	return m.Size()
}
func (m *G2Point) XXX_DiscardUnknown() {
	xxx_messageInfo_G2Point.DiscardUnknown(m)
}

var xxx_messageInfo_G2Point proto.InternalMessageInfo

func (m *G2Point) GetX() []uint64 {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *G2Point) GetY() []uint64 {
	if m != nil {
		return m.Y
	}
	return nil
}

// GroupOperatorRegistrationListV2 is a list of quorum operator registration
type GroupOperatorRegistrationListV2 struct {
	OperatorRegisteredInfos []*GroupOperatorRegistrationV2 `protobuf:"bytes,1,rep,name=operator_registered_infos,json=operatorRegisteredInfos,proto3" json:"operator_registered_infos,omitempty"`
}

func (m *GroupOperatorRegistrationListV2) Reset()         { *m = GroupOperatorRegistrationListV2{} }
func (m *GroupOperatorRegistrationListV2) String() string { return proto.CompactTextString(m) }
func (*GroupOperatorRegistrationListV2) ProtoMessage()    {}
func (*GroupOperatorRegistrationListV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{13}
}
func (m *GroupOperatorRegistrationListV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupOperatorRegistrationListV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupOperatorRegistrationListV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupOperatorRegistrationListV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupOperatorRegistrationListV2.Merge(m, src)
}
func (m *GroupOperatorRegistrationListV2) XXX_Size() int {
	return m.Size()
}
func (m *GroupOperatorRegistrationListV2) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupOperatorRegistrationListV2.DiscardUnknown(m)
}

var xxx_messageInfo_GroupOperatorRegistrationListV2 proto.InternalMessageInfo

func (m *GroupOperatorRegistrationListV2) GetOperatorRegisteredInfos() []*GroupOperatorRegistrationV2 {
	if m != nil {
		return m.OperatorRegisteredInfos
	}
	return nil
}

// OperatorRegisteredInfoV2 represents the information of an operator registration
type GroupOperatorRegistrationV2 struct {
	Operator     string                      `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	OperatorId   []byte                      `protobuf:"bytes,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	GroupNumbers []byte                      `protobuf:"bytes,3,opt,name=group_numbers,json=groupNumbers,proto3" json:"group_numbers,omitempty"`
	Socket       string                      `protobuf:"bytes,4,opt,name=socket,proto3" json:"socket,omitempty"`
	PubkeyParams *PubkeyRegistrationParamsV2 `protobuf:"bytes,5,opt,name=pubkey_params,json=pubkeyParams,proto3" json:"pubkey_params,omitempty"`
}

func (m *GroupOperatorRegistrationV2) Reset()         { *m = GroupOperatorRegistrationV2{} }
func (m *GroupOperatorRegistrationV2) String() string { return proto.CompactTextString(m) }
func (*GroupOperatorRegistrationV2) ProtoMessage()    {}
func (*GroupOperatorRegistrationV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{14}
}
func (m *GroupOperatorRegistrationV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupOperatorRegistrationV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupOperatorRegistrationV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupOperatorRegistrationV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupOperatorRegistrationV2.Merge(m, src)
}
func (m *GroupOperatorRegistrationV2) XXX_Size() int {
	return m.Size()
}
func (m *GroupOperatorRegistrationV2) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupOperatorRegistrationV2.DiscardUnknown(m)
}

var xxx_messageInfo_GroupOperatorRegistrationV2 proto.InternalMessageInfo

func (m *GroupOperatorRegistrationV2) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *GroupOperatorRegistrationV2) GetOperatorId() []byte {
	if m != nil {
		return m.OperatorId
	}
	return nil
}

func (m *GroupOperatorRegistrationV2) GetGroupNumbers() []byte {
	if m != nil {
		return m.GroupNumbers
	}
	return nil
}

func (m *GroupOperatorRegistrationV2) GetSocket() string {
	if m != nil {
		return m.Socket
	}
	return ""
}

func (m *GroupOperatorRegistrationV2) GetPubkeyParams() *PubkeyRegistrationParamsV2 {
	if m != nil {
		return m.PubkeyParams
	}
	return nil
}

// PubkeyRegistrationParamsV2 holds public key registration details
type PubkeyRegistrationParamsV2 struct {
	PubkeyG1 *G1PointV2 `protobuf:"bytes,3,opt,name=pubkey_g1,json=pubkeyG1,proto3" json:"pubkey_g1,omitempty"`
	PubkeyG2 *G2PointV2 `protobuf:"bytes,4,opt,name=pubkey_g2,json=pubkeyG2,proto3" json:"pubkey_g2,omitempty"`
}

func (m *PubkeyRegistrationParamsV2) Reset()         { *m = PubkeyRegistrationParamsV2{} }
func (m *PubkeyRegistrationParamsV2) String() string { return proto.CompactTextString(m) }
func (*PubkeyRegistrationParamsV2) ProtoMessage()    {}
func (*PubkeyRegistrationParamsV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{15}
}
func (m *PubkeyRegistrationParamsV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubkeyRegistrationParamsV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubkeyRegistrationParamsV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubkeyRegistrationParamsV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubkeyRegistrationParamsV2.Merge(m, src)
}
func (m *PubkeyRegistrationParamsV2) XXX_Size() int {
	return m.Size()
}
func (m *PubkeyRegistrationParamsV2) XXX_DiscardUnknown() {
	xxx_messageInfo_PubkeyRegistrationParamsV2.DiscardUnknown(m)
}

var xxx_messageInfo_PubkeyRegistrationParamsV2 proto.InternalMessageInfo

func (m *PubkeyRegistrationParamsV2) GetPubkeyG1() *G1PointV2 {
	if m != nil {
		return m.PubkeyG1
	}
	return nil
}

func (m *PubkeyRegistrationParamsV2) GetPubkeyG2() *G2PointV2 {
	if m != nil {
		return m.PubkeyG2
	}
	return nil
}

// G1Point represents a point on the BN254 curve
type G1PointV2 struct {
	X cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=x,proto3,customtype=cosmossdk.io/math.Int" json:"x"`
	Y cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=y,proto3,customtype=cosmossdk.io/math.Int" json:"y"`
}

func (m *G1PointV2) Reset()         { *m = G1PointV2{} }
func (m *G1PointV2) String() string { return proto.CompactTextString(m) }
func (*G1PointV2) ProtoMessage()    {}
func (*G1PointV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{16}
}
func (m *G1PointV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *G1PointV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_G1PointV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *G1PointV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_G1PointV2.Merge(m, src)
}
func (m *G1PointV2) XXX_Size() int {
	return m.Size()
}
func (m *G1PointV2) XXX_DiscardUnknown() {
	xxx_messageInfo_G1PointV2.DiscardUnknown(m)
}

var xxx_messageInfo_G1PointV2 proto.InternalMessageInfo

// G2Point represents a point on the BN254 curve, with field elements encoded as
// arrays
type G2PointV2 struct {
	X []cosmossdk_io_math.Int `protobuf:"bytes,1,rep,name=x,proto3,customtype=cosmossdk.io/math.Int" json:"x"`
	Y []cosmossdk_io_math.Int `protobuf:"bytes,2,rep,name=y,proto3,customtype=cosmossdk.io/math.Int" json:"y"`
}

func (m *G2PointV2) Reset()         { *m = G2PointV2{} }
func (m *G2PointV2) String() string { return proto.CompactTextString(m) }
func (*G2PointV2) ProtoMessage()    {}
func (*G2PointV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{17}
}
func (m *G2PointV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *G2PointV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_G2PointV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *G2PointV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_G2PointV2.Merge(m, src)
}
func (m *G2PointV2) XXX_Size() int {
	return m.Size()
}
func (m *G2PointV2) XXX_DiscardUnknown() {
	xxx_messageInfo_G2PointV2.DiscardUnknown(m)
}

var xxx_messageInfo_G2PointV2 proto.InternalMessageInfo

// SignatureWithSaltAndExpiry holds the operator's signature details
type SignatureWithSaltAndExpiry struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Salt      []byte `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	Expiry    uint64 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (m *SignatureWithSaltAndExpiry) Reset()         { *m = SignatureWithSaltAndExpiry{} }
func (m *SignatureWithSaltAndExpiry) String() string { return proto.CompactTextString(m) }
func (*SignatureWithSaltAndExpiry) ProtoMessage()    {}
func (*SignatureWithSaltAndExpiry) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{18}
}
func (m *SignatureWithSaltAndExpiry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureWithSaltAndExpiry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureWithSaltAndExpiry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignatureWithSaltAndExpiry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureWithSaltAndExpiry.Merge(m, src)
}
func (m *SignatureWithSaltAndExpiry) XXX_Size() int {
	return m.Size()
}
func (m *SignatureWithSaltAndExpiry) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureWithSaltAndExpiry.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureWithSaltAndExpiry proto.InternalMessageInfo

func (m *SignatureWithSaltAndExpiry) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignatureWithSaltAndExpiry) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *SignatureWithSaltAndExpiry) GetExpiry() uint64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

// GroupSyncList is a list of quorum sync xmsg index
type GroupSyncList struct {
	XmsgIndex []string `protobuf:"bytes,1,rep,name=xmsg_index,json=xmsgIndex,proto3" json:"xmsg_index,omitempty"`
}

func (m *GroupSyncList) Reset()         { *m = GroupSyncList{} }
func (m *GroupSyncList) String() string { return proto.CompactTextString(m) }
func (*GroupSyncList) ProtoMessage()    {}
func (*GroupSyncList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{19}
}
func (m *GroupSyncList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupSyncList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupSyncList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupSyncList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupSyncList.Merge(m, src)
}
func (m *GroupSyncList) XXX_Size() int {
	return m.Size()
}
func (m *GroupSyncList) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupSyncList.DiscardUnknown(m)
}

var xxx_messageInfo_GroupSyncList proto.InternalMessageInfo

func (m *GroupSyncList) GetXmsgIndex() []string {
	if m != nil {
		return m.XmsgIndex
	}
	return nil
}

// RegistryRouterSet is a set of registry router address and stake registry router address
type RegistryRouterSet struct {
	RegistryRouterAddress      string `protobuf:"bytes,1,opt,name=registry_router_address,json=registryRouterAddress,proto3" json:"registry_router_address,omitempty"`
	StakeRegistryRouterAddress string `protobuf:"bytes,2,opt,name=stake_registry_router_address,json=stakeRegistryRouterAddress,proto3" json:"stake_registry_router_address,omitempty"`
}

func (m *RegistryRouterSet) Reset()         { *m = RegistryRouterSet{} }
func (m *RegistryRouterSet) String() string { return proto.CompactTextString(m) }
func (*RegistryRouterSet) ProtoMessage()    {}
func (*RegistryRouterSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ad6432d289488c0, []int{20}
}
func (m *RegistryRouterSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryRouterSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistryRouterSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistryRouterSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryRouterSet.Merge(m, src)
}
func (m *RegistryRouterSet) XXX_Size() int {
	return m.Size()
}
func (m *RegistryRouterSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryRouterSet.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryRouterSet proto.InternalMessageInfo

func (m *RegistryRouterSet) GetRegistryRouterAddress() string {
	if m != nil {
		return m.RegistryRouterAddress
	}
	return ""
}

func (m *RegistryRouterSet) GetStakeRegistryRouterAddress() string {
	if m != nil {
		return m.StakeRegistryRouterAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*RegistryRouterList)(nil), "restaking.RegistryRouterList")
	proto.RegisterType((*DVSInfoList)(nil), "restaking.DVSInfoList")
	proto.RegisterType((*DVSInfo)(nil), "restaking.DVSInfo")
	proto.RegisterType((*GroupList)(nil), "restaking.GroupList")
	proto.RegisterType((*Group)(nil), "restaking.Group")
	proto.RegisterType((*OperatorSetParam)(nil), "restaking.OperatorSetParam")
	proto.RegisterType((*PoolParams)(nil), "restaking.PoolParams")
	proto.RegisterType((*GroupEjectionParam)(nil), "restaking.GroupEjectionParam")
	proto.RegisterType((*GroupOperatorRegistrationList)(nil), "restaking.GroupOperatorRegistrationList")
	proto.RegisterType((*GroupOperatorRegistration)(nil), "restaking.GroupOperatorRegistration")
	proto.RegisterType((*PubkeyRegistrationParams)(nil), "restaking.PubkeyRegistrationParams")
	proto.RegisterType((*G1Point)(nil), "restaking.G1Point")
	proto.RegisterType((*G2Point)(nil), "restaking.G2Point")
	proto.RegisterType((*GroupOperatorRegistrationListV2)(nil), "restaking.GroupOperatorRegistrationListV2")
	proto.RegisterType((*GroupOperatorRegistrationV2)(nil), "restaking.GroupOperatorRegistrationV2")
	proto.RegisterType((*PubkeyRegistrationParamsV2)(nil), "restaking.PubkeyRegistrationParamsV2")
	proto.RegisterType((*G1PointV2)(nil), "restaking.G1PointV2")
	proto.RegisterType((*G2PointV2)(nil), "restaking.G2PointV2")
	proto.RegisterType((*SignatureWithSaltAndExpiry)(nil), "restaking.SignatureWithSaltAndExpiry")
	proto.RegisterType((*GroupSyncList)(nil), "restaking.GroupSyncList")
	proto.RegisterType((*RegistryRouterSet)(nil), "restaking.RegistryRouterSet")
}

func init() { proto.RegisterFile("restaking/group.proto", fileDescriptor_2ad6432d289488c0) }

var fileDescriptor_2ad6432d289488c0 = []byte{
	// 1204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x51, 0x6f, 0x1b, 0x45,
	0x10, 0xce, 0xc5, 0x6e, 0x12, 0x4f, 0xec, 0xd4, 0x5d, 0x25, 0xd4, 0x49, 0x89, 0x13, 0xae, 0x2d,
	0x04, 0x8a, 0xec, 0xe6, 0x10, 0x7d, 0x42, 0x88, 0x14, 0xaa, 0x92, 0xaa, 0xb4, 0xd1, 0x19, 0xa5,
	0x12, 0x3c, 0x1c, 0xe7, 0xbb, 0x8d, 0xbd, 0xf8, 0xee, 0xf6, 0x74, 0xbb, 0xd7, 0xda, 0x12, 0x2f,
	0x20, 0xf1, 0x8a, 0xf8, 0x0f, 0xfc, 0x07, 0x7e, 0x43, 0x1f, 0xfb, 0x88, 0x90, 0x28, 0xa8, 0xf9,
	0x23, 0x68, 0xe7, 0xf6, 0xce, 0x67, 0xa7, 0x69, 0xcb, 0x13, 0x6f, 0xb7, 0xdf, 0x7e, 0x33, 0xb3,
	0x33, 0xfb, 0xcd, 0xdc, 0xc2, 0x46, 0x42, 0x85, 0x74, 0x47, 0x2c, 0x1a, 0x74, 0x07, 0x09, 0x4f,
	0xe3, 0x4e, 0x9c, 0x70, 0xc9, 0x49, 0xad, 0x80, 0xb7, 0xd6, 0x07, 0x7c, 0xc0, 0x11, 0xed, 0xaa,
	0xaf, 0x8c, 0xb0, 0x75, 0x6d, 0x6a, 0x47, 0x63, 0xee, 0x0d, 0x1d, 0x9e, 0xca, 0x3e, 0x4f, 0x23,
	0xdf, 0x11, 0xd2, 0x95, 0x34, 0x63, 0x99, 0x16, 0x10, 0x9b, 0x0e, 0x98, 0x90, 0xc9, 0xc4, 0xe6,
	0xa9, 0xa4, 0xc9, 0x7d, 0x26, 0x24, 0x79, 0x1b, 0x6a, 0xae, 0xef, 0x27, 0x54, 0x08, 0x2a, 0x5a,
	0xc6, 0x6e, 0x65, 0xaf, 0x66, 0x4f, 0x01, 0xf3, 0x53, 0x58, 0xfd, 0xe2, 0xb8, 0x77, 0x18, 0x9d,
	0x70, 0x24, 0x77, 0xa1, 0xe6, 0x3f, 0x16, 0x0e, 0x8b, 0x4e, 0x78, 0x46, 0x5e, 0xb5, 0x48, 0xa7,
	0x08, 0xde, 0xd1, 0x54, 0x7b, 0xc5, 0x7f, 0x2c, 0xd4, 0x87, 0x30, 0xff, 0x5a, 0x84, 0x65, 0x8d,
	0x92, 0x4d, 0x58, 0xf1, 0x86, 0x2e, 0x8b, 0x1c, 0xe6, 0xb7, 0x8c, 0x5d, 0x63, 0xaf, 0x6a, 0x2f,
	0xe3, 0xfa, 0xd0, 0x27, 0xef, 0xc1, 0x45, 0x41, 0x93, 0xc7, 0xcc, 0xa3, 0x4e, 0xe8, 0x46, 0xee,
	0x80, 0x26, 0xad, 0xc5, 0x5d, 0x63, 0xaf, 0x66, 0xaf, 0x69, 0xf8, 0xab, 0x0c, 0x25, 0xef, 0x43,
	0x93, 0x7e, 0x4f, 0x3d, 0xc9, 0x78, 0x54, 0x30, 0x2b, 0xc8, 0xbc, 0x98, 0xe3, 0x39, 0xf5, 0x06,
	0x5c, 0xf2, 0x68, 0x24, 0x13, 0x37, 0x70, 0x84, 0x37, 0xa4, 0x7e, 0x1a, 0xd0, 0xa4, 0x55, 0x45,
	0x6e, 0x53, 0x6f, 0xf4, 0x72, 0x9c, 0x5c, 0x85, 0x86, 0x4a, 0x62, 0x1a, 0xfe, 0x02, 0x12, 0xeb,
	0x08, 0xe6, 0x1e, 0xf7, 0xa0, 0xd9, 0x0f, 0x84, 0xe3, 0xc6, 0x23, 0x27, 0xd1, 0x85, 0x6c, 0x2d,
	0x65, 0xc7, 0xec, 0x07, 0xe2, 0x20, 0x1e, 0xe5, 0xe5, 0x25, 0xd7, 0x61, 0x8d, 0x45, 0x3e, 0x1d,
	0x4f, 0x79, 0xcb, 0xc8, 0x6b, 0x20, 0x5a, 0xd0, 0x3e, 0x83, 0xb5, 0xd9, 0x9b, 0x6a, 0xad, 0xec,
	0x1a, 0x7b, 0x6b, 0xd6, 0x66, 0xa9, 0xa6, 0x0f, 0x35, 0xa1, 0x27, 0x5d, 0x99, 0x0a, 0xbb, 0xc1,
	0x4b, 0x6b, 0x6a, 0x7e, 0x0c, 0xb5, 0xbb, 0x4a, 0x29, 0x78, 0x3b, 0x7b, 0xb0, 0x84, 0xb2, 0xc9,
	0xaf, 0xa6, 0x59, 0x72, 0x83, 0x2c, 0x5b, 0xef, 0x9b, 0xbf, 0x2d, 0xc2, 0x05, 0x44, 0xc8, 0x3b,
	0x50, 0x47, 0xcc, 0x89, 0xd2, 0xb0, 0x4f, 0x13, 0x7d, 0x31, 0xab, 0x88, 0x3d, 0x40, 0x88, 0x1c,
	0x02, 0xe1, 0x31, 0x4d, 0x5c, 0xc9, 0x13, 0x47, 0x50, 0xe9, 0xc4, 0x6e, 0xe2, 0x86, 0x78, 0x3f,
	0xab, 0xd6, 0x95, 0xf2, 0x49, 0x35, 0xa9, 0x47, 0xe5, 0x91, 0xa2, 0xd8, 0x4d, 0x3e, 0x87, 0xa8,
	0x32, 0x87, 0x2c, 0x62, 0x61, 0x1a, 0x3a, 0x58, 0x59, 0xbc, 0xbb, 0xaa, 0x5d, 0xd7, 0x60, 0x4f,
	0x61, 0xe4, 0x16, 0xac, 0xc6, 0x9c, 0x07, 0x59, 0x1c, 0xd1, 0xaa, 0x62, 0x2e, 0x1b, 0xa5, 0x40,
	0x47, 0x9c, 0x07, 0xe8, 0x4f, 0xd8, 0x10, 0x17, 0xdf, 0xe4, 0x21, 0xac, 0x67, 0xa9, 0x14, 0x0a,
	0xc9, 0x4e, 0x7a, 0x01, 0x4f, 0xba, 0x3d, 0x5f, 0x8c, 0x3b, 0x9a, 0x95, 0x9d, 0x95, 0x0c, 0xce,
	0x60, 0xe6, 0xef, 0x06, 0x34, 0xe7, 0x93, 0x22, 0x1f, 0x02, 0x09, 0xdd, 0xb1, 0x53, 0x54, 0xc4,
	0xe3, 0x69, 0x24, 0xb1, 0x6c, 0x0d, 0xbb, 0x19, 0xba, 0xe3, 0xdc, 0xe0, 0x73, 0x85, 0x93, 0x4f,
	0xe0, 0xca, 0x88, 0x79, 0x23, 0xa7, 0xcf, 0x62, 0xe1, 0xf0, 0x93, 0xa9, 0x59, 0x96, 0xfe, 0x22,
	0x9a, 0x5d, 0x56, 0x94, 0xdb, 0x2c, 0x16, 0x0f, 0x4f, 0x8a, 0x70, 0xba, 0x12, 0xad, 0x19, 0x6b,
	0xc9, 0xa5, 0x52, 0x73, 0x51, 0xb9, 0x86, 0xbd, 0x3e, 0x35, 0xfd, 0x5a, 0x6d, 0xa2, 0x9d, 0xf9,
	0x2d, 0xc0, 0xb4, 0x46, 0xaf, 0xea, 0x3b, 0x02, 0x55, 0x55, 0x40, 0xdd, 0x6c, 0xf8, 0x4d, 0xda,
	0x00, 0x61, 0x1a, 0x48, 0x16, 0x07, 0x4c, 0x37, 0x57, 0xd5, 0x2e, 0x21, 0xe6, 0x18, 0xc8, 0xd9,
	0xfa, 0x91, 0x0f, 0xe0, 0x52, 0xe2, 0x4a, 0xea, 0x04, 0x2c, 0x64, 0xd2, 0x79, 0xc2, 0x22, 0x9f,
	0x3f, 0xd1, 0x55, 0xb9, 0xa8, 0x36, 0xee, 0x2b, 0xfc, 0x11, 0xc2, 0xe4, 0x16, 0x5c, 0xc6, 0x2b,
	0x72, 0xfb, 0x01, 0xcd, 0xb2, 0x71, 0x62, 0x9a, 0xa8, 0x9e, 0xd4, 0x05, 0xd9, 0x28, 0xb6, 0x31,
	0x9f, 0xa3, 0x6c, 0xd3, 0xfc, 0xd1, 0x80, 0x6d, 0x0c, 0x9d, 0x57, 0x49, 0x37, 0x92, 0xab, 0x8e,
	0x81, 0x1d, 0xf0, 0x1d, 0x6c, 0x16, 0x15, 0xce, 0x5a, 0x8f, 0x26, 0xd4, 0x9f, 0x99, 0x57, 0xd7,
	0xe6, 0x75, 0xf0, 0x32, 0x67, 0xf6, 0x65, 0x3e, 0x83, 0x2a, 0x2f, 0xd9, 0x40, 0xfb, 0xdb, 0x80,
	0xcd, 0x73, 0xcd, 0xc8, 0x16, 0xac, 0xe4, 0x86, 0x98, 0x7c, 0xcd, 0x2e, 0xd6, 0x64, 0x07, 0x56,
	0x8b, 0xb3, 0x31, 0x1f, 0x33, 0xad, 0xdb, 0x90, 0x43, 0x87, 0xbe, 0x6a, 0x8e, 0x72, 0x2b, 0x0a,
	0xac, 0x7d, 0xdd, 0xae, 0x97, 0x7a, 0x51, 0x90, 0xb7, 0x60, 0x49, 0x70, 0x6f, 0x44, 0xa5, 0x1e,
	0x65, 0x7a, 0x45, 0xbe, 0x84, 0x46, 0x9c, 0xf6, 0x47, 0x74, 0x92, 0xb7, 0x4d, 0xa6, 0xfa, 0xab,
	0xe5, 0xb6, 0xc1, 0xfd, 0xf2, 0x79, 0x75, 0x13, 0xd5, 0x33, 0xcb, 0x6c, 0x65, 0xfe, 0x00, 0xad,
	0xf3, 0x98, 0x6a, 0xfe, 0xeb, 0x28, 0x83, 0x7d, 0x4c, 0x70, 0x76, 0xfe, 0xdf, 0xdd, 0x3f, 0xe2,
	0x2c, 0x92, 0xf6, 0x4a, 0x46, 0xba, 0xbb, 0x5f, 0x36, 0xb0, 0xf4, 0xc8, 0x98, 0x31, 0xb0, 0x66,
	0x0d, 0x2c, 0xf3, 0x3a, 0x2c, 0x6b, 0x2f, 0xa4, 0x0e, 0xc6, 0x58, 0x0b, 0xd6, 0x18, 0xab, 0xd5,
	0x04, 0x3d, 0x54, 0x6d, 0x63, 0x82, 0x34, 0x6b, 0x86, 0x56, 0x99, 0xa1, 0x55, 0x32, 0xda, 0xcf,
	0x06, 0xec, 0xbc, 0x52, 0x31, 0xc7, 0x16, 0xe9, 0xbf, 0x5e, 0x33, 0xef, 0xbe, 0x89, 0x66, 0x8e,
	0xad, 0xf3, 0x55, 0x73, 0x6a, 0xc0, 0x95, 0x57, 0x18, 0xfe, 0x8f, 0xba, 0xb9, 0xf7, 0x72, 0xdd,
	0x5c, 0x7f, 0x03, 0xdd, 0x1c, 0x5b, 0x73, 0xca, 0xf9, 0xc9, 0x80, 0xad, 0xf3, 0xc9, 0x64, 0xbf,
	0x2c, 0x9e, 0x0a, 0x86, 0x59, 0x3f, 0x2b, 0x9e, 0x63, 0xab, 0x24, 0x9f, 0xfd, 0xb2, 0x7c, 0xaa,
	0x67, 0x4d, 0xac, 0x79, 0x13, 0xcb, 0xa4, 0x50, 0x2b, 0x3c, 0x91, 0x1b, 0xb9, 0x84, 0x6a, 0xb7,
	0xb7, 0x9f, 0x3e, 0xdf, 0x59, 0xf8, 0xf3, 0xf9, 0xce, 0x86, 0xc7, 0x45, 0xc8, 0x85, 0xf0, 0x47,
	0x1d, 0xc6, 0xbb, 0xa1, 0x2b, 0x87, 0x9d, 0xc3, 0x48, 0x2a, 0xe9, 0xdc, 0xc8, 0x15, 0xf6, 0x7a,
	0xf2, 0x04, 0xc3, 0x58, 0x73, 0x61, 0x2a, 0xff, 0x25, 0x4c, 0xe5, 0x8d, 0xc2, 0x9c, 0xc0, 0x56,
	0x8f, 0x0d, 0x22, 0x57, 0xa6, 0x09, 0x7d, 0xc4, 0xe4, 0xb0, 0xe7, 0x06, 0xf2, 0x20, 0xf2, 0xef,
	0x8c, 0x63, 0x96, 0x4c, 0xd4, 0xdb, 0x4d, 0xe4, 0xbb, 0x98, 0x66, 0xdd, 0x9e, 0x02, 0x6a, 0xb8,
	0x0b, 0x37, 0x90, 0x5a, 0x31, 0xf8, 0xad, 0x64, 0x40, 0xd1, 0x56, 0x0f, 0x76, 0xbd, 0x32, 0x3b,
	0xd0, 0x40, 0x7d, 0xf6, 0x26, 0x91, 0x87, 0x93, 0x74, 0x1b, 0x60, 0x1c, 0x8a, 0x81, 0x83, 0x0f,
	0x96, 0xfc, 0x5d, 0xa8, 0x90, 0x43, 0x05, 0x98, 0xbf, 0x18, 0x70, 0x69, 0xf6, 0x31, 0xd9, 0xa3,
	0x52, 0x0d, 0xf6, 0xfc, 0xc1, 0xe3, 0x24, 0x88, 0x3a, 0xfa, 0x29, 0xa9, 0x55, 0xbd, 0x91, 0xcc,
	0xd8, 0x1c, 0x64, 0x9b, 0xe4, 0x00, 0xb6, 0xb3, 0xdf, 0xc0, 0x79, 0xd6, 0xd9, 0xff, 0x69, 0x0b,
	0x49, 0xf6, 0xcb, 0x5c, 0xdc, 0xbe, 0xf7, 0xf4, 0x45, 0xdb, 0x78, 0xf6, 0xa2, 0x6d, 0xfc, 0xf3,
	0xa2, 0x6d, 0xfc, 0x7a, 0xda, 0x5e, 0x78, 0x76, 0xda, 0x5e, 0xf8, 0xe3, 0xb4, 0xbd, 0xf0, 0xcd,
	0xcd, 0x01, 0x93, 0xc3, 0xb4, 0xdf, 0xf1, 0x78, 0xd8, 0xbd, 0x39, 0x3e, 0xa2, 0x41, 0xf0, 0x80,
	0xca, 0x27, 0x3c, 0x19, 0x75, 0x5d, 0xe5, 0xa9, 0x3b, 0xee, 0x4e, 0x5f, 0xcf, 0x72, 0x12, 0x53,
	0xd1, 0x5f, 0xc2, 0xf7, 0xf2, 0x47, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x49, 0x52, 0x59, 0x7a,
	0x8f, 0x0b, 0x00, 0x00,
}

func (m *RegistryRouterList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryRouterList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryRouterList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintGroup(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DVSInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DVSInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DVSInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DvsInfos) > 0 {
		for iNdEx := len(m.DvsInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DvsInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DVSInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DVSInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DVSInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutboundState != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.OutboundState))
		i--
		dAtA[i] = 0x40
	}
	if len(m.IndexRegistry) > 0 {
		i -= len(m.IndexRegistry)
		copy(dAtA[i:], m.IndexRegistry)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.IndexRegistry)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BlsApkRegistry) > 0 {
		i -= len(m.BlsApkRegistry)
		copy(dAtA[i:], m.BlsApkRegistry)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.BlsApkRegistry)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StakeManager) > 0 {
		i -= len(m.StakeManager)
		copy(dAtA[i:], m.StakeManager)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.StakeManager)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CentralScheduler) > 0 {
		i -= len(m.CentralScheduler)
		copy(dAtA[i:], m.CentralScheduler)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.CentralScheduler)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EjectionManager) > 0 {
		i -= len(m.EjectionManager)
		copy(dAtA[i:], m.EjectionManager)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.EjectionManager)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServiceManager) > 0 {
		i -= len(m.ServiceManager)
		copy(dAtA[i:], m.ServiceManager)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.ServiceManager)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupEjectionParam != nil {
		{
			size, err := m.GroupEjectionParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PoolParams) > 0 {
		for iNdEx := len(m.PoolParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.MinimumStake != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.MinimumStake))
		i--
		dAtA[i] = 0x18
	}
	if m.OperatorSetParam != nil {
		{
			size, err := m.OperatorSetParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.GroupNumber != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OperatorSetParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorSetParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorSetParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KickBipsOfTotalStake != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.KickBipsOfTotalStake))
		i--
		dAtA[i] = 0x18
	}
	if m.KickBipsOfOperatorStake != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.KickBipsOfOperatorStake))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxOperatorCount != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.MaxOperatorCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Multiplier != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.Multiplier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupEjectionParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupEjectionParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupEjectionParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EjectableStakePercent != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.EjectableStakePercent))
		i--
		dAtA[i] = 0x10
	}
	if m.RateLimitWindow != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.RateLimitWindow))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupOperatorRegistrationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupOperatorRegistrationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupOperatorRegistrationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorRegisteredInfos) > 0 {
		for iNdEx := len(m.OperatorRegisteredInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorRegisteredInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GroupOperatorRegistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupOperatorRegistration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupOperatorRegistration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PubkeyParams != nil {
		{
			size, err := m.PubkeyParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Socket) > 0 {
		i -= len(m.Socket)
		copy(dAtA[i:], m.Socket)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Socket)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupNumbers) > 0 {
		i -= len(m.GroupNumbers)
		copy(dAtA[i:], m.GroupNumbers)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.GroupNumbers)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperatorId) > 0 {
		i -= len(m.OperatorId)
		copy(dAtA[i:], m.OperatorId)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.OperatorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PubkeyRegistrationParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubkeyRegistrationParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubkeyRegistrationParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PubkeyG2 != nil {
		{
			size, err := m.PubkeyG2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PubkeyG1 != nil {
		{
			size, err := m.PubkeyG1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *G1Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *G1Point) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *G1Point) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x10
	}
	if m.X != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *G2Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *G2Point) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *G2Point) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Y) > 0 {
		dAtA7 := make([]byte, len(m.Y)*10)
		var j6 int
		for _, num := range m.Y {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintGroup(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x12
	}
	if len(m.X) > 0 {
		dAtA9 := make([]byte, len(m.X)*10)
		var j8 int
		for _, num := range m.X {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintGroup(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupOperatorRegistrationListV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupOperatorRegistrationListV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupOperatorRegistrationListV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorRegisteredInfos) > 0 {
		for iNdEx := len(m.OperatorRegisteredInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorRegisteredInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GroupOperatorRegistrationV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupOperatorRegistrationV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupOperatorRegistrationV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PubkeyParams != nil {
		{
			size, err := m.PubkeyParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Socket) > 0 {
		i -= len(m.Socket)
		copy(dAtA[i:], m.Socket)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Socket)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupNumbers) > 0 {
		i -= len(m.GroupNumbers)
		copy(dAtA[i:], m.GroupNumbers)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.GroupNumbers)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperatorId) > 0 {
		i -= len(m.OperatorId)
		copy(dAtA[i:], m.OperatorId)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.OperatorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PubkeyRegistrationParamsV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubkeyRegistrationParamsV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubkeyRegistrationParamsV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PubkeyG2 != nil {
		{
			size, err := m.PubkeyG2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PubkeyG1 != nil {
		{
			size, err := m.PubkeyG1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *G1PointV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *G1PointV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *G1PointV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Y.Size()
		i -= size
		if _, err := m.Y.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGroup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.X.Size()
		i -= size
		if _, err := m.X.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGroup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *G2PointV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *G2PointV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *G2PointV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Y) > 0 {
		for iNdEx := len(m.Y) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Y[iNdEx].Size()
				i -= size
				if _, err := m.Y[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintGroup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.X) > 0 {
		for iNdEx := len(m.X) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.X[iNdEx].Size()
				i -= size
				if _, err := m.X[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintGroup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SignatureWithSaltAndExpiry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureWithSaltAndExpiry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureWithSaltAndExpiry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiry != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.Expiry))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupSyncList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupSyncList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupSyncList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.XmsgIndex) > 0 {
		for iNdEx := len(m.XmsgIndex) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.XmsgIndex[iNdEx])
			copy(dAtA[i:], m.XmsgIndex[iNdEx])
			i = encodeVarintGroup(dAtA, i, uint64(len(m.XmsgIndex[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegistryRouterSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryRouterSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryRouterSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakeRegistryRouterAddress) > 0 {
		i -= len(m.StakeRegistryRouterAddress)
		copy(dAtA[i:], m.StakeRegistryRouterAddress)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.StakeRegistryRouterAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RegistryRouterAddress) > 0 {
		i -= len(m.RegistryRouterAddress)
		copy(dAtA[i:], m.RegistryRouterAddress)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.RegistryRouterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGroup(dAtA []byte, offset int, v uint64) int {
	offset -= sovGroup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegistryRouterList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	return n
}

func (m *DVSInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DvsInfos) > 0 {
		for _, e := range m.DvsInfos {
			l = e.Size()
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	return n
}

func (m *DVSInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovGroup(uint64(m.ChainId))
	}
	l = len(m.ServiceManager)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.EjectionManager)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.CentralScheduler)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.StakeManager)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.BlsApkRegistry)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.IndexRegistry)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.OutboundState != 0 {
		n += 1 + sovGroup(uint64(m.OutboundState))
	}
	return n
}

func (m *GroupList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	return n
}

func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupNumber != 0 {
		n += 1 + sovGroup(uint64(m.GroupNumber))
	}
	if m.OperatorSetParam != nil {
		l = m.OperatorSetParam.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.MinimumStake != 0 {
		n += 1 + sovGroup(uint64(m.MinimumStake))
	}
	if len(m.PoolParams) > 0 {
		for _, e := range m.PoolParams {
			l = e.Size()
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	if m.GroupEjectionParam != nil {
		l = m.GroupEjectionParam.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	return n
}

func (m *OperatorSetParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxOperatorCount != 0 {
		n += 1 + sovGroup(uint64(m.MaxOperatorCount))
	}
	if m.KickBipsOfOperatorStake != 0 {
		n += 1 + sovGroup(uint64(m.KickBipsOfOperatorStake))
	}
	if m.KickBipsOfTotalStake != 0 {
		n += 1 + sovGroup(uint64(m.KickBipsOfTotalStake))
	}
	return n
}

func (m *PoolParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovGroup(uint64(m.ChainId))
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.Multiplier != 0 {
		n += 1 + sovGroup(uint64(m.Multiplier))
	}
	return n
}

func (m *GroupEjectionParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimitWindow != 0 {
		n += 1 + sovGroup(uint64(m.RateLimitWindow))
	}
	if m.EjectableStakePercent != 0 {
		n += 1 + sovGroup(uint64(m.EjectableStakePercent))
	}
	return n
}

func (m *GroupOperatorRegistrationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorRegisteredInfos) > 0 {
		for _, e := range m.OperatorRegisteredInfos {
			l = e.Size()
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	return n
}

func (m *GroupOperatorRegistration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.OperatorId)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.GroupNumbers)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.Socket)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.PubkeyParams != nil {
		l = m.PubkeyParams.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	return n
}

func (m *PubkeyRegistrationParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PubkeyG1 != nil {
		l = m.PubkeyG1.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.PubkeyG2 != nil {
		l = m.PubkeyG2.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	return n
}

func (m *G1Point) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovGroup(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovGroup(uint64(m.Y))
	}
	return n
}

func (m *G2Point) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.X) > 0 {
		l = 0
		for _, e := range m.X {
			l += sovGroup(uint64(e))
		}
		n += 1 + sovGroup(uint64(l)) + l
	}
	if len(m.Y) > 0 {
		l = 0
		for _, e := range m.Y {
			l += sovGroup(uint64(e))
		}
		n += 1 + sovGroup(uint64(l)) + l
	}
	return n
}

func (m *GroupOperatorRegistrationListV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorRegisteredInfos) > 0 {
		for _, e := range m.OperatorRegisteredInfos {
			l = e.Size()
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	return n
}

func (m *GroupOperatorRegistrationV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.OperatorId)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.GroupNumbers)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.Socket)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.PubkeyParams != nil {
		l = m.PubkeyParams.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	return n
}

func (m *PubkeyRegistrationParamsV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PubkeyG1 != nil {
		l = m.PubkeyG1.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.PubkeyG2 != nil {
		l = m.PubkeyG2.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	return n
}

func (m *G1PointV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.X.Size()
	n += 1 + l + sovGroup(uint64(l))
	l = m.Y.Size()
	n += 1 + l + sovGroup(uint64(l))
	return n
}

func (m *G2PointV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.X) > 0 {
		for _, e := range m.X {
			l = e.Size()
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	if len(m.Y) > 0 {
		for _, e := range m.Y {
			l = e.Size()
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	return n
}

func (m *SignatureWithSaltAndExpiry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovGroup(uint64(m.Expiry))
	}
	return n
}

func (m *GroupSyncList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.XmsgIndex) > 0 {
		for _, s := range m.XmsgIndex {
			l = len(s)
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	return n
}

func (m *RegistryRouterSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegistryRouterAddress)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.StakeRegistryRouterAddress)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	return n
}

func sovGroup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGroup(x uint64) (n int) {
	return sovGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegistryRouterList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryRouterList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryRouterList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DVSInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DVSInfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DVSInfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DvsInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DvsInfos = append(m.DvsInfos, &DVSInfo{})
			if err := m.DvsInfos[len(m.DvsInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DVSInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DVSInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DVSInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceManager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceManager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EjectionManager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EjectionManager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CentralScheduler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CentralScheduler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeManager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeManager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlsApkRegistry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlsApkRegistry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexRegistry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexRegistry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundState", wireType)
			}
			m.OutboundState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundState |= OutboundStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNumber", wireType)
			}
			m.GroupNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorSetParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperatorSetParam == nil {
				m.OperatorSetParam = &OperatorSetParam{}
			}
			if err := m.OperatorSetParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumStake", wireType)
			}
			m.MinimumStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolParams = append(m.PoolParams, &PoolParams{})
			if err := m.PoolParams[len(m.PoolParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupEjectionParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupEjectionParam == nil {
				m.GroupEjectionParam = &GroupEjectionParam{}
			}
			if err := m.GroupEjectionParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorSetParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorSetParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorSetParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOperatorCount", wireType)
			}
			m.MaxOperatorCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxOperatorCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickBipsOfOperatorStake", wireType)
			}
			m.KickBipsOfOperatorStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickBipsOfOperatorStake |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickBipsOfTotalStake", wireType)
			}
			m.KickBipsOfTotalStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickBipsOfTotalStake |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			m.Multiplier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Multiplier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupEjectionParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupEjectionParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupEjectionParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimitWindow", wireType)
			}
			m.RateLimitWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RateLimitWindow |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EjectableStakePercent", wireType)
			}
			m.EjectableStakePercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EjectableStakePercent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupOperatorRegistrationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupOperatorRegistrationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupOperatorRegistrationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorRegisteredInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorRegisteredInfos = append(m.OperatorRegisteredInfos, &GroupOperatorRegistration{})
			if err := m.OperatorRegisteredInfos[len(m.OperatorRegisteredInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupOperatorRegistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupOperatorRegistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupOperatorRegistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorId = append(m.OperatorId[:0], dAtA[iNdEx:postIndex]...)
			if m.OperatorId == nil {
				m.OperatorId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNumbers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupNumbers = append(m.GroupNumbers[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupNumbers == nil {
				m.GroupNumbers = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Socket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Socket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubkeyParams == nil {
				m.PubkeyParams = &PubkeyRegistrationParams{}
			}
			if err := m.PubkeyParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubkeyRegistrationParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubkeyRegistrationParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubkeyRegistrationParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyG1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubkeyG1 == nil {
				m.PubkeyG1 = &G1Point{}
			}
			if err := m.PubkeyG1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyG2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubkeyG2 == nil {
				m.PubkeyG2 = &G2Point{}
			}
			if err := m.PubkeyG2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *G1Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: G1Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: G1Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *G2Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: G2Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: G2Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.X = append(m.X, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroup
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGroup
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.X) == 0 {
					m.X = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.X = append(m.X, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Y = append(m.Y, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroup
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGroup
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Y) == 0 {
					m.Y = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Y = append(m.Y, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupOperatorRegistrationListV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupOperatorRegistrationListV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupOperatorRegistrationListV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorRegisteredInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorRegisteredInfos = append(m.OperatorRegisteredInfos, &GroupOperatorRegistrationV2{})
			if err := m.OperatorRegisteredInfos[len(m.OperatorRegisteredInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupOperatorRegistrationV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupOperatorRegistrationV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupOperatorRegistrationV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorId = append(m.OperatorId[:0], dAtA[iNdEx:postIndex]...)
			if m.OperatorId == nil {
				m.OperatorId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNumbers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupNumbers = append(m.GroupNumbers[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupNumbers == nil {
				m.GroupNumbers = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Socket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Socket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubkeyParams == nil {
				m.PubkeyParams = &PubkeyRegistrationParamsV2{}
			}
			if err := m.PubkeyParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubkeyRegistrationParamsV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubkeyRegistrationParamsV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubkeyRegistrationParamsV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyG1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubkeyG1 == nil {
				m.PubkeyG1 = &G1PointV2{}
			}
			if err := m.PubkeyG1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyG2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubkeyG2 == nil {
				m.PubkeyG2 = &G2PointV2{}
			}
			if err := m.PubkeyG2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *G1PointV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: G1PointV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: G1PointV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.X.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Y.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *G2PointV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: G2PointV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: G2PointV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.X = append(m.X, v)
			if err := m.X[len(m.X)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.Y = append(m.Y, v)
			if err := m.Y[len(m.Y)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignatureWithSaltAndExpiry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureWithSaltAndExpiry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureWithSaltAndExpiry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = append(m.Salt[:0], dAtA[iNdEx:postIndex]...)
			if m.Salt == nil {
				m.Salt = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupSyncList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupSyncList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupSyncList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XmsgIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XmsgIndex = append(m.XmsgIndex, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryRouterSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryRouterSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryRouterSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRegistryRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeRegistryRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGroup
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGroup
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGroup
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGroup        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroup          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGroup = fmt.Errorf("proto: unexpected end of group")
)
