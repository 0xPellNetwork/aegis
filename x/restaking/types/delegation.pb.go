// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restaking/delegation.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OperatorShares stores the delegation shares owned by a operator
type OperatorShares struct {
	ChainId  uint64                `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Operator string                `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Strategy string                `protobuf:"bytes,3,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Shares   cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=shares,proto3,customtype=cosmossdk.io/math.Int" json:"shares"`
}

func (m *OperatorShares) Reset()         { *m = OperatorShares{} }
func (m *OperatorShares) String() string { return proto.CompactTextString(m) }
func (*OperatorShares) ProtoMessage()    {}
func (*OperatorShares) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c86e24084b659ef, []int{0}
}
func (m *OperatorShares) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorShares) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorShares.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorShares) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorShares.Merge(m, src)
}
func (m *OperatorShares) XXX_Size() int {
	return m.Size()
}
func (m *OperatorShares) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorShares.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorShares proto.InternalMessageInfo

func (m *OperatorShares) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *OperatorShares) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *OperatorShares) GetStrategy() string {
	if m != nil {
		return m.Strategy
	}
	return ""
}

// ChangedOperatorSharesSnapshot is the snapshot of changed operator shares in
// an epoch
type ChangedOperatorSharesSnapshot struct {
	EpochNumber    uint64            `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	OperatorShares []*OperatorShares `protobuf:"bytes,2,rep,name=operator_shares,json=operatorShares,proto3" json:"operator_shares,omitempty"`
}

func (m *ChangedOperatorSharesSnapshot) Reset()         { *m = ChangedOperatorSharesSnapshot{} }
func (m *ChangedOperatorSharesSnapshot) String() string { return proto.CompactTextString(m) }
func (*ChangedOperatorSharesSnapshot) ProtoMessage()    {}
func (*ChangedOperatorSharesSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c86e24084b659ef, []int{1}
}
func (m *ChangedOperatorSharesSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangedOperatorSharesSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangedOperatorSharesSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangedOperatorSharesSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangedOperatorSharesSnapshot.Merge(m, src)
}
func (m *ChangedOperatorSharesSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *ChangedOperatorSharesSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangedOperatorSharesSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_ChangedOperatorSharesSnapshot proto.InternalMessageInfo

func (m *ChangedOperatorSharesSnapshot) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *ChangedOperatorSharesSnapshot) GetOperatorShares() []*OperatorShares {
	if m != nil {
		return m.OperatorShares
	}
	return nil
}

func init() {
	proto.RegisterType((*OperatorShares)(nil), "restaking.OperatorShares")
	proto.RegisterType((*ChangedOperatorSharesSnapshot)(nil), "restaking.ChangedOperatorSharesSnapshot")
}

func init() { proto.RegisterFile("restaking/delegation.proto", fileDescriptor_9c86e24084b659ef) }

var fileDescriptor_9c86e24084b659ef = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x3f, 0x6b, 0x32, 0x31,
	0x1c, 0xc7, 0x2f, 0x2a, 0x3e, 0x1a, 0x1f, 0x2c, 0x1c, 0x2d, 0x9c, 0x82, 0xa7, 0x75, 0x72, 0xba,
	0x48, 0x4b, 0xdf, 0x80, 0x9d, 0xec, 0x60, 0xcb, 0xb9, 0x75, 0x91, 0x78, 0x17, 0x92, 0xa0, 0x97,
	0xdf, 0x91, 0x44, 0xaa, 0x6f, 0xa0, 0x73, 0xe7, 0xbe, 0x22, 0x47, 0xc7, 0xd2, 0x41, 0x8a, 0xbe,
	0x91, 0xe2, 0x79, 0x5a, 0xdc, 0xf2, 0xfd, 0xc3, 0x8f, 0x0f, 0xdf, 0xe0, 0xa6, 0x66, 0xc6, 0xd2,
	0x99, 0x54, 0x9c, 0xc4, 0x6c, 0xce, 0x38, 0xb5, 0x12, 0x54, 0x90, 0x6a, 0xb0, 0xe0, 0x56, 0xcf,
	0x59, 0xf3, 0x9a, 0x03, 0x87, 0xcc, 0x25, 0x87, 0xd7, 0xb1, 0xd0, 0xfd, 0x44, 0xb8, 0xfe, 0x9c,
	0x32, 0x4d, 0x2d, 0xe8, 0xb1, 0xa0, 0x9a, 0x19, 0xb7, 0x81, 0x2b, 0x91, 0xa0, 0x52, 0x4d, 0x64,
	0xec, 0xa1, 0x0e, 0xea, 0x95, 0xc2, 0x7f, 0x99, 0x1e, 0xc6, 0x6e, 0x13, 0x57, 0x20, 0x2f, 0x7b,
	0x85, 0x0e, 0xea, 0x55, 0xc3, 0xb3, 0x3e, 0x64, 0xc6, 0x6a, 0x6a, 0x19, 0x5f, 0x79, 0xc5, 0x63,
	0x76, 0xd2, 0xee, 0x03, 0x2e, 0x9b, 0xec, 0xb8, 0x57, 0x3a, 0x24, 0x83, 0xd6, 0x7a, 0xdb, 0x76,
	0xbe, 0xb7, 0xed, 0x9b, 0x08, 0x4c, 0x02, 0xc6, 0xc4, 0xb3, 0x40, 0x02, 0x49, 0xa8, 0x15, 0xc1,
	0x50, 0xd9, 0x30, 0x2f, 0x77, 0xdf, 0x11, 0x6e, 0x3d, 0x0a, 0xaa, 0x38, 0x8b, 0x2f, 0x19, 0xc7,
	0x8a, 0xa6, 0x46, 0x80, 0x75, 0x6f, 0xf1, 0x7f, 0x96, 0x42, 0x24, 0x26, 0x6a, 0x91, 0x4c, 0x99,
	0xce, 0x79, 0x6b, 0x99, 0x37, 0xca, 0x2c, 0x77, 0x80, 0xaf, 0x4e, 0x8c, 0x93, 0x1c, 0xa2, 0xd0,
	0x29, 0xf6, 0x6a, 0x77, 0x8d, 0xe0, 0x3c, 0x4e, 0x70, 0x79, 0x3e, 0xac, 0xc3, 0x85, 0x1e, 0x3c,
	0xad, 0x77, 0x3e, 0xda, 0xec, 0x7c, 0xf4, 0xb3, 0xf3, 0xd1, 0xc7, 0xde, 0x77, 0x36, 0x7b, 0xdf,
	0xf9, 0xda, 0xfb, 0xce, 0x6b, 0x9f, 0x4b, 0x2b, 0x16, 0xd3, 0x20, 0x82, 0x84, 0xf4, 0x97, 0x2f,
	0x6c, 0x3e, 0x1f, 0x31, 0xfb, 0x06, 0x7a, 0x46, 0x28, 0xe3, 0xd2, 0x90, 0x25, 0xf9, 0xfb, 0x1d,
	0xbb, 0x4a, 0x99, 0x99, 0x96, 0xb3, 0xe1, 0xef, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x5b, 0xac,
	0xa3, 0xe2, 0xb7, 0x01, 0x00, 0x00,
}

func (m *OperatorShares) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorShares) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorShares) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Strategy) > 0 {
		i -= len(m.Strategy)
		copy(dAtA[i:], m.Strategy)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Strategy)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChangedOperatorSharesSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangedOperatorSharesSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangedOperatorSharesSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorShares) > 0 {
		for iNdEx := len(m.OperatorShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.EpochNumber != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDelegation(dAtA []byte, offset int, v uint64) int {
	offset -= sovDelegation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OperatorShares) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovDelegation(uint64(m.ChainId))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	l = len(m.Strategy)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovDelegation(uint64(l))
	return n
}

func (m *ChangedOperatorSharesSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovDelegation(uint64(m.EpochNumber))
	}
	if len(m.OperatorShares) > 0 {
		for _, e := range m.OperatorShares {
			l = e.Size()
			n += 1 + l + sovDelegation(uint64(l))
		}
	}
	return n
}

func sovDelegation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDelegation(x uint64) (n int) {
	return sovDelegation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OperatorShares) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorShares: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorShares: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangedOperatorSharesSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangedOperatorSharesSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangedOperatorSharesSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorShares = append(m.OperatorShares, &OperatorShares{})
			if err := m.OperatorShares[len(m.OperatorShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDelegation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDelegation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDelegation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDelegation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDelegation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDelegation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDelegation = fmt.Errorf("proto: unexpected end of group")
)
