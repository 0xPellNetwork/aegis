// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restaking/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/pell-chain/pellcore/x/xmsg/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// request of query epoch changed operator shares snapshot
type QueryEpochChangedOperatorSharesSnapshotRequest struct {
	EpochNumber uint64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
}

func (m *QueryEpochChangedOperatorSharesSnapshotRequest) Reset() {
	*m = QueryEpochChangedOperatorSharesSnapshotRequest{}
}
func (m *QueryEpochChangedOperatorSharesSnapshotRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryEpochChangedOperatorSharesSnapshotRequest) ProtoMessage() {}
func (*QueryEpochChangedOperatorSharesSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{0}
}
func (m *QueryEpochChangedOperatorSharesSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEpochChangedOperatorSharesSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEpochChangedOperatorSharesSnapshotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEpochChangedOperatorSharesSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEpochChangedOperatorSharesSnapshotRequest.Merge(m, src)
}
func (m *QueryEpochChangedOperatorSharesSnapshotRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEpochChangedOperatorSharesSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEpochChangedOperatorSharesSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEpochChangedOperatorSharesSnapshotRequest proto.InternalMessageInfo

func (m *QueryEpochChangedOperatorSharesSnapshotRequest) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

// response of query epoch changed operator shares snapshot
type QueryGetEpochChangedOperatorSharesSnapshotResponse struct {
	ChangedOperatorSharesSnapshot []OperatorShares `protobuf:"bytes,1,rep,name=changed_operator_shares_snapshot,json=changedOperatorSharesSnapshot,proto3" json:"changed_operator_shares_snapshot"`
}

func (m *QueryGetEpochChangedOperatorSharesSnapshotResponse) Reset() {
	*m = QueryGetEpochChangedOperatorSharesSnapshotResponse{}
}
func (m *QueryGetEpochChangedOperatorSharesSnapshotResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetEpochChangedOperatorSharesSnapshotResponse) ProtoMessage() {}
func (*QueryGetEpochChangedOperatorSharesSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{1}
}
func (m *QueryGetEpochChangedOperatorSharesSnapshotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochChangedOperatorSharesSnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochChangedOperatorSharesSnapshotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochChangedOperatorSharesSnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochChangedOperatorSharesSnapshotResponse.Merge(m, src)
}
func (m *QueryGetEpochChangedOperatorSharesSnapshotResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochChangedOperatorSharesSnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochChangedOperatorSharesSnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochChangedOperatorSharesSnapshotResponse proto.InternalMessageInfo

func (m *QueryGetEpochChangedOperatorSharesSnapshotResponse) GetChangedOperatorSharesSnapshot() []OperatorShares {
	if m != nil {
		return m.ChangedOperatorSharesSnapshot
	}
	return nil
}

// request of query blocks per epoch
type QueryEpochInfoRequest struct {
}

func (m *QueryEpochInfoRequest) Reset()         { *m = QueryEpochInfoRequest{} }
func (m *QueryEpochInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEpochInfoRequest) ProtoMessage()    {}
func (*QueryEpochInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{2}
}
func (m *QueryEpochInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEpochInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEpochInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEpochInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEpochInfoRequest.Merge(m, src)
}
func (m *QueryEpochInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEpochInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEpochInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEpochInfoRequest proto.InternalMessageInfo

// response of query blocks per epoch
type QueryGetEpochInfoResponse struct {
	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (m *QueryGetEpochInfoResponse) Reset()         { *m = QueryGetEpochInfoResponse{} }
func (m *QueryGetEpochInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochInfoResponse) ProtoMessage()    {}
func (*QueryGetEpochInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{3}
}
func (m *QueryGetEpochInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochInfoResponse.Merge(m, src)
}
func (m *QueryGetEpochInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochInfoResponse proto.InternalMessageInfo

func (m *QueryGetEpochInfoResponse) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

// request of query outbound state by chain id
type QueryOutboundStateByChainIDRequest struct {
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryOutboundStateByChainIDRequest) Reset()         { *m = QueryOutboundStateByChainIDRequest{} }
func (m *QueryOutboundStateByChainIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOutboundStateByChainIDRequest) ProtoMessage()    {}
func (*QueryOutboundStateByChainIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{4}
}
func (m *QueryOutboundStateByChainIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutboundStateByChainIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutboundStateByChainIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutboundStateByChainIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutboundStateByChainIDRequest.Merge(m, src)
}
func (m *QueryOutboundStateByChainIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutboundStateByChainIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutboundStateByChainIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutboundStateByChainIDRequest proto.InternalMessageInfo

func (m *QueryOutboundStateByChainIDRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// response of query outbound state by chain id
type QueryGetOutboundStateByChainIDResponse struct {
	OutboundState *EpochOutboundState `protobuf:"bytes,1,opt,name=outbound_state,json=outboundState,proto3" json:"outbound_state,omitempty"`
}

func (m *QueryGetOutboundStateByChainIDResponse) Reset() {
	*m = QueryGetOutboundStateByChainIDResponse{}
}
func (m *QueryGetOutboundStateByChainIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOutboundStateByChainIDResponse) ProtoMessage()    {}
func (*QueryGetOutboundStateByChainIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{5}
}
func (m *QueryGetOutboundStateByChainIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOutboundStateByChainIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOutboundStateByChainIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOutboundStateByChainIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOutboundStateByChainIDResponse.Merge(m, src)
}
func (m *QueryGetOutboundStateByChainIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOutboundStateByChainIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOutboundStateByChainIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOutboundStateByChainIDResponse proto.InternalMessageInfo

func (m *QueryGetOutboundStateByChainIDResponse) GetOutboundState() *EpochOutboundState {
	if m != nil {
		return m.OutboundState
	}
	return nil
}

// request of query dvs supported chain status
type QueryDVSSupportedChainStatusRequest struct {
	RegistryRouterAddress string `protobuf:"bytes,1,opt,name=registry_router_address,json=registryRouterAddress,proto3" json:"registry_router_address,omitempty"`
	ChainId               uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryDVSSupportedChainStatusRequest) Reset()         { *m = QueryDVSSupportedChainStatusRequest{} }
func (m *QueryDVSSupportedChainStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDVSSupportedChainStatusRequest) ProtoMessage()    {}
func (*QueryDVSSupportedChainStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{6}
}
func (m *QueryDVSSupportedChainStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDVSSupportedChainStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDVSSupportedChainStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDVSSupportedChainStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDVSSupportedChainStatusRequest.Merge(m, src)
}
func (m *QueryDVSSupportedChainStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDVSSupportedChainStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDVSSupportedChainStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDVSSupportedChainStatusRequest proto.InternalMessageInfo

func (m *QueryDVSSupportedChainStatusRequest) GetRegistryRouterAddress() string {
	if m != nil {
		return m.RegistryRouterAddress
	}
	return ""
}

func (m *QueryDVSSupportedChainStatusRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// response of query dvs supported chain status
type QueryDVSSupportedChainStatusResponse struct {
	OutboundState OutboundStatus `protobuf:"varint,1,opt,name=outbound_state,json=outboundState,proto3,enum=restaking.OutboundStatus" json:"outbound_state,omitempty"`
}

func (m *QueryDVSSupportedChainStatusResponse) Reset()         { *m = QueryDVSSupportedChainStatusResponse{} }
func (m *QueryDVSSupportedChainStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDVSSupportedChainStatusResponse) ProtoMessage()    {}
func (*QueryDVSSupportedChainStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{7}
}
func (m *QueryDVSSupportedChainStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDVSSupportedChainStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDVSSupportedChainStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDVSSupportedChainStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDVSSupportedChainStatusResponse.Merge(m, src)
}
func (m *QueryDVSSupportedChainStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDVSSupportedChainStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDVSSupportedChainStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDVSSupportedChainStatusResponse proto.InternalMessageInfo

func (m *QueryDVSSupportedChainStatusResponse) GetOutboundState() OutboundStatus {
	if m != nil {
		return m.OutboundState
	}
	return OutboundStatus_OUTBOUND_STATUS_INITIALIZING
}

// request of query dvs group data sync status
type QueryDVSGroupSyncStatusRequest struct {
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *QueryDVSGroupSyncStatusRequest) Reset()         { *m = QueryDVSGroupSyncStatusRequest{} }
func (m *QueryDVSGroupSyncStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDVSGroupSyncStatusRequest) ProtoMessage()    {}
func (*QueryDVSGroupSyncStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{8}
}
func (m *QueryDVSGroupSyncStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDVSGroupSyncStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDVSGroupSyncStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDVSGroupSyncStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDVSGroupSyncStatusRequest.Merge(m, src)
}
func (m *QueryDVSGroupSyncStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDVSGroupSyncStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDVSGroupSyncStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDVSGroupSyncStatusRequest proto.InternalMessageInfo

func (m *QueryDVSGroupSyncStatusRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

// response of query dvs group data sync status
type QueryDVSGroupSyncStatusResponse struct {
	Xmsg []*types.Xmsg `protobuf:"bytes,1,rep,name=xmsg,proto3" json:"xmsg,omitempty"`
}

func (m *QueryDVSGroupSyncStatusResponse) Reset()         { *m = QueryDVSGroupSyncStatusResponse{} }
func (m *QueryDVSGroupSyncStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDVSGroupSyncStatusResponse) ProtoMessage()    {}
func (*QueryDVSGroupSyncStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{9}
}
func (m *QueryDVSGroupSyncStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDVSGroupSyncStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDVSGroupSyncStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDVSGroupSyncStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDVSGroupSyncStatusResponse.Merge(m, src)
}
func (m *QueryDVSGroupSyncStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDVSGroupSyncStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDVSGroupSyncStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDVSGroupSyncStatusResponse proto.InternalMessageInfo

func (m *QueryDVSGroupSyncStatusResponse) GetXmsg() []*types.Xmsg {
	if m != nil {
		return m.Xmsg
	}
	return nil
}

// request of query dvs supported chain list
type QueryDVSSupportedChainListRequest struct {
	RegistryRouterAddress string `protobuf:"bytes,1,opt,name=registry_router_address,json=registryRouterAddress,proto3" json:"registry_router_address,omitempty"`
}

func (m *QueryDVSSupportedChainListRequest) Reset()         { *m = QueryDVSSupportedChainListRequest{} }
func (m *QueryDVSSupportedChainListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDVSSupportedChainListRequest) ProtoMessage()    {}
func (*QueryDVSSupportedChainListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{10}
}
func (m *QueryDVSSupportedChainListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDVSSupportedChainListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDVSSupportedChainListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDVSSupportedChainListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDVSSupportedChainListRequest.Merge(m, src)
}
func (m *QueryDVSSupportedChainListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDVSSupportedChainListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDVSSupportedChainListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDVSSupportedChainListRequest proto.InternalMessageInfo

func (m *QueryDVSSupportedChainListRequest) GetRegistryRouterAddress() string {
	if m != nil {
		return m.RegistryRouterAddress
	}
	return ""
}

// response of query dvs supported chain list
type QueryDVSSupportedChainListResponse struct {
	DvsInfos *DVSInfoList `protobuf:"bytes,1,opt,name=dvs_infos,json=dvsInfos,proto3" json:"dvs_infos,omitempty"`
}

func (m *QueryDVSSupportedChainListResponse) Reset()         { *m = QueryDVSSupportedChainListResponse{} }
func (m *QueryDVSSupportedChainListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDVSSupportedChainListResponse) ProtoMessage()    {}
func (*QueryDVSSupportedChainListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{11}
}
func (m *QueryDVSSupportedChainListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDVSSupportedChainListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDVSSupportedChainListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDVSSupportedChainListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDVSSupportedChainListResponse.Merge(m, src)
}
func (m *QueryDVSSupportedChainListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDVSSupportedChainListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDVSSupportedChainListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDVSSupportedChainListResponse proto.InternalMessageInfo

func (m *QueryDVSSupportedChainListResponse) GetDvsInfos() *DVSInfoList {
	if m != nil {
		return m.DvsInfos
	}
	return nil
}

// request of query registry router list
type QueryDVSRegistryRouterListRequest struct {
}

func (m *QueryDVSRegistryRouterListRequest) Reset()         { *m = QueryDVSRegistryRouterListRequest{} }
func (m *QueryDVSRegistryRouterListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDVSRegistryRouterListRequest) ProtoMessage()    {}
func (*QueryDVSRegistryRouterListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{12}
}
func (m *QueryDVSRegistryRouterListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDVSRegistryRouterListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDVSRegistryRouterListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDVSRegistryRouterListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDVSRegistryRouterListRequest.Merge(m, src)
}
func (m *QueryDVSRegistryRouterListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDVSRegistryRouterListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDVSRegistryRouterListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDVSRegistryRouterListRequest proto.InternalMessageInfo

// response of query registry router list
type QueryDVSRegistryRouterListResponse struct {
	RegistryRouterSet []*RegistryRouterSet `protobuf:"bytes,1,rep,name=registry_router_set,json=registryRouterSet,proto3" json:"registry_router_set,omitempty"`
}

func (m *QueryDVSRegistryRouterListResponse) Reset()         { *m = QueryDVSRegistryRouterListResponse{} }
func (m *QueryDVSRegistryRouterListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDVSRegistryRouterListResponse) ProtoMessage()    {}
func (*QueryDVSRegistryRouterListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{13}
}
func (m *QueryDVSRegistryRouterListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDVSRegistryRouterListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDVSRegistryRouterListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDVSRegistryRouterListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDVSRegistryRouterListResponse.Merge(m, src)
}
func (m *QueryDVSRegistryRouterListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDVSRegistryRouterListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDVSRegistryRouterListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDVSRegistryRouterListResponse proto.InternalMessageInfo

func (m *QueryDVSRegistryRouterListResponse) GetRegistryRouterSet() []*RegistryRouterSet {
	if m != nil {
		return m.RegistryRouterSet
	}
	return nil
}

// request of query group data list
type QueryDVSGroupDataListRequest struct {
	RegistryRouterAddress string `protobuf:"bytes,1,opt,name=registry_router_address,json=registryRouterAddress,proto3" json:"registry_router_address,omitempty"`
}

func (m *QueryDVSGroupDataListRequest) Reset()         { *m = QueryDVSGroupDataListRequest{} }
func (m *QueryDVSGroupDataListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDVSGroupDataListRequest) ProtoMessage()    {}
func (*QueryDVSGroupDataListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{14}
}
func (m *QueryDVSGroupDataListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDVSGroupDataListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDVSGroupDataListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDVSGroupDataListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDVSGroupDataListRequest.Merge(m, src)
}
func (m *QueryDVSGroupDataListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDVSGroupDataListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDVSGroupDataListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDVSGroupDataListRequest proto.InternalMessageInfo

func (m *QueryDVSGroupDataListRequest) GetRegistryRouterAddress() string {
	if m != nil {
		return m.RegistryRouterAddress
	}
	return ""
}

// response of query group data list
type QueryDVSGroupDataListResponse struct {
	Groups []*Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *QueryDVSGroupDataListResponse) Reset()         { *m = QueryDVSGroupDataListResponse{} }
func (m *QueryDVSGroupDataListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDVSGroupDataListResponse) ProtoMessage()    {}
func (*QueryDVSGroupDataListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{15}
}
func (m *QueryDVSGroupDataListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDVSGroupDataListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDVSGroupDataListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDVSGroupDataListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDVSGroupDataListResponse.Merge(m, src)
}
func (m *QueryDVSGroupDataListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDVSGroupDataListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDVSGroupDataListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDVSGroupDataListResponse proto.InternalMessageInfo

func (m *QueryDVSGroupDataListResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// request of query group operator registration list
type QueryDVSGroupOperatorRegistrationListRequest struct {
	RegistryRouterAddress string `protobuf:"bytes,1,opt,name=registry_router_address,json=registryRouterAddress,proto3" json:"registry_router_address,omitempty"`
}

func (m *QueryDVSGroupOperatorRegistrationListRequest) Reset() {
	*m = QueryDVSGroupOperatorRegistrationListRequest{}
}
func (m *QueryDVSGroupOperatorRegistrationListRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDVSGroupOperatorRegistrationListRequest) ProtoMessage() {}
func (*QueryDVSGroupOperatorRegistrationListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{16}
}
func (m *QueryDVSGroupOperatorRegistrationListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDVSGroupOperatorRegistrationListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDVSGroupOperatorRegistrationListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDVSGroupOperatorRegistrationListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDVSGroupOperatorRegistrationListRequest.Merge(m, src)
}
func (m *QueryDVSGroupOperatorRegistrationListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDVSGroupOperatorRegistrationListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDVSGroupOperatorRegistrationListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDVSGroupOperatorRegistrationListRequest proto.InternalMessageInfo

func (m *QueryDVSGroupOperatorRegistrationListRequest) GetRegistryRouterAddress() string {
	if m != nil {
		return m.RegistryRouterAddress
	}
	return ""
}

// response of query group operator registration list
type QueryDVSGroupOperatorRegistrationListResponse struct {
	OperatorRegisteredInfos []*GroupOperatorRegistrationV2 `protobuf:"bytes,1,rep,name=operator_registered_infos,json=operatorRegisteredInfos,proto3" json:"operator_registered_infos,omitempty"`
}

func (m *QueryDVSGroupOperatorRegistrationListResponse) Reset() {
	*m = QueryDVSGroupOperatorRegistrationListResponse{}
}
func (m *QueryDVSGroupOperatorRegistrationListResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDVSGroupOperatorRegistrationListResponse) ProtoMessage() {}
func (*QueryDVSGroupOperatorRegistrationListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1314ec210efdaad6, []int{17}
}
func (m *QueryDVSGroupOperatorRegistrationListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDVSGroupOperatorRegistrationListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDVSGroupOperatorRegistrationListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDVSGroupOperatorRegistrationListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDVSGroupOperatorRegistrationListResponse.Merge(m, src)
}
func (m *QueryDVSGroupOperatorRegistrationListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDVSGroupOperatorRegistrationListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDVSGroupOperatorRegistrationListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDVSGroupOperatorRegistrationListResponse proto.InternalMessageInfo

func (m *QueryDVSGroupOperatorRegistrationListResponse) GetOperatorRegisteredInfos() []*GroupOperatorRegistrationV2 {
	if m != nil {
		return m.OperatorRegisteredInfos
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryEpochChangedOperatorSharesSnapshotRequest)(nil), "restaking.QueryEpochChangedOperatorSharesSnapshotRequest")
	proto.RegisterType((*QueryGetEpochChangedOperatorSharesSnapshotResponse)(nil), "restaking.QueryGetEpochChangedOperatorSharesSnapshotResponse")
	proto.RegisterType((*QueryEpochInfoRequest)(nil), "restaking.QueryEpochInfoRequest")
	proto.RegisterType((*QueryGetEpochInfoResponse)(nil), "restaking.QueryGetEpochInfoResponse")
	proto.RegisterType((*QueryOutboundStateByChainIDRequest)(nil), "restaking.QueryOutboundStateByChainIDRequest")
	proto.RegisterType((*QueryGetOutboundStateByChainIDResponse)(nil), "restaking.QueryGetOutboundStateByChainIDResponse")
	proto.RegisterType((*QueryDVSSupportedChainStatusRequest)(nil), "restaking.QueryDVSSupportedChainStatusRequest")
	proto.RegisterType((*QueryDVSSupportedChainStatusResponse)(nil), "restaking.QueryDVSSupportedChainStatusResponse")
	proto.RegisterType((*QueryDVSGroupSyncStatusRequest)(nil), "restaking.QueryDVSGroupSyncStatusRequest")
	proto.RegisterType((*QueryDVSGroupSyncStatusResponse)(nil), "restaking.QueryDVSGroupSyncStatusResponse")
	proto.RegisterType((*QueryDVSSupportedChainListRequest)(nil), "restaking.QueryDVSSupportedChainListRequest")
	proto.RegisterType((*QueryDVSSupportedChainListResponse)(nil), "restaking.QueryDVSSupportedChainListResponse")
	proto.RegisterType((*QueryDVSRegistryRouterListRequest)(nil), "restaking.QueryDVSRegistryRouterListRequest")
	proto.RegisterType((*QueryDVSRegistryRouterListResponse)(nil), "restaking.QueryDVSRegistryRouterListResponse")
	proto.RegisterType((*QueryDVSGroupDataListRequest)(nil), "restaking.QueryDVSGroupDataListRequest")
	proto.RegisterType((*QueryDVSGroupDataListResponse)(nil), "restaking.QueryDVSGroupDataListResponse")
	proto.RegisterType((*QueryDVSGroupOperatorRegistrationListRequest)(nil), "restaking.QueryDVSGroupOperatorRegistrationListRequest")
	proto.RegisterType((*QueryDVSGroupOperatorRegistrationListResponse)(nil), "restaking.QueryDVSGroupOperatorRegistrationListResponse")
}

func init() { proto.RegisterFile("restaking/query.proto", fileDescriptor_1314ec210efdaad6) }

var fileDescriptor_1314ec210efdaad6 = []byte{
	// 1060 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0x4f, 0x6f, 0x1b, 0xc5,
	0x1b, 0xc7, 0xb3, 0xfd, 0xe5, 0x97, 0x36, 0x4f, 0x42, 0x81, 0x81, 0xe0, 0x7a, 0x95, 0xb8, 0xce,
	0x34, 0x2d, 0x2e, 0xad, 0xed, 0xd4, 0x91, 0x4a, 0x8b, 0x4a, 0xa1, 0xa9, 0x51, 0x09, 0xaa, 0xa8,
	0x58, 0x4b, 0x11, 0x7f, 0x0e, 0xab, 0xb5, 0x77, 0xb2, 0x6b, 0xd5, 0xd9, 0xd9, 0xce, 0xcc, 0x56,
	0xf6, 0x0d, 0xf1, 0x0a, 0x90, 0x7a, 0x86, 0x1b, 0x2f, 0x80, 0x13, 0xe2, 0x1d, 0xf4, 0x58, 0x89,
	0x0b, 0xa7, 0x0a, 0x25, 0x48, 0xbc, 0x08, 0x2e, 0x68, 0x67, 0x67, 0xe3, 0xdd, 0x65, 0xd7, 0xde,
	0x88, 0x5e, 0x2a, 0xef, 0x33, 0xcf, 0x3c, 0xcf, 0xe7, 0x3b, 0xff, 0xbe, 0x0d, 0xac, 0x31, 0xc2,
	0x85, 0xf5, 0x78, 0xe8, 0x39, 0xed, 0x27, 0x01, 0x61, 0x93, 0x96, 0xcf, 0xa8, 0xa0, 0x68, 0xf9,
	0x24, 0xac, 0xbf, 0xed, 0x50, 0x87, 0xca, 0x68, 0x3b, 0xfc, 0x15, 0x25, 0xe8, 0xeb, 0x0e, 0xa5,
	0xce, 0x88, 0xb4, 0x2d, 0x7f, 0xd8, 0xb6, 0x3c, 0x8f, 0x0a, 0x4b, 0x0c, 0xa9, 0xc7, 0xd5, 0xa8,
	0x3e, 0xad, 0x6a, 0x93, 0x11, 0x71, 0xe4, 0xa0, 0x1a, 0xdb, 0x9a, 0x8e, 0x11, 0x9f, 0x0e, 0x5c,
	0x93, 0x06, 0xa2, 0x4f, 0x03, 0xcf, 0x36, 0xb9, 0xb0, 0x04, 0x51, 0x59, 0x09, 0x2e, 0x87, 0xd1,
	0xc0, 0x57, 0xe1, 0xd7, 0xc7, 0x87, 0xdc, 0x69, 0x87, 0xff, 0x44, 0x01, 0xdc, 0x83, 0xd6, 0x17,
	0x21, 0xf7, 0x27, 0x61, 0xa9, 0xfb, 0xae, 0xe5, 0x39, 0xc4, 0x7e, 0xe4, 0x13, 0x66, 0x09, 0xca,
	0x7a, 0xae, 0xc5, 0x08, 0xef, 0x79, 0x96, 0xcf, 0x5d, 0x2a, 0x0c, 0xf2, 0x24, 0x20, 0x5c, 0xa0,
	0x4d, 0x58, 0x8d, 0xfa, 0x7a, 0xc1, 0x61, 0x9f, 0xb0, 0x0b, 0x5a, 0x5d, 0x6b, 0x2c, 0x1a, 0x2b,
	0x32, 0xf6, 0xb9, 0x0c, 0xe1, 0x1f, 0x35, 0xe8, 0xc8, 0xaa, 0x0f, 0x88, 0x28, 0x53, 0x98, 0xfb,
	0xd4, 0xe3, 0x04, 0xb9, 0x50, 0x1f, 0x44, 0x89, 0x26, 0x55, 0x99, 0x26, 0x97, 0xa9, 0x26, 0x57,
	0xb9, 0x17, 0xb4, 0xfa, 0xff, 0x1a, 0x2b, 0x9d, 0x6a, 0xeb, 0x44, 0x5e, 0x2b, 0x5d, 0x74, 0x77,
	0xf1, 0xf9, 0xcb, 0x8b, 0x0b, 0xc6, 0xc6, 0x60, 0x56, 0x47, 0x5c, 0x81, 0xb5, 0xa9, 0xea, 0x3d,
	0xef, 0x80, 0x2a, 0x71, 0xf8, 0x2e, 0x54, 0x53, 0xe0, 0xd1, 0x98, 0xe2, 0xdb, 0x84, 0xd5, 0xfe,
	0x88, 0x0e, 0x1e, 0x67, 0x94, 0xcb, 0x98, 0x52, 0xfe, 0x11, 0x60, 0x39, 0xff, 0x91, 0xda, 0x93,
	0x5e, 0xb8, 0x25, 0xbb, 0x93, 0xfb, 0xae, 0x35, 0xf4, 0xf6, 0xba, 0xf1, 0x12, 0x56, 0xe1, 0xdc,
	0x20, 0x8c, 0x98, 0x43, 0x5b, 0x15, 0x39, 0x2b, 0xbf, 0xf7, 0x6c, 0xec, 0xc1, 0x95, 0x18, 0xa0,
	0xa8, 0x86, 0xa2, 0xe9, 0xc2, 0xf9, 0xf4, 0xce, 0xcb, 0x52, 0x2b, 0x9d, 0x8d, 0xc4, 0xda, 0x48,
	0x0d, 0xa9, 0x3a, 0xc6, 0x6b, 0x34, 0xf9, 0x89, 0xc7, 0x70, 0x49, 0xf6, 0xeb, 0xee, 0xf7, 0x7a,
	0x81, 0xef, 0x53, 0x26, 0x88, 0x2d, 0x3b, 0x85, 0xc3, 0x01, 0x8f, 0x89, 0x6f, 0x42, 0x85, 0x11,
	0x67, 0xc8, 0x05, 0x9b, 0x98, 0x8c, 0x06, 0x82, 0x30, 0xd3, 0xb2, 0x6d, 0x46, 0x38, 0x97, 0x5d,
	0x97, 0x8d, 0xb5, 0x78, 0xd8, 0x90, 0xa3, 0xf7, 0xa2, 0xc1, 0x94, 0xd2, 0x33, 0x69, 0xa5, 0x2e,
	0x6c, 0xcd, 0xee, 0xac, 0x74, 0x7e, 0x9c, 0xab, 0xf3, 0x7c, 0xfa, 0x0c, 0x24, 0x34, 0x05, 0x3c,
	0xab, 0xf1, 0x36, 0xd4, 0xe2, 0x4e, 0x0f, 0xc2, 0xbb, 0xd0, 0x9b, 0x78, 0x83, 0xb4, 0xbc, 0x0a,
	0x9c, 0x15, 0x63, 0xd3, 0xb5, 0xb8, 0xab, 0xe4, 0x2c, 0x89, 0xf1, 0xa7, 0x16, 0x77, 0xf1, 0x3d,
	0xb8, 0x58, 0x38, 0x55, 0xf1, 0xd5, 0x60, 0x31, 0xbc, 0x4f, 0xea, 0x64, 0x42, 0x4b, 0x5e, 0xae,
	0x2f, 0x0f, 0xb9, 0x63, 0xc8, 0x38, 0xfe, 0x06, 0x36, 0xf3, 0x75, 0x3e, 0x1c, 0x72, 0xf1, 0x1f,
	0xd7, 0x17, 0x7f, 0xa5, 0xce, 0x5b, 0x41, 0x71, 0x85, 0xb8, 0x03, 0xcb, 0xf6, 0x53, 0x6e, 0x0e,
	0xbd, 0x03, 0xca, 0xd5, 0x29, 0x79, 0x27, 0xb1, 0x7a, 0xdd, 0xfd, 0x5e, 0x78, 0xce, 0xe5, 0x94,
	0x73, 0xf6, 0x53, 0x1e, 0x7e, 0x70, 0x7c, 0x69, 0xca, 0x6d, 0xa4, 0x7a, 0x27, 0xb8, 0x31, 0x9b,
	0xf6, 0xcf, 0x4b, 0x52, 0xfd, 0x1f, 0xc2, 0x5b, 0x59, 0x75, 0x9c, 0xc4, 0x77, 0x79, 0x3d, 0x41,
	0x92, 0xae, 0xd1, 0x23, 0xc2, 0x78, 0x93, 0x65, 0x43, 0x78, 0x1f, 0xd6, 0x53, 0x7b, 0xd2, 0xb5,
	0x84, 0xf5, 0x2a, 0xd6, 0x72, 0x0f, 0x36, 0x0a, 0xea, 0x2a, 0x19, 0x0d, 0x58, 0x92, 0x6f, 0x29,
	0x57, 0xe4, 0x6f, 0x24, 0xc8, 0xe5, 0x0c, 0x43, 0x8d, 0xe3, 0x03, 0xb8, 0x9e, 0x2a, 0x15, 0x3f,
	0x43, 0x4a, 0x9f, 0x7c, 0xce, 0x5f, 0x05, 0xf2, 0x33, 0x0d, 0x9a, 0x25, 0x1b, 0x29, 0x0d, 0x7d,
	0xa8, 0x9e, 0xbc, 0xad, 0x51, 0x4d, 0xc2, 0x88, 0x7d, 0x72, 0x34, 0x42, 0x59, 0x57, 0xb2, 0xb2,
	0xf2, 0x8a, 0xee, 0x77, 0x8c, 0x0a, 0x4d, 0xc5, 0xc3, 0x3a, 0xf2, 0xe4, 0x74, 0xfe, 0x5e, 0x85,
	0xff, 0x4b, 0x2a, 0xf4, 0x97, 0x06, 0x97, 0x4b, 0x79, 0x00, 0xba, 0x9d, 0x68, 0x7a, 0x3a, 0x43,
	0xd2, 0x3f, 0xcc, 0x4e, 0x3d, 0x95, 0xeb, 0xe0, 0xee, 0x77, 0xbf, 0xfd, 0xf9, 0xec, 0xcc, 0x5d,
	0x74, 0xa7, 0xed, 0x93, 0xd1, 0xa8, 0x29, 0x9f, 0xa7, 0x76, 0xd6, 0x63, 0xe7, 0xf9, 0x12, 0xfa,
	0x56, 0x83, 0xd5, 0xa4, 0x69, 0xa0, 0x7a, 0xae, 0xa0, 0x84, 0xd7, 0xe8, 0x5b, 0x45, 0xdc, 0x49,
	0xd3, 0xc1, 0x0d, 0x89, 0x87, 0x51, 0x7d, 0x16, 0x5e, 0xb8, 0x7d, 0xe8, 0x17, 0x0d, 0xaa, 0x85,
	0xb6, 0x81, 0x9a, 0xd9, 0x6e, 0x33, 0x2d, 0x4a, 0xbf, 0x91, 0x03, 0x37, 0xdb, 0x90, 0xf0, 0x2d,
	0x49, 0xda, 0x41, 0xdb, 0xf9, 0xa4, 0xe9, 0x47, 0xdc, 0xec, 0x4f, 0xcc, 0xd8, 0x19, 0xd0, 0xaf,
	0xda, 0xf4, 0x4a, 0xe7, 0x79, 0x01, 0x6a, 0x65, 0x69, 0x66, 0xdb, 0x95, 0xde, 0x2e, 0x9d, 0x5f,
	0x8e, 0x3d, 0x7c, 0x3d, 0x79, 0x3c, 0x5f, 0x71, 0xf3, 0x08, 0xed, 0x27, 0x0d, 0x2a, 0x05, 0x16,
	0x81, 0xae, 0xe6, 0x60, 0xe4, 0x3b, 0x90, 0xfe, 0x5e, 0x99, 0x54, 0x05, 0xbb, 0x23, 0x61, 0x9b,
	0xe8, 0x5a, 0x31, 0xac, 0x7c, 0x87, 0x4c, 0x3e, 0xf1, 0x06, 0x31, 0xe7, 0xcf, 0x1a, 0xe8, 0xc5,
	0x56, 0x81, 0xae, 0xcf, 0x5d, 0xb1, 0xc4, 0x7b, 0xa5, 0x37, 0x4b, 0x66, 0x2b, 0xe0, 0x9b, 0x12,
	0x78, 0x1b, 0xb5, 0xca, 0xaf, 0xee, 0x28, 0x84, 0x4a, 0x32, 0xff, 0xdb, 0x5e, 0x72, 0x99, 0x0b,
	0xad, 0x2a, 0x97, 0xb9, 0xd8, 0xb3, 0xca, 0x30, 0x67, 0x9f, 0x6c, 0xc9, 0xfc, 0x83, 0xa6, 0xfe,
	0x6f, 0x99, 0xb5, 0x11, 0xf4, 0x6e, 0xd1, 0x16, 0x67, 0x0c, 0x4c, 0x6f, 0xcc, 0x4f, 0x54, 0x90,
	0x37, 0x24, 0xe4, 0x35, 0x74, 0x75, 0xde, 0x49, 0xb0, 0x2d, 0x61, 0x45, 0x7c, 0x2f, 0x35, 0xb8,
	0x5c, 0xca, 0x32, 0xd0, 0xfb, 0x45, 0x18, 0x73, 0xdc, 0x4c, 0xbf, 0x75, 0xfa, 0x89, 0x4a, 0xcf,
	0xae, 0xd4, 0x73, 0x07, 0x7d, 0x30, 0x4f, 0x4f, 0xc6, 0xc3, 0xa2, 0x52, 0x52, 0xe0, 0xee, 0x67,
	0xcf, 0x8f, 0x6a, 0xda, 0x8b, 0xa3, 0x9a, 0xf6, 0xc7, 0x51, 0x4d, 0xfb, 0xfe, 0xb8, 0xb6, 0xf0,
	0xe2, 0xb8, 0xb6, 0xf0, 0xfb, 0x71, 0x6d, 0xe1, 0xeb, 0x6d, 0x67, 0x28, 0xdc, 0xa0, 0xdf, 0x1a,
	0xd0, 0xc3, 0x64, 0xfd, 0xf0, 0xe7, 0x80, 0x32, 0xd2, 0x1e, 0x27, 0x5a, 0x89, 0x89, 0x4f, 0x78,
	0x7f, 0x49, 0xfe, 0x91, 0xb4, 0xf3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x89, 0x08, 0x99,
	0xe6, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries SystemContract
	GetEpochChangedOperatorSharesSnapshot(ctx context.Context, in *QueryEpochChangedOperatorSharesSnapshotRequest, opts ...grpc.CallOption) (*QueryGetEpochChangedOperatorSharesSnapshotResponse, error)
	// Queries blocks per epoch
	GetEpochInfo(ctx context.Context, in *QueryEpochInfoRequest, opts ...grpc.CallOption) (*QueryGetEpochInfoResponse, error)
	// Queries outbound state by chain id
	GetOutboundStateByChainID(ctx context.Context, in *QueryOutboundStateByChainIDRequest, opts ...grpc.CallOption) (*QueryGetOutboundStateByChainIDResponse, error)
	// Queries dvs supported chain outbound state by chain id
	QueryDVSSupportedChainStatus(ctx context.Context, in *QueryDVSSupportedChainStatusRequest, opts ...grpc.CallOption) (*QueryDVSSupportedChainStatusResponse, error)
	// Queries dvs group data sync status
	QueryDVSGroupSyncStatus(ctx context.Context, in *QueryDVSGroupSyncStatusRequest, opts ...grpc.CallOption) (*QueryDVSGroupSyncStatusResponse, error)
	// Queries dvs supported chain list
	QueryDVSSupportedChainList(ctx context.Context, in *QueryDVSSupportedChainListRequest, opts ...grpc.CallOption) (*QueryDVSSupportedChainListResponse, error)
	// Queries registry router list
	QueryDVSRegistryRouterList(ctx context.Context, in *QueryDVSRegistryRouterListRequest, opts ...grpc.CallOption) (*QueryDVSRegistryRouterListResponse, error)
	// Queries group date list
	QueryDVSGroupDataList(ctx context.Context, in *QueryDVSGroupDataListRequest, opts ...grpc.CallOption) (*QueryDVSGroupDataListResponse, error)
	// Queries group operator registration list
	QueryDVSGroupOperatorRegistrationList(ctx context.Context, in *QueryDVSGroupOperatorRegistrationListRequest, opts ...grpc.CallOption) (*QueryDVSGroupOperatorRegistrationListResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetEpochChangedOperatorSharesSnapshot(ctx context.Context, in *QueryEpochChangedOperatorSharesSnapshotRequest, opts ...grpc.CallOption) (*QueryGetEpochChangedOperatorSharesSnapshotResponse, error) {
	out := new(QueryGetEpochChangedOperatorSharesSnapshotResponse)
	err := c.cc.Invoke(ctx, "/restaking.Query/GetEpochChangedOperatorSharesSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEpochInfo(ctx context.Context, in *QueryEpochInfoRequest, opts ...grpc.CallOption) (*QueryGetEpochInfoResponse, error) {
	out := new(QueryGetEpochInfoResponse)
	err := c.cc.Invoke(ctx, "/restaking.Query/GetEpochInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOutboundStateByChainID(ctx context.Context, in *QueryOutboundStateByChainIDRequest, opts ...grpc.CallOption) (*QueryGetOutboundStateByChainIDResponse, error) {
	out := new(QueryGetOutboundStateByChainIDResponse)
	err := c.cc.Invoke(ctx, "/restaking.Query/GetOutboundStateByChainID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDVSSupportedChainStatus(ctx context.Context, in *QueryDVSSupportedChainStatusRequest, opts ...grpc.CallOption) (*QueryDVSSupportedChainStatusResponse, error) {
	out := new(QueryDVSSupportedChainStatusResponse)
	err := c.cc.Invoke(ctx, "/restaking.Query/QueryDVSSupportedChainStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDVSGroupSyncStatus(ctx context.Context, in *QueryDVSGroupSyncStatusRequest, opts ...grpc.CallOption) (*QueryDVSGroupSyncStatusResponse, error) {
	out := new(QueryDVSGroupSyncStatusResponse)
	err := c.cc.Invoke(ctx, "/restaking.Query/QueryDVSGroupSyncStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDVSSupportedChainList(ctx context.Context, in *QueryDVSSupportedChainListRequest, opts ...grpc.CallOption) (*QueryDVSSupportedChainListResponse, error) {
	out := new(QueryDVSSupportedChainListResponse)
	err := c.cc.Invoke(ctx, "/restaking.Query/QueryDVSSupportedChainList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDVSRegistryRouterList(ctx context.Context, in *QueryDVSRegistryRouterListRequest, opts ...grpc.CallOption) (*QueryDVSRegistryRouterListResponse, error) {
	out := new(QueryDVSRegistryRouterListResponse)
	err := c.cc.Invoke(ctx, "/restaking.Query/QueryDVSRegistryRouterList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDVSGroupDataList(ctx context.Context, in *QueryDVSGroupDataListRequest, opts ...grpc.CallOption) (*QueryDVSGroupDataListResponse, error) {
	out := new(QueryDVSGroupDataListResponse)
	err := c.cc.Invoke(ctx, "/restaking.Query/QueryDVSGroupDataList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDVSGroupOperatorRegistrationList(ctx context.Context, in *QueryDVSGroupOperatorRegistrationListRequest, opts ...grpc.CallOption) (*QueryDVSGroupOperatorRegistrationListResponse, error) {
	out := new(QueryDVSGroupOperatorRegistrationListResponse)
	err := c.cc.Invoke(ctx, "/restaking.Query/QueryDVSGroupOperatorRegistrationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries SystemContract
	GetEpochChangedOperatorSharesSnapshot(context.Context, *QueryEpochChangedOperatorSharesSnapshotRequest) (*QueryGetEpochChangedOperatorSharesSnapshotResponse, error)
	// Queries blocks per epoch
	GetEpochInfo(context.Context, *QueryEpochInfoRequest) (*QueryGetEpochInfoResponse, error)
	// Queries outbound state by chain id
	GetOutboundStateByChainID(context.Context, *QueryOutboundStateByChainIDRequest) (*QueryGetOutboundStateByChainIDResponse, error)
	// Queries dvs supported chain outbound state by chain id
	QueryDVSSupportedChainStatus(context.Context, *QueryDVSSupportedChainStatusRequest) (*QueryDVSSupportedChainStatusResponse, error)
	// Queries dvs group data sync status
	QueryDVSGroupSyncStatus(context.Context, *QueryDVSGroupSyncStatusRequest) (*QueryDVSGroupSyncStatusResponse, error)
	// Queries dvs supported chain list
	QueryDVSSupportedChainList(context.Context, *QueryDVSSupportedChainListRequest) (*QueryDVSSupportedChainListResponse, error)
	// Queries registry router list
	QueryDVSRegistryRouterList(context.Context, *QueryDVSRegistryRouterListRequest) (*QueryDVSRegistryRouterListResponse, error)
	// Queries group date list
	QueryDVSGroupDataList(context.Context, *QueryDVSGroupDataListRequest) (*QueryDVSGroupDataListResponse, error)
	// Queries group operator registration list
	QueryDVSGroupOperatorRegistrationList(context.Context, *QueryDVSGroupOperatorRegistrationListRequest) (*QueryDVSGroupOperatorRegistrationListResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetEpochChangedOperatorSharesSnapshot(ctx context.Context, req *QueryEpochChangedOperatorSharesSnapshotRequest) (*QueryGetEpochChangedOperatorSharesSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpochChangedOperatorSharesSnapshot not implemented")
}
func (*UnimplementedQueryServer) GetEpochInfo(ctx context.Context, req *QueryEpochInfoRequest) (*QueryGetEpochInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpochInfo not implemented")
}
func (*UnimplementedQueryServer) GetOutboundStateByChainID(ctx context.Context, req *QueryOutboundStateByChainIDRequest) (*QueryGetOutboundStateByChainIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutboundStateByChainID not implemented")
}
func (*UnimplementedQueryServer) QueryDVSSupportedChainStatus(ctx context.Context, req *QueryDVSSupportedChainStatusRequest) (*QueryDVSSupportedChainStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDVSSupportedChainStatus not implemented")
}
func (*UnimplementedQueryServer) QueryDVSGroupSyncStatus(ctx context.Context, req *QueryDVSGroupSyncStatusRequest) (*QueryDVSGroupSyncStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDVSGroupSyncStatus not implemented")
}
func (*UnimplementedQueryServer) QueryDVSSupportedChainList(ctx context.Context, req *QueryDVSSupportedChainListRequest) (*QueryDVSSupportedChainListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDVSSupportedChainList not implemented")
}
func (*UnimplementedQueryServer) QueryDVSRegistryRouterList(ctx context.Context, req *QueryDVSRegistryRouterListRequest) (*QueryDVSRegistryRouterListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDVSRegistryRouterList not implemented")
}
func (*UnimplementedQueryServer) QueryDVSGroupDataList(ctx context.Context, req *QueryDVSGroupDataListRequest) (*QueryDVSGroupDataListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDVSGroupDataList not implemented")
}
func (*UnimplementedQueryServer) QueryDVSGroupOperatorRegistrationList(ctx context.Context, req *QueryDVSGroupOperatorRegistrationListRequest) (*QueryDVSGroupOperatorRegistrationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDVSGroupOperatorRegistrationList not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetEpochChangedOperatorSharesSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEpochChangedOperatorSharesSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEpochChangedOperatorSharesSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaking.Query/GetEpochChangedOperatorSharesSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEpochChangedOperatorSharesSnapshot(ctx, req.(*QueryEpochChangedOperatorSharesSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEpochInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEpochInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEpochInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaking.Query/GetEpochInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEpochInfo(ctx, req.(*QueryEpochInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOutboundStateByChainID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutboundStateByChainIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOutboundStateByChainID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaking.Query/GetOutboundStateByChainID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOutboundStateByChainID(ctx, req.(*QueryOutboundStateByChainIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDVSSupportedChainStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDVSSupportedChainStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDVSSupportedChainStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaking.Query/QueryDVSSupportedChainStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDVSSupportedChainStatus(ctx, req.(*QueryDVSSupportedChainStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDVSGroupSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDVSGroupSyncStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDVSGroupSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaking.Query/QueryDVSGroupSyncStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDVSGroupSyncStatus(ctx, req.(*QueryDVSGroupSyncStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDVSSupportedChainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDVSSupportedChainListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDVSSupportedChainList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaking.Query/QueryDVSSupportedChainList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDVSSupportedChainList(ctx, req.(*QueryDVSSupportedChainListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDVSRegistryRouterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDVSRegistryRouterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDVSRegistryRouterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaking.Query/QueryDVSRegistryRouterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDVSRegistryRouterList(ctx, req.(*QueryDVSRegistryRouterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDVSGroupDataList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDVSGroupDataListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDVSGroupDataList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaking.Query/QueryDVSGroupDataList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDVSGroupDataList(ctx, req.(*QueryDVSGroupDataListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDVSGroupOperatorRegistrationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDVSGroupOperatorRegistrationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDVSGroupOperatorRegistrationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaking.Query/QueryDVSGroupOperatorRegistrationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDVSGroupOperatorRegistrationList(ctx, req.(*QueryDVSGroupOperatorRegistrationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "restaking.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEpochChangedOperatorSharesSnapshot",
			Handler:    _Query_GetEpochChangedOperatorSharesSnapshot_Handler,
		},
		{
			MethodName: "GetEpochInfo",
			Handler:    _Query_GetEpochInfo_Handler,
		},
		{
			MethodName: "GetOutboundStateByChainID",
			Handler:    _Query_GetOutboundStateByChainID_Handler,
		},
		{
			MethodName: "QueryDVSSupportedChainStatus",
			Handler:    _Query_QueryDVSSupportedChainStatus_Handler,
		},
		{
			MethodName: "QueryDVSGroupSyncStatus",
			Handler:    _Query_QueryDVSGroupSyncStatus_Handler,
		},
		{
			MethodName: "QueryDVSSupportedChainList",
			Handler:    _Query_QueryDVSSupportedChainList_Handler,
		},
		{
			MethodName: "QueryDVSRegistryRouterList",
			Handler:    _Query_QueryDVSRegistryRouterList_Handler,
		},
		{
			MethodName: "QueryDVSGroupDataList",
			Handler:    _Query_QueryDVSGroupDataList_Handler,
		},
		{
			MethodName: "QueryDVSGroupOperatorRegistrationList",
			Handler:    _Query_QueryDVSGroupOperatorRegistrationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "restaking/query.proto",
}

func (m *QueryEpochChangedOperatorSharesSnapshotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEpochChangedOperatorSharesSnapshotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEpochChangedOperatorSharesSnapshotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochChangedOperatorSharesSnapshotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochChangedOperatorSharesSnapshotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochChangedOperatorSharesSnapshotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChangedOperatorSharesSnapshot) > 0 {
		for iNdEx := len(m.ChangedOperatorSharesSnapshot) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChangedOperatorSharesSnapshot[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryEpochInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEpochInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEpochInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutboundStateByChainIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutboundStateByChainIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutboundStateByChainIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOutboundStateByChainIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOutboundStateByChainIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOutboundStateByChainIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutboundState != nil {
		{
			size, err := m.OutboundState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDVSSupportedChainStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDVSSupportedChainStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDVSSupportedChainStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RegistryRouterAddress) > 0 {
		i -= len(m.RegistryRouterAddress)
		copy(dAtA[i:], m.RegistryRouterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RegistryRouterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDVSSupportedChainStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDVSSupportedChainStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDVSSupportedChainStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutboundState != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OutboundState))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDVSGroupSyncStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDVSGroupSyncStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDVSGroupSyncStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDVSGroupSyncStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDVSGroupSyncStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDVSGroupSyncStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Xmsg) > 0 {
		for iNdEx := len(m.Xmsg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Xmsg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDVSSupportedChainListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDVSSupportedChainListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDVSSupportedChainListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RegistryRouterAddress) > 0 {
		i -= len(m.RegistryRouterAddress)
		copy(dAtA[i:], m.RegistryRouterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RegistryRouterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDVSSupportedChainListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDVSSupportedChainListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDVSSupportedChainListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DvsInfos != nil {
		{
			size, err := m.DvsInfos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDVSRegistryRouterListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDVSRegistryRouterListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDVSRegistryRouterListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDVSRegistryRouterListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDVSRegistryRouterListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDVSRegistryRouterListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RegistryRouterSet) > 0 {
		for iNdEx := len(m.RegistryRouterSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegistryRouterSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDVSGroupDataListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDVSGroupDataListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDVSGroupDataListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RegistryRouterAddress) > 0 {
		i -= len(m.RegistryRouterAddress)
		copy(dAtA[i:], m.RegistryRouterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RegistryRouterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDVSGroupDataListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDVSGroupDataListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDVSGroupDataListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDVSGroupOperatorRegistrationListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDVSGroupOperatorRegistrationListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDVSGroupOperatorRegistrationListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RegistryRouterAddress) > 0 {
		i -= len(m.RegistryRouterAddress)
		copy(dAtA[i:], m.RegistryRouterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RegistryRouterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDVSGroupOperatorRegistrationListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDVSGroupOperatorRegistrationListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDVSGroupOperatorRegistrationListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorRegisteredInfos) > 0 {
		for iNdEx := len(m.OperatorRegisteredInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorRegisteredInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryEpochChangedOperatorSharesSnapshotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovQuery(uint64(m.EpochNumber))
	}
	return n
}

func (m *QueryGetEpochChangedOperatorSharesSnapshotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChangedOperatorSharesSnapshot) > 0 {
		for _, e := range m.ChangedOperatorSharesSnapshot {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryEpochInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetEpochInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockNumber != 0 {
		n += 1 + sovQuery(uint64(m.BlockNumber))
	}
	return n
}

func (m *QueryOutboundStateByChainIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryGetOutboundStateByChainIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutboundState != nil {
		l = m.OutboundState.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDVSSupportedChainStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegistryRouterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryDVSSupportedChainStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutboundState != 0 {
		n += 1 + sovQuery(uint64(m.OutboundState))
	}
	return n
}

func (m *QueryDVSGroupSyncStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDVSGroupSyncStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Xmsg) > 0 {
		for _, e := range m.Xmsg {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDVSSupportedChainListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegistryRouterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDVSSupportedChainListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DvsInfos != nil {
		l = m.DvsInfos.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDVSRegistryRouterListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDVSRegistryRouterListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegistryRouterSet) > 0 {
		for _, e := range m.RegistryRouterSet {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDVSGroupDataListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegistryRouterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDVSGroupDataListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDVSGroupOperatorRegistrationListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegistryRouterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDVSGroupOperatorRegistrationListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorRegisteredInfos) > 0 {
		for _, e := range m.OperatorRegisteredInfos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryEpochChangedOperatorSharesSnapshotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEpochChangedOperatorSharesSnapshotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEpochChangedOperatorSharesSnapshotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochChangedOperatorSharesSnapshotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochChangedOperatorSharesSnapshotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochChangedOperatorSharesSnapshotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangedOperatorSharesSnapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangedOperatorSharesSnapshot = append(m.ChangedOperatorSharesSnapshot, OperatorShares{})
			if err := m.ChangedOperatorSharesSnapshot[len(m.ChangedOperatorSharesSnapshot)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEpochInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEpochInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEpochInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutboundStateByChainIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutboundStateByChainIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutboundStateByChainIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOutboundStateByChainIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOutboundStateByChainIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOutboundStateByChainIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutboundState == nil {
				m.OutboundState = &EpochOutboundState{}
			}
			if err := m.OutboundState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDVSSupportedChainStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDVSSupportedChainStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDVSSupportedChainStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDVSSupportedChainStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDVSSupportedChainStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDVSSupportedChainStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundState", wireType)
			}
			m.OutboundState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundState |= OutboundStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDVSGroupSyncStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDVSGroupSyncStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDVSGroupSyncStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDVSGroupSyncStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDVSGroupSyncStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDVSGroupSyncStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xmsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xmsg = append(m.Xmsg, &types.Xmsg{})
			if err := m.Xmsg[len(m.Xmsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDVSSupportedChainListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDVSSupportedChainListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDVSSupportedChainListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDVSSupportedChainListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDVSSupportedChainListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDVSSupportedChainListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DvsInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DvsInfos == nil {
				m.DvsInfos = &DVSInfoList{}
			}
			if err := m.DvsInfos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDVSRegistryRouterListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDVSRegistryRouterListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDVSRegistryRouterListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDVSRegistryRouterListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDVSRegistryRouterListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDVSRegistryRouterListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryRouterSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryRouterSet = append(m.RegistryRouterSet, &RegistryRouterSet{})
			if err := m.RegistryRouterSet[len(m.RegistryRouterSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDVSGroupDataListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDVSGroupDataListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDVSGroupDataListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDVSGroupDataListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDVSGroupDataListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDVSGroupDataListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDVSGroupOperatorRegistrationListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDVSGroupOperatorRegistrationListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDVSGroupOperatorRegistrationListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDVSGroupOperatorRegistrationListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDVSGroupOperatorRegistrationListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDVSGroupOperatorRegistrationListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorRegisteredInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorRegisteredInfos = append(m.OperatorRegisteredInfos, &GroupOperatorRegistrationV2{})
			if err := m.OperatorRegisteredInfos[len(m.OperatorRegisteredInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
