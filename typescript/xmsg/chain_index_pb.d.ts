// @generated by protoc-gen-es v1.3.0 with parameter "target=dts"
// @generated from file xmsg/chain_index.proto (package pellchain.pellcore.xmsg, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { InboundPellEvent } from "./pell_event_pb.js";

/**
 * event process status
 *
 * @generated from enum pellchain.pellcore.xmsg.EventStatus
 */
export declare enum EventStatus {
  /**
   *  pending status
   *
   * @generated from enum value: PENDING = 0;
   */
  PENDING = 0,

  /**
   * done status
   *
   * @generated from enum value: DONE = 1;
   */
  DONE = 1,
}

/**
 * chain_index represent inbound chain index
 *
 * @generated from message pellchain.pellcore.xmsg.ChainIndex
 */
export declare class ChainIndex extends Message<ChainIndex> {
  /**
   * @generated from field: uint64 chain_id = 1;
   */
  chainId: bigint;

  /**
   * @generated from field: uint64 curr_height = 2;
   */
  currHeight: bigint;

  constructor(data?: PartialMessage<ChainIndex>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pellchain.pellcore.xmsg.ChainIndex";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChainIndex;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChainIndex;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChainIndex;

  static equals(a: ChainIndex | PlainMessage<ChainIndex> | undefined, b: ChainIndex | PlainMessage<ChainIndex> | undefined): boolean;
}

/**
 * block proof represent observer commit block info
 *
 * @generated from message pellchain.pellcore.xmsg.BlockProof
 */
export declare class BlockProof extends Message<BlockProof> {
  /**
   * @generated from field: uint64 chain_id = 1;
   */
  chainId: bigint;

  /**
   * @generated from field: uint64 prev_block_height = 2;
   */
  prevBlockHeight: bigint;

  /**
   * @generated from field: uint64 block_height = 3;
   */
  blockHeight: bigint;

  /**
   * @generated from field: string block_hash = 4;
   */
  blockHash: string;

  /**
   * @generated from field: repeated pellchain.pellcore.xmsg.Event events = 5;
   */
  events: Event[];

  constructor(data?: PartialMessage<BlockProof>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pellchain.pellcore.xmsg.BlockProof";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockProof;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockProof;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockProof;

  static equals(a: BlockProof | PlainMessage<BlockProof> | undefined, b: BlockProof | PlainMessage<BlockProof> | undefined): boolean;
}

/**
 * evm event log
 *
 * @generated from message pellchain.pellcore.xmsg.Event
 */
export declare class Event extends Message<Event> {
  /**
   * @generated from field: uint64 index = 1;
   */
  index: bigint;

  /**
   * @generated from field: string tx_hash = 2;
   */
  txHash: string;

  /**
   * @generated from field: pellchain.pellcore.xmsg.EventStatus status = 3;
   */
  status: EventStatus;

  /**
   * @generated from field: pellchain.pellcore.xmsg.InboundPellEvent pell_event = 4;
   */
  pellEvent?: InboundPellEvent;

  /**
   * vote inbound msg digest
   *
   * @generated from field: string digest = 5;
   */
  digest: string;

  constructor(data?: PartialMessage<Event>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pellchain.pellcore.xmsg.Event";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event;

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean;
}

