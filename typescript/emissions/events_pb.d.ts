// @generated by protoc-gen-es v1.3.0 with parameter "target=dts"
// @generated from file emissions/events.proto (package pellchain.pellcore.emissions, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * emission type
 *
 * @generated from enum pellchain.pellcore.emissions.EmissionType
 */
export declare enum EmissionType {
  /**
   * slash
   *
   * @generated from enum value: SLASH = 0;
   */
  SLASH = 0,

  /**
   * reward
   *
   * @generated from enum value: REWARDS = 1;
   */
  REWARDS = 1,
}

/**
 * relayer emission
 *
 * @generated from message pellchain.pellcore.emissions.RelayerEmission
 */
export declare class RelayerEmission extends Message<RelayerEmission> {
  /**
   * @generated from field: pellchain.pellcore.emissions.EmissionType emission_type = 1;
   */
  emissionType: EmissionType;

  /**
   * @generated from field: string observer_address = 2;
   */
  observerAddress: string;

  /**
   * @generated from field: string amount = 3;
   */
  amount: string;

  constructor(data?: PartialMessage<RelayerEmission>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pellchain.pellcore.emissions.RelayerEmission";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RelayerEmission;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RelayerEmission;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RelayerEmission;

  static equals(a: RelayerEmission | PlainMessage<RelayerEmission> | undefined, b: RelayerEmission | PlainMessage<RelayerEmission> | undefined): boolean;
}

/**
 * relayer emissions event
 *
 * @generated from message pellchain.pellcore.emissions.EventRelayerEmissions
 */
export declare class EventRelayerEmissions extends Message<EventRelayerEmissions> {
  /**
   * @generated from field: string msg_type_url = 1;
   */
  msgTypeUrl: string;

  /**
   * @generated from field: repeated pellchain.pellcore.emissions.RelayerEmission emissions = 2;
   */
  emissions: RelayerEmission[];

  constructor(data?: PartialMessage<EventRelayerEmissions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pellchain.pellcore.emissions.EventRelayerEmissions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRelayerEmissions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRelayerEmissions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRelayerEmissions;

  static equals(a: EventRelayerEmissions | PlainMessage<EventRelayerEmissions> | undefined, b: EventRelayerEmissions | PlainMessage<EventRelayerEmissions> | undefined): boolean;
}

/**
 * block emissions event
 *
 * @generated from message pellchain.pellcore.emissions.EventBlockEmissions
 */
export declare class EventBlockEmissions extends Message<EventBlockEmissions> {
  /**
   * @generated from field: string msg_type_url = 1;
   */
  msgTypeUrl: string;

  /**
   * @generated from field: string bond_factor = 2;
   */
  bondFactor: string;

  /**
   * @generated from field: string reserves_factor = 3;
   */
  reservesFactor: string;

  /**
   * @generated from field: string duration_factor = 4;
   */
  durationFactor: string;

  /**
   * @generated from field: string validator_rewards_for_block = 5;
   */
  validatorRewardsForBlock: string;

  /**
   * @generated from field: string observer_rewards_for_block = 6;
   */
  observerRewardsForBlock: string;

  /**
   * @generated from field: string tss_rewards_for_block = 7;
   */
  tssRewardsForBlock: string;

  constructor(data?: PartialMessage<EventBlockEmissions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pellchain.pellcore.emissions.EventBlockEmissions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventBlockEmissions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventBlockEmissions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventBlockEmissions;

  static equals(a: EventBlockEmissions | PlainMessage<EventBlockEmissions> | undefined, b: EventBlockEmissions | PlainMessage<EventBlockEmissions> | undefined): boolean;
}

