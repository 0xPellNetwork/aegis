// @generated by protoc-gen-es v1.3.0 with parameter "target=dts"
// @generated from file relayer/node_account.proto (package pellchain.pellcore.relayer, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { PubKeySet } from "../pkg/crypto/crypto_pb.js";

/**
 * node status
 *
 * @generated from enum pellchain.pellcore.relayer.NodeStatus
 */
export declare enum NodeStatus {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: WHITELISTED = 1;
   */
  WHITELISTED = 1,

  /**
   * @generated from enum value: STANDBY = 2;
   */
  STANDBY = 2,

  /**
   * @generated from enum value: READY = 3;
   */
  READY = 3,

  /**
   * @generated from enum value: ACTIVE = 4;
   */
  ACTIVE = 4,

  /**
   * @generated from enum value: DISABLED = 5;
   */
  DISABLED = 5,
}

/**
 * node account
 *
 * @generated from message pellchain.pellcore.relayer.NodeAccount
 */
export declare class NodeAccount extends Message<NodeAccount> {
  /**
   * @generated from field: string operator = 1;
   */
  operator: string;

  /**
   * @generated from field: string grantee_address = 2;
   */
  granteeAddress: string;

  /**
   * @generated from field: crypto.PubKeySet grantee_pubkey = 3;
   */
  granteePubkey?: PubKeySet;

  /**
   * @generated from field: pellchain.pellcore.relayer.NodeStatus node_status = 4;
   */
  nodeStatus: NodeStatus;

  constructor(data?: PartialMessage<NodeAccount>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pellchain.pellcore.relayer.NodeAccount";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeAccount;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeAccount;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeAccount;

  static equals(a: NodeAccount | PlainMessage<NodeAccount> | undefined, b: NodeAccount | PlainMessage<NodeAccount> | undefined): boolean;
}

