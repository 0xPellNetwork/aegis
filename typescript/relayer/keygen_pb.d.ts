// @generated by protoc-gen-es v1.3.0 with parameter "target=dts"
// @generated from file relayer/keygen.proto (package pellchain.pellcore.relayer, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * keygen status
 *
 * @generated from enum pellchain.pellcore.relayer.KeygenStatus
 */
export declare enum KeygenStatus {
  /**
   * keygen pending
   *
   * @generated from enum value: PENDING = 0;
   */
  PENDING = 0,

  /**
   * keygen success
   *
   * @generated from enum value: SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * keygen failed
   *
   * @generated from enum value: FAILED = 3;
   */
  FAILED = 3,
}

/**
 * keygen instant
 *
 * @generated from message pellchain.pellcore.relayer.Keygen
 */
export declare class Keygen extends Message<Keygen> {
  /**
   * @generated from field: pellchain.pellcore.relayer.KeygenStatus status = 1;
   */
  status: KeygenStatus;

  /**
   * @generated from field: repeated string grantee_pubkeys = 2;
   */
  granteePubkeys: string[];

  /**
   * the blocknum that the key needs to be generated
   *
   * @generated from field: int64 block_number = 3;
   */
  blockNumber: bigint;

  constructor(data?: PartialMessage<Keygen>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pellchain.pellcore.relayer.Keygen";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Keygen;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Keygen;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Keygen;

  static equals(a: Keygen | PlainMessage<Keygen> | undefined, b: Keygen | PlainMessage<Keygen> | undefined): boolean;
}

